// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: instance.proto
#ifndef GRPC_instance_2eproto__INCLUDED
#define GRPC_instance_2eproto__INCLUDED

#include "instance.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace maarpc {

class Instance final {
 public:
  static constexpr char const* service_full_name() {
    return "maarpc.Instance";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::HandleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleResponse>> Asynccreate(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    virtual ::grpc::Status destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncdestroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>> register_custom_recognizer(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>>(register_custom_recognizerRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>> Asyncregister_custom_recognizer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>>(Asyncregister_custom_recognizerRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>> PrepareAsyncregister_custom_recognizer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>>(PrepareAsyncregister_custom_recognizerRaw(context, cq));
    }
    virtual ::grpc::Status unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncunregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncunregister_custom_recognizerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncunregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncunregister_custom_recognizerRaw(context, request, cq));
    }
    virtual ::grpc::Status clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncclear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncclear_custom_recognizerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncclear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncclear_custom_recognizerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>> register_custom_action(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>>(register_custom_actionRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>> Asyncregister_custom_action(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>>(Asyncregister_custom_actionRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>> PrepareAsyncregister_custom_action(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>>(PrepareAsyncregister_custom_actionRaw(context, cq));
    }
    virtual ::grpc::Status unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncunregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncunregister_custom_actionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncunregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncunregister_custom_actionRaw(context, request, cq));
    }
    virtual ::grpc::Status clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncclear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncclear_custom_actionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncclear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncclear_custom_actionRaw(context, request, cq));
    }
    virtual ::grpc::Status bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncbind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncbind_resourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncbind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncbind_resourceRaw(context, request, cq));
    }
    virtual ::grpc::Status bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncbind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncbind_controllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncbind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncbind_controllerRaw(context, request, cq));
    }
    virtual ::grpc::Status inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>> Asyncinited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>>(AsyncinitedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>> PrepareAsyncinited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>>(PrepareAsyncinitedRaw(context, request, cq));
    }
    virtual ::grpc::Status post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::maarpc::IIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IIdResponse>> Asyncpost_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IIdResponse>>(Asyncpost_taskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IIdResponse>> PrepareAsyncpost_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IIdResponse>>(PrepareAsyncpost_taskRaw(context, request, cq));
    }
    virtual ::grpc::Status set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncset_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncset_task_paramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncset_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncset_task_paramRaw(context, request, cq));
    }
    virtual ::grpc::Status status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>> Asyncstatus(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>>(AsyncstatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>> PrepareAsyncstatus(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>>(PrepareAsyncstatusRaw(context, request, cq));
    }
    virtual ::grpc::Status wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>> Asyncwait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>>(AsyncwaitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>> PrepareAsyncwait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>>(PrepareAsyncwaitRaw(context, request, cq));
    }
    virtual ::grpc::Status all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>> Asyncall_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>>(Asyncall_finishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>> PrepareAsyncall_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>>(PrepareAsyncall_finishedRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncstop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::HandleRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>> Asyncresource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>>(AsyncresourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>> PrepareAsyncresource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>>(PrepareAsyncresourceRaw(context, request, cq));
    }
    virtual ::grpc::Status controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::HandleRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>> Asynccontroller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>>(AsynccontrollerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>> PrepareAsynccontroller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>>(PrepareAsynccontrollerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void register_custom_recognizer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomRecognizerRequest,::maarpc::CustomRecognizerResponse>* reactor) = 0;
      virtual void unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void register_custom_action(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomActionRequest,::maarpc::CustomActionResponse>* reactor) = 0;
      virtual void unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* register_custom_recognizerRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* Asyncregister_custom_recognizerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* PrepareAsyncregister_custom_recognizerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncunregister_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncunregister_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncclear_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncclear_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* register_custom_actionRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* Asyncregister_custom_actionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* PrepareAsyncregister_custom_actionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncunregister_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncunregister_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncclear_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncclear_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncbind_resourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncbind_resourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncbind_controllerRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncbind_controllerRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>* AsyncinitedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>* PrepareAsyncinitedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IIdResponse>* Asyncpost_taskRaw(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IIdResponse>* PrepareAsyncpost_taskRaw(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncset_task_paramRaw(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncset_task_paramRaw(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>* AsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>* PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>* AsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StatusResponse>* PrepareAsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>* Asyncall_finishedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::BoolResponse>* PrepareAsyncall_finishedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>* AsyncresourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>* PrepareAsyncresourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>* AsynccontrollerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::HandleRequest>* PrepareAsynccontrollerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status create(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::HandleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>> Asynccreate(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>> PrepareAsynccreate(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncdestroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(AsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncdestroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncdestroyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>> register_custom_recognizer(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>>(register_custom_recognizerRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>> Asyncregister_custom_recognizer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>>(Asyncregister_custom_recognizerRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>> PrepareAsyncregister_custom_recognizer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>>(PrepareAsyncregister_custom_recognizerRaw(context, cq));
    }
    ::grpc::Status unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncunregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncunregister_custom_recognizerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncunregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncunregister_custom_recognizerRaw(context, request, cq));
    }
    ::grpc::Status clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncclear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncclear_custom_recognizerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncclear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncclear_custom_recognizerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>> register_custom_action(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>>(register_custom_actionRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>> Asyncregister_custom_action(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>>(Asyncregister_custom_actionRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>> PrepareAsyncregister_custom_action(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>>(PrepareAsyncregister_custom_actionRaw(context, cq));
    }
    ::grpc::Status unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncunregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncunregister_custom_actionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncunregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncunregister_custom_actionRaw(context, request, cq));
    }
    ::grpc::Status clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncclear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncclear_custom_actionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncclear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncclear_custom_actionRaw(context, request, cq));
    }
    ::grpc::Status bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncbind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncbind_resourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncbind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncbind_resourceRaw(context, request, cq));
    }
    ::grpc::Status bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncbind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncbind_controllerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncbind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncbind_controllerRaw(context, request, cq));
    }
    ::grpc::Status inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>> Asyncinited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>>(AsyncinitedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>> PrepareAsyncinited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>>(PrepareAsyncinitedRaw(context, request, cq));
    }
    ::grpc::Status post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::maarpc::IIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>> Asyncpost_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>>(Asyncpost_taskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>> PrepareAsyncpost_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>>(PrepareAsyncpost_taskRaw(context, request, cq));
    }
    ::grpc::Status set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncset_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncset_task_paramRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncset_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncset_task_paramRaw(context, request, cq));
    }
    ::grpc::Status status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>> Asyncstatus(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>>(AsyncstatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>> PrepareAsyncstatus(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>>(PrepareAsyncstatusRaw(context, request, cq));
    }
    ::grpc::Status wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>> Asyncwait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>>(AsyncwaitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>> PrepareAsyncwait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>>(PrepareAsyncwaitRaw(context, request, cq));
    }
    ::grpc::Status all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>> Asyncall_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>>(Asyncall_finishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>> PrepareAsyncall_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>>(PrepareAsyncall_finishedRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncstop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::HandleRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>> Asyncresource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>>(AsyncresourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>> PrepareAsyncresource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>>(PrepareAsyncresourceRaw(context, request, cq));
    }
    ::grpc::Status controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::HandleRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>> Asynccontroller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>>(AsynccontrollerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>> PrepareAsynccontroller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>>(PrepareAsynccontrollerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void register_custom_recognizer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomRecognizerRequest,::maarpc::CustomRecognizerResponse>* reactor) override;
      void unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void register_custom_action(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomActionRequest,::maarpc::CustomActionResponse>* reactor) override;
      void unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)>) override;
      void post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, std::function<void(::grpc::Status)>) override;
      void resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
      void controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, std::function<void(::grpc::Status)>) override;
      void controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* AsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* AsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* register_custom_recognizerRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* Asyncregister_custom_recognizerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* PrepareAsyncregister_custom_recognizerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncunregister_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncunregister_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncclear_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncclear_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* register_custom_actionRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* Asyncregister_custom_actionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* PrepareAsyncregister_custom_actionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncunregister_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncunregister_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncclear_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncclear_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncbind_resourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncbind_resourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncbind_controllerRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncbind_controllerRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* AsyncinitedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* PrepareAsyncinitedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Asyncpost_taskRaw(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* PrepareAsyncpost_taskRaw(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncset_task_paramRaw(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncset_task_paramRaw(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* AsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* AsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* PrepareAsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Asyncall_finishedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* PrepareAsyncall_finishedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* AsyncresourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* PrepareAsyncresourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* AsynccontrollerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* PrepareAsynccontrollerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_destroy_;
    const ::grpc::internal::RpcMethod rpcmethod_register_custom_recognizer_;
    const ::grpc::internal::RpcMethod rpcmethod_unregister_custom_recognizer_;
    const ::grpc::internal::RpcMethod rpcmethod_clear_custom_recognizer_;
    const ::grpc::internal::RpcMethod rpcmethod_register_custom_action_;
    const ::grpc::internal::RpcMethod rpcmethod_unregister_custom_action_;
    const ::grpc::internal::RpcMethod rpcmethod_clear_custom_action_;
    const ::grpc::internal::RpcMethod rpcmethod_bind_resource_;
    const ::grpc::internal::RpcMethod rpcmethod_bind_controller_;
    const ::grpc::internal::RpcMethod rpcmethod_inited_;
    const ::grpc::internal::RpcMethod rpcmethod_post_task_;
    const ::grpc::internal::RpcMethod rpcmethod_set_task_param_;
    const ::grpc::internal::RpcMethod rpcmethod_status_;
    const ::grpc::internal::RpcMethod rpcmethod_wait_;
    const ::grpc::internal::RpcMethod rpcmethod_all_finished_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_resource_;
    const ::grpc::internal::RpcMethod rpcmethod_controller_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response);
    virtual ::grpc::Status destroy(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status register_custom_recognizer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* stream);
    virtual ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status register_custom_action(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* stream);
    virtual ::grpc::Status unregister_custom_action(::grpc::ServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status clear_custom_action(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status bind_resource(::grpc::ServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status bind_controller(::grpc::ServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status inited(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response);
    virtual ::grpc::Status post_task(::grpc::ServerContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response);
    virtual ::grpc::Status set_task_param(::grpc::ServerContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status status(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response);
    virtual ::grpc::Status wait(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response);
    virtual ::grpc::Status all_finished(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status resource(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response);
    virtual ::grpc::Status controller(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::maarpc::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::HandleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_destroy() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_register_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_register_custom_recognizer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_register_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_recognizer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_custom_recognizer(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregister_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregister_custom_recognizer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_unregister_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunregister_custom_recognizer(::grpc::ServerContext* context, ::maarpc::HandleStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clear_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clear_custom_recognizer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_clear_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear_custom_recognizer(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_register_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_register_custom_action() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_register_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_action(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_custom_action(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregister_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregister_custom_action() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_unregister_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunregister_custom_action(::grpc::ServerContext* context, ::maarpc::HandleStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_clear_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_clear_custom_action() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_clear_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear_custom_action(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_bind_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_bind_resource() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_bind_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbind_resource(::grpc::ServerContext* context, ::maarpc::HandleHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_bind_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_bind_controller() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_bind_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbind_controller(::grpc::ServerContext* context, ::maarpc::HandleHandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_inited : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_inited() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_inited() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inited(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinited(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_post_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_post_task() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_post_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status post_task(::grpc::ServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpost_task(::grpc::ServerContext* context, ::maarpc::InstancePostTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::IIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_set_task_param : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_set_task_param() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_set_task_param() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_task_param(::grpc::ServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_task_param(::grpc::ServerContext* context, ::maarpc::InstanceSetTaskParamRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_status() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststatus(::grpc::ServerContext* context, ::maarpc::HandleIIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_wait() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wait(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwait(::grpc::ServerContext* context, ::maarpc::HandleIIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_all_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_all_finished() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_all_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_finished(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestall_finished(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_resource() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresource(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::HandleRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_controller() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcontroller(::grpc::ServerContext* context, ::maarpc::HandleRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::HandleRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_create<WithAsyncMethod_destroy<WithAsyncMethod_register_custom_recognizer<WithAsyncMethod_unregister_custom_recognizer<WithAsyncMethod_clear_custom_recognizer<WithAsyncMethod_register_custom_action<WithAsyncMethod_unregister_custom_action<WithAsyncMethod_clear_custom_action<WithAsyncMethod_bind_resource<WithAsyncMethod_bind_controller<WithAsyncMethod_inited<WithAsyncMethod_post_task<WithAsyncMethod_set_task_param<WithAsyncMethod_status<WithAsyncMethod_wait<WithAsyncMethod_all_finished<WithAsyncMethod_stop<WithAsyncMethod_resource<WithAsyncMethod_controller<Service > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::IdRequest, ::maarpc::HandleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response) { return this->create(context, request, response); }));}
    void SetMessageAllocatorFor_create(
        ::grpc::MessageAllocator< ::maarpc::IdRequest, ::maarpc::HandleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::IdRequest, ::maarpc::HandleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) { return this->destroy(context, request, response); }));}
    void SetMessageAllocatorFor_destroy(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_register_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_register_custom_recognizer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->register_custom_recognizer(context); }));
    }
    ~WithCallbackMethod_register_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_recognizer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* register_custom_recognizer(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregister_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregister_custom_recognizer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response) { return this->unregister_custom_recognizer(context, request, response); }));}
    void SetMessageAllocatorFor_unregister_custom_recognizer(
        ::grpc::MessageAllocator< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregister_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregister_custom_recognizer(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clear_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clear_custom_recognizer() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) { return this->clear_custom_recognizer(context, request, response); }));}
    void SetMessageAllocatorFor_clear_custom_recognizer(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clear_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear_custom_recognizer(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_register_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_register_custom_action() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->register_custom_action(context); }));
    }
    ~WithCallbackMethod_register_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_action(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* register_custom_action(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregister_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregister_custom_action() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response) { return this->unregister_custom_action(context, request, response); }));}
    void SetMessageAllocatorFor_unregister_custom_action(
        ::grpc::MessageAllocator< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregister_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregister_custom_action(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_clear_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_clear_custom_action() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) { return this->clear_custom_action(context, request, response); }));}
    void SetMessageAllocatorFor_clear_custom_action(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_clear_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear_custom_action(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_bind_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_bind_resource() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response) { return this->bind_resource(context, request, response); }));}
    void SetMessageAllocatorFor_bind_resource(
        ::grpc::MessageAllocator< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_bind_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bind_resource(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_bind_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_bind_controller() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response) { return this->bind_controller(context, request, response); }));}
    void SetMessageAllocatorFor_bind_controller(
        ::grpc::MessageAllocator< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_bind_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bind_controller(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_inited : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_inited() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::BoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response) { return this->inited(context, request, response); }));}
    void SetMessageAllocatorFor_inited(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::BoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::BoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_inited() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inited(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* inited(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_post_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_post_task() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response) { return this->post_task(context, request, response); }));}
    void SetMessageAllocatorFor_post_task(
        ::grpc::MessageAllocator< ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_post_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status post_task(::grpc::ServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* post_task(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_set_task_param : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_set_task_param() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response) { return this->set_task_param(context, request, response); }));}
    void SetMessageAllocatorFor_set_task_param(
        ::grpc::MessageAllocator< ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_set_task_param() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_task_param(::grpc::ServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_task_param(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_status() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) { return this->status(context, request, response); }));}
    void SetMessageAllocatorFor_status(
        ::grpc::MessageAllocator< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* status(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_wait() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) { return this->wait(context, request, response); }));}
    void SetMessageAllocatorFor_wait(
        ::grpc::MessageAllocator< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wait(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wait(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_all_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_all_finished() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::BoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response) { return this->all_finished(context, request, response); }));}
    void SetMessageAllocatorFor_all_finished(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::BoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::BoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_all_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_finished(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* all_finished(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stop() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_resource() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::HandleRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response) { return this->resource(context, request, response); }));}
    void SetMessageAllocatorFor_resource(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::HandleRequest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::HandleRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resource(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_controller() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::HandleRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response) { return this->controller(context, request, response); }));}
    void SetMessageAllocatorFor_controller(
        ::grpc::MessageAllocator< ::maarpc::HandleRequest, ::maarpc::HandleRequest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::HandleRequest, ::maarpc::HandleRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* controller(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_create<WithCallbackMethod_destroy<WithCallbackMethod_register_custom_recognizer<WithCallbackMethod_unregister_custom_recognizer<WithCallbackMethod_clear_custom_recognizer<WithCallbackMethod_register_custom_action<WithCallbackMethod_unregister_custom_action<WithCallbackMethod_clear_custom_action<WithCallbackMethod_bind_resource<WithCallbackMethod_bind_controller<WithCallbackMethod_inited<WithCallbackMethod_post_task<WithCallbackMethod_set_task_param<WithCallbackMethod_status<WithCallbackMethod_wait<WithCallbackMethod_all_finished<WithCallbackMethod_stop<WithCallbackMethod_resource<WithCallbackMethod_controller<Service > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_destroy() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_register_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_register_custom_recognizer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_register_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_recognizer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregister_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregister_custom_recognizer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_unregister_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clear_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clear_custom_recognizer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_clear_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_register_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_register_custom_action() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_register_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_action(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregister_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregister_custom_action() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_unregister_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_clear_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_clear_custom_action() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_clear_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_bind_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_bind_resource() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_bind_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_bind_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_bind_controller() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_bind_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_inited : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_inited() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_inited() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inited(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_post_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_post_task() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_post_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status post_task(::grpc::ServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_set_task_param : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_set_task_param() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_set_task_param() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_task_param(::grpc::ServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_status() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_wait() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wait(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_all_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_all_finished() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_all_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_finished(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_resource() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_controller() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_destroy() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdestroy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_register_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_register_custom_recognizer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_register_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_recognizer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_custom_recognizer(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregister_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregister_custom_recognizer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_unregister_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunregister_custom_recognizer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clear_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clear_custom_recognizer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_clear_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear_custom_recognizer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_register_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_register_custom_action() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_register_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_action(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_custom_action(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregister_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregister_custom_action() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_unregister_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunregister_custom_action(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_clear_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_clear_custom_action() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_clear_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestclear_custom_action(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_bind_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_bind_resource() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_bind_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbind_resource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_bind_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_bind_controller() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_bind_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbind_controller(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_inited : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_inited() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_inited() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inited(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinited(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_post_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_post_task() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_post_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status post_task(::grpc::ServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpost_task(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_set_task_param : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_set_task_param() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_set_task_param() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_task_param(::grpc::ServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_task_param(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_status() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_wait() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wait(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwait(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_all_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_all_finished() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_all_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_finished(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestall_finished(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_resource() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestresource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_controller() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcontroller(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create(context, request, response); }));
    }
    ~WithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_destroy() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->destroy(context, request, response); }));
    }
    ~WithRawCallbackMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* destroy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_register_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_register_custom_recognizer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->register_custom_recognizer(context); }));
    }
    ~WithRawCallbackMethod_register_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_recognizer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* register_custom_recognizer(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregister_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregister_custom_recognizer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregister_custom_recognizer(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregister_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregister_custom_recognizer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clear_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clear_custom_recognizer() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clear_custom_recognizer(context, request, response); }));
    }
    ~WithRawCallbackMethod_clear_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear_custom_recognizer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_register_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_register_custom_action() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->register_custom_action(context); }));
    }
    ~WithRawCallbackMethod_register_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_custom_action(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* register_custom_action(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregister_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregister_custom_action() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregister_custom_action(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregister_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregister_custom_action(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_clear_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_clear_custom_action() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->clear_custom_action(context, request, response); }));
    }
    ~WithRawCallbackMethod_clear_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status clear_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* clear_custom_action(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_bind_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_bind_resource() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->bind_resource(context, request, response); }));
    }
    ~WithRawCallbackMethod_bind_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bind_resource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_bind_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_bind_controller() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->bind_controller(context, request, response); }));
    }
    ~WithRawCallbackMethod_bind_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bind_controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bind_controller(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_inited : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_inited() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->inited(context, request, response); }));
    }
    ~WithRawCallbackMethod_inited() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status inited(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* inited(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_post_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_post_task() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->post_task(context, request, response); }));
    }
    ~WithRawCallbackMethod_post_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status post_task(::grpc::ServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* post_task(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_set_task_param : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_set_task_param() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->set_task_param(context, request, response); }));
    }
    ~WithRawCallbackMethod_set_task_param() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_task_param(::grpc::ServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_task_param(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_status() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->status(context, request, response); }));
    }
    ~WithRawCallbackMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_wait() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->wait(context, request, response); }));
    }
    ~WithRawCallbackMethod_wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status wait(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* wait(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_all_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_all_finished() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->all_finished(context, request, response); }));
    }
    ~WithRawCallbackMethod_all_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_finished(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* all_finished(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stop() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_resource() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->resource(context, request, response); }));
    }
    ~WithRawCallbackMethod_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* resource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_controller() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->controller(context, request, response); }));
    }
    ~WithRawCallbackMethod_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* controller(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::IdRequest, ::maarpc::HandleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::IdRequest, ::maarpc::HandleResponse>* streamer) {
                       return this->Streamedcreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::HandleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::IdRequest,::maarpc::HandleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_destroy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_destroy() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streameddestroy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_destroy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status destroy(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddestroy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregister_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregister_custom_recognizer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedunregister_custom_recognizer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregister_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregister_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunregister_custom_recognizer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleStringRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clear_custom_recognizer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clear_custom_recognizer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedclear_custom_recognizer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clear_custom_recognizer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clear_custom_recognizer(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclear_custom_recognizer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregister_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregister_custom_action() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedunregister_custom_action(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregister_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregister_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleStringRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunregister_custom_action(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleStringRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_clear_custom_action : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_clear_custom_action() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedclear_custom_action(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_clear_custom_action() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status clear_custom_action(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedclear_custom_action(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_bind_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_bind_resource() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedbind_resource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_bind_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status bind_resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedbind_resource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleHandleRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_bind_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_bind_controller() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedbind_controller(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_bind_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status bind_controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleHandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedbind_controller(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleHandleRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_inited : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_inited() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::BoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::BoolResponse>* streamer) {
                       return this->Streamedinited(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_inited() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status inited(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinited(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_post_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_post_task() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse>* streamer) {
                       return this->Streamedpost_task(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_post_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status post_task(::grpc::ServerContext* /*context*/, const ::maarpc::InstancePostTaskRequest* /*request*/, ::maarpc::IIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpost_task(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::InstancePostTaskRequest,::maarpc::IIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_set_task_param : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_set_task_param() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedset_task_param(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_set_task_param() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status set_task_param(::grpc::ServerContext* /*context*/, const ::maarpc::InstanceSetTaskParamRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedset_task_param(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::InstanceSetTaskParamRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_status() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>* streamer) {
                       return this->Streamedstatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status status(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleIIdRequest,::maarpc::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_wait : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_wait() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse>* streamer) {
                       return this->Streamedwait(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_wait() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status wait(::grpc::ServerContext* /*context*/, const ::maarpc::HandleIIdRequest* /*request*/, ::maarpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwait(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleIIdRequest,::maarpc::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_all_finished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_all_finished() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::BoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::BoolResponse>* streamer) {
                       return this->Streamedall_finished(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_all_finished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status all_finished(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::BoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedall_finished(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_resource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_resource() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::HandleRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::HandleRequest>* streamer) {
                       return this->Streamedresource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_resource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status resource(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedresource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::HandleRequest>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_controller : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_controller() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::HandleRequest, ::maarpc::HandleRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::HandleRequest, ::maarpc::HandleRequest>* streamer) {
                       return this->Streamedcontroller(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_controller() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status controller(::grpc::ServerContext* /*context*/, const ::maarpc::HandleRequest* /*request*/, ::maarpc::HandleRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcontroller(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::HandleRequest,::maarpc::HandleRequest>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_unregister_custom_recognizer<WithStreamedUnaryMethod_clear_custom_recognizer<WithStreamedUnaryMethod_unregister_custom_action<WithStreamedUnaryMethod_clear_custom_action<WithStreamedUnaryMethod_bind_resource<WithStreamedUnaryMethod_bind_controller<WithStreamedUnaryMethod_inited<WithStreamedUnaryMethod_post_task<WithStreamedUnaryMethod_set_task_param<WithStreamedUnaryMethod_status<WithStreamedUnaryMethod_wait<WithStreamedUnaryMethod_all_finished<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_resource<WithStreamedUnaryMethod_controller<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_destroy<WithStreamedUnaryMethod_unregister_custom_recognizer<WithStreamedUnaryMethod_clear_custom_recognizer<WithStreamedUnaryMethod_unregister_custom_action<WithStreamedUnaryMethod_clear_custom_action<WithStreamedUnaryMethod_bind_resource<WithStreamedUnaryMethod_bind_controller<WithStreamedUnaryMethod_inited<WithStreamedUnaryMethod_post_task<WithStreamedUnaryMethod_set_task_param<WithStreamedUnaryMethod_status<WithStreamedUnaryMethod_wait<WithStreamedUnaryMethod_all_finished<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_resource<WithStreamedUnaryMethod_controller<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace maarpc


#endif  // GRPC_instance_2eproto__INCLUDED
