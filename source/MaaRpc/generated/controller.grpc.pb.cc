// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: controller.proto

#include "controller.pb.h"
#include "controller.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace maarpc {

static const char* Controller_method_names[] = {
  "/maarpc.Controller/create_adb",
  "/maarpc.Controller/destroy",
  "/maarpc.Controller/create_custom",
  "/maarpc.Controller/set_option",
  "/maarpc.Controller/post_connection",
  "/maarpc.Controller/post_click",
  "/maarpc.Controller/post_swipe",
  "/maarpc.Controller/post_press_key",
  "/maarpc.Controller/post_touch_down",
  "/maarpc.Controller/post_touch_move",
  "/maarpc.Controller/post_touch_up",
  "/maarpc.Controller/post_screencap",
  "/maarpc.Controller/status",
  "/maarpc.Controller/wait",
  "/maarpc.Controller/connected",
  "/maarpc.Controller/image",
  "/maarpc.Controller/uuid",
};

std::unique_ptr< Controller::Stub> Controller::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Controller::Stub> stub(new Controller::Stub(channel, options));
  return stub;
}

Controller::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_adb_(Controller_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(Controller_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create_custom_(Controller_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_set_option_(Controller_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_connection_(Controller_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_click_(Controller_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_swipe_(Controller_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_press_key_(Controller_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_touch_down_(Controller_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_touch_move_(Controller_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_touch_up_(Controller_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_screencap_(Controller_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_status_(Controller_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wait_(Controller_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_connected_(Controller_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_image_(Controller_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_uuid_(Controller_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Controller::Stub::create_adb(::grpc::ClientContext* context, const ::maarpc::AdbControllerRequest& request, ::maarpc::HandleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::AdbControllerRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_adb_, context, request, response);
}

void Controller::Stub::async::create_adb(::grpc::ClientContext* context, const ::maarpc::AdbControllerRequest* request, ::maarpc::HandleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::AdbControllerRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_adb_, context, request, response, std::move(f));
}

void Controller::Stub::async::create_adb(::grpc::ClientContext* context, const ::maarpc::AdbControllerRequest* request, ::maarpc::HandleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_adb_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* Controller::Stub::PrepareAsynccreate_adbRaw(::grpc::ClientContext* context, const ::maarpc::AdbControllerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::HandleResponse, ::maarpc::AdbControllerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_adb_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* Controller::Stub::Asynccreate_adbRaw(::grpc::ClientContext* context, const ::maarpc::AdbControllerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate_adbRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void Controller::Stub::async::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void Controller::Stub::async::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Controller::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Controller::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>* Controller::Stub::create_customRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>::Create(channel_.get(), rpcmethod_create_custom_, context);
}

void Controller::Stub::async::create_custom(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomControllerRequest,::maarpc::CustomControllerResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::maarpc::CustomControllerRequest,::maarpc::CustomControllerResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_create_custom_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>* Controller::Stub::Asynccreate_customRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>::Create(channel_.get(), cq, rpcmethod_create_custom_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>* Controller::Stub::PrepareAsynccreate_customRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>::Create(channel_.get(), cq, rpcmethod_create_custom_, context, false, nullptr);
}

::grpc::Status Controller::Stub::set_option(::grpc::ClientContext* context, const ::maarpc::ControllerSetOptionRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerSetOptionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_option_, context, request, response);
}

void Controller::Stub::async::set_option(::grpc::ClientContext* context, const ::maarpc::ControllerSetOptionRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerSetOptionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_option_, context, request, response, std::move(f));
}

void Controller::Stub::async::set_option(::grpc::ClientContext* context, const ::maarpc::ControllerSetOptionRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_option_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Controller::Stub::PrepareAsyncset_optionRaw(::grpc::ClientContext* context, const ::maarpc::ControllerSetOptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::ControllerSetOptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_option_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Controller::Stub::Asyncset_optionRaw(::grpc::ClientContext* context, const ::maarpc::ControllerSetOptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_optionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_connection(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_connection_, context, request, response);
}

void Controller::Stub::async::post_connection(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_connection_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_connection(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_connection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_connectionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_connection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_connectionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_connectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_click(::grpc::ClientContext* context, const ::maarpc::ControllerPostClickRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerPostClickRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_click_, context, request, response);
}

void Controller::Stub::async::post_click(::grpc::ClientContext* context, const ::maarpc::ControllerPostClickRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerPostClickRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_click_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_click(::grpc::ClientContext* context, const ::maarpc::ControllerPostClickRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_click_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_clickRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostClickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::ControllerPostClickRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_click_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_clickRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostClickRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_clickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_swipe(::grpc::ClientContext* context, const ::maarpc::ControllerPostSwipeRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerPostSwipeRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_swipe_, context, request, response);
}

void Controller::Stub::async::post_swipe(::grpc::ClientContext* context, const ::maarpc::ControllerPostSwipeRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerPostSwipeRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_swipe_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_swipe(::grpc::ClientContext* context, const ::maarpc::ControllerPostSwipeRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_swipe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_swipeRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostSwipeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::ControllerPostSwipeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_swipe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_swipeRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostSwipeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_swipeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_press_key(::grpc::ClientContext* context, const ::maarpc::ControllerPostKeyRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerPostKeyRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_press_key_, context, request, response);
}

void Controller::Stub::async::post_press_key(::grpc::ClientContext* context, const ::maarpc::ControllerPostKeyRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerPostKeyRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_press_key_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_press_key(::grpc::ClientContext* context, const ::maarpc::ControllerPostKeyRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_press_key_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_press_keyRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::ControllerPostKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_press_key_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_press_keyRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_press_keyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_touch_down(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_touch_down_, context, request, response);
}

void Controller::Stub::async::post_touch_down(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_touch_down_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_touch_down(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_touch_down_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_touch_downRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::ControllerPostTouchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_touch_down_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_touch_downRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_touch_downRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_touch_move(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_touch_move_, context, request, response);
}

void Controller::Stub::async::post_touch_move(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_touch_move_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_touch_move(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_touch_move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_touch_moveRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::ControllerPostTouchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_touch_move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_touch_moveRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_touch_moveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_touch_up(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_touch_up_, context, request, response);
}

void Controller::Stub::async::post_touch_up(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_touch_up_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_touch_up(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_touch_up_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_touch_upRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::ControllerPostTouchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_touch_up_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_touch_upRaw(::grpc::ClientContext* context, const ::maarpc::ControllerPostTouchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_touch_upRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::post_screencap(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_screencap_, context, request, response);
}

void Controller::Stub::async::post_screencap(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_screencap_, context, request, response, std::move(f));
}

void Controller::Stub::async::post_screencap(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_screencap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::PrepareAsyncpost_screencapRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_screencap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Controller::Stub::Asyncpost_screencapRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_screencapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_status_, context, request, response);
}

void Controller::Stub::async::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, std::move(f));
}

void Controller::Stub::async::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Controller::Stub::PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StatusResponse, ::maarpc::HandleIIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Controller::Stub::AsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wait_, context, request, response);
}

void Controller::Stub::async::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_, context, request, response, std::move(f));
}

void Controller::Stub::async::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Controller::Stub::PrepareAsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StatusResponse, ::maarpc::HandleIIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wait_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Controller::Stub::AsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwaitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::connected(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_connected_, context, request, response);
}

void Controller::Stub::async::connected(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connected_, context, request, response, std::move(f));
}

void Controller::Stub::async::connected(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Controller::Stub::PrepareAsyncconnectedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::BoolResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_connected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Controller::Stub::AsyncconnectedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconnectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::image(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_image_, context, request, response);
}

void Controller::Stub::async::image(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_image_, context, request, response, std::move(f));
}

void Controller::Stub::async::image(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_image_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Controller::Stub::PrepareAsyncimageRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_image_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Controller::Stub::AsyncimageRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Controller::Stub::uuid(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_uuid_, context, request, response);
}

void Controller::Stub::async::uuid(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_uuid_, context, request, response, std::move(f));
}

void Controller::Stub::async::uuid(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_uuid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* Controller::Stub::PrepareAsyncuuidRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StringResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_uuid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* Controller::Stub::AsyncuuidRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncuuidRaw(context, request, cq);
  result->StartCall();
  return result;
}

Controller::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::AdbControllerRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::AdbControllerRequest* req,
             ::maarpc::HandleResponse* resp) {
               return service->create_adb(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Controller::Service, ::maarpc::CustomControllerRequest, ::maarpc::CustomControllerResponse>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::maarpc::CustomControllerResponse,
             ::maarpc::CustomControllerRequest>* stream) {
               return service->create_custom(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerSetOptionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerSetOptionRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->set_option(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_connection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerPostClickRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerPostClickRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_click(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerPostSwipeRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerPostSwipeRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_swipe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerPostKeyRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerPostKeyRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_press_key(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerPostTouchRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_touch_down(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerPostTouchRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_touch_move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::ControllerPostTouchRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::ControllerPostTouchRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_touch_up(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_screencap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleIIdRequest* req,
             ::maarpc::StatusResponse* resp) {
               return service->status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleIIdRequest* req,
             ::maarpc::StatusResponse* resp) {
               return service->wait(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::BoolResponse* resp) {
               return service->connected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleHandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->image(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::maarpc::HandleRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Controller::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::StringResponse* resp) {
               return service->uuid(ctx, req, resp);
             }, this)));
}

Controller::Service::~Service() {
}

::grpc::Status Controller::Service::create_adb(::grpc::ServerContext* context, const ::maarpc::AdbControllerRequest* request, ::maarpc::HandleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::destroy(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::create_custom(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::maarpc::CustomControllerResponse, ::maarpc::CustomControllerRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::set_option(::grpc::ServerContext* context, const ::maarpc::ControllerSetOptionRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_connection(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_click(::grpc::ServerContext* context, const ::maarpc::ControllerPostClickRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_swipe(::grpc::ServerContext* context, const ::maarpc::ControllerPostSwipeRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_press_key(::grpc::ServerContext* context, const ::maarpc::ControllerPostKeyRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_touch_down(::grpc::ServerContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_touch_move(::grpc::ServerContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_touch_up(::grpc::ServerContext* context, const ::maarpc::ControllerPostTouchRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::post_screencap(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::status(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::wait(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::connected(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::image(::grpc::ServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::uuid(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace maarpc

