// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: resource.proto

#include "resource.pb.h"
#include "resource.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace maarpc {

static const char* Resource_method_names[] = {
  "/maarpc.Resource/create",
  "/maarpc.Resource/destroy",
  "/maarpc.Resource/post_path",
  "/maarpc.Resource/status",
  "/maarpc.Resource/wait",
  "/maarpc.Resource/loaded",
  "/maarpc.Resource/hash",
};

std::unique_ptr< Resource::Stub> Resource::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Resource::Stub> stub(new Resource::Stub(channel, options));
  return stub;
}

Resource::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(Resource_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(Resource_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_path_(Resource_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_status_(Resource_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wait_(Resource_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loaded_(Resource_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_hash_(Resource_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Resource::Stub::create(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::HandleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::IdRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void Resource::Stub::async::create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::IdRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void Resource::Stub::async::create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* Resource::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::HandleResponse, ::maarpc::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* Resource::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Resource::Stub::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void Resource::Stub::async::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void Resource::Stub::async::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Resource::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Resource::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Resource::Stub::post_path(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_path_, context, request, response);
}

void Resource::Stub::async::post_path(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_path_, context, request, response, std::move(f));
}

void Resource::Stub::async::post_path(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_path_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Resource::Stub::PrepareAsyncpost_pathRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::HandleStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_path_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Resource::Stub::Asyncpost_pathRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_pathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Resource::Stub::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_status_, context, request, response);
}

void Resource::Stub::async::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, std::move(f));
}

void Resource::Stub::async::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Resource::Stub::PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StatusResponse, ::maarpc::HandleIIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Resource::Stub::AsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Resource::Stub::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wait_, context, request, response);
}

void Resource::Stub::async::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_, context, request, response, std::move(f));
}

void Resource::Stub::async::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Resource::Stub::PrepareAsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StatusResponse, ::maarpc::HandleIIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wait_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Resource::Stub::AsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwaitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Resource::Stub::loaded(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loaded_, context, request, response);
}

void Resource::Stub::async::loaded(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loaded_, context, request, response, std::move(f));
}

void Resource::Stub::async::loaded(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loaded_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Resource::Stub::PrepareAsyncloadedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::BoolResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loaded_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Resource::Stub::AsyncloadedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Resource::Stub::hash(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_hash_, context, request, response);
}

void Resource::Stub::async::hash(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hash_, context, request, response, std::move(f));
}

void Resource::Stub::async::hash(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_hash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* Resource::Stub::PrepareAsynchashRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StringResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_hash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* Resource::Stub::AsynchashRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynchashRaw(context, request, cq);
  result->StartCall();
  return result;
}

Resource::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::IdRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::IdRequest* req,
             ::maarpc::HandleResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::HandleStringRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleStringRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_path(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleIIdRequest* req,
             ::maarpc::StatusResponse* resp) {
               return service->status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleIIdRequest* req,
             ::maarpc::StatusResponse* resp) {
               return service->wait(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::BoolResponse* resp) {
               return service->loaded(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Resource_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Resource::Service, ::maarpc::HandleRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Resource::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::StringResponse* resp) {
               return service->hash(ctx, req, resp);
             }, this)));
}

Resource::Service::~Service() {
}

::grpc::Status Resource::Service::create(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Resource::Service::destroy(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Resource::Service::post_path(::grpc::ServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Resource::Service::status(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Resource::Service::wait(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Resource::Service::loaded(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Resource::Service::hash(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace maarpc

