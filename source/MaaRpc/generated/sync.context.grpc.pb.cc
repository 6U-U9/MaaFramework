// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sync.context.proto

#include "sync.context.pb.h"
#include "sync.context.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace maarpc {

static const char* SyncContext_method_names[] = {
  "/maarpc.SyncContext/run_task",
  "/maarpc.SyncContext/run_recognizer",
  "/maarpc.SyncContext/run_action",
  "/maarpc.SyncContext/click",
  "/maarpc.SyncContext/swipe",
  "/maarpc.SyncContext/key",
  "/maarpc.SyncContext/touch_down",
  "/maarpc.SyncContext/touch_move",
  "/maarpc.SyncContext/touch_up",
  "/maarpc.SyncContext/screencap",
  "/maarpc.SyncContext/task_result",
};

std::unique_ptr< SyncContext::Stub> SyncContext::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SyncContext::Stub> stub(new SyncContext::Stub(channel, options));
  return stub;
}

SyncContext::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_run_task_(SyncContext_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_run_recognizer_(SyncContext_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_run_action_(SyncContext_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_click_(SyncContext_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_swipe_(SyncContext_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_key_(SyncContext_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_touch_down_(SyncContext_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_touch_move_(SyncContext_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_touch_up_(SyncContext_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_screencap_(SyncContext_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_task_result_(SyncContext_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SyncContext::Stub::run_task(::grpc::ClientContext* context, const ::maarpc::SyncContextRunTaskRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextRunTaskRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_run_task_, context, request, response);
}

void SyncContext::Stub::async::run_task(::grpc::ClientContext* context, const ::maarpc::SyncContextRunTaskRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextRunTaskRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_task_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::run_task(::grpc::ClientContext* context, const ::maarpc::SyncContextRunTaskRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_task_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* SyncContext::Stub::PrepareAsyncrun_taskRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextRunTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::SyncContextRunTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_run_task_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* SyncContext::Stub::Asyncrun_taskRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextRunTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrun_taskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::run_recognizer(::grpc::ClientContext* context, const ::maarpc::SyncContextRunRecognizerRequest& request, ::maarpc::SyncContextRunRecognizerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextRunRecognizerRequest, ::maarpc::SyncContextRunRecognizerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_run_recognizer_, context, request, response);
}

void SyncContext::Stub::async::run_recognizer(::grpc::ClientContext* context, const ::maarpc::SyncContextRunRecognizerRequest* request, ::maarpc::SyncContextRunRecognizerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextRunRecognizerRequest, ::maarpc::SyncContextRunRecognizerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_recognizer_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::run_recognizer(::grpc::ClientContext* context, const ::maarpc::SyncContextRunRecognizerRequest* request, ::maarpc::SyncContextRunRecognizerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_recognizer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::SyncContextRunRecognizerResponse>* SyncContext::Stub::PrepareAsyncrun_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextRunRecognizerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::SyncContextRunRecognizerResponse, ::maarpc::SyncContextRunRecognizerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_run_recognizer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::SyncContextRunRecognizerResponse>* SyncContext::Stub::Asyncrun_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextRunRecognizerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrun_recognizerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::run_action(::grpc::ClientContext* context, const ::maarpc::SyncContextRunActionRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextRunActionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_run_action_, context, request, response);
}

void SyncContext::Stub::async::run_action(::grpc::ClientContext* context, const ::maarpc::SyncContextRunActionRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextRunActionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_action_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::run_action(::grpc::ClientContext* context, const ::maarpc::SyncContextRunActionRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_action_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* SyncContext::Stub::PrepareAsyncrun_actionRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextRunActionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::SyncContextRunActionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_run_action_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* SyncContext::Stub::Asyncrun_actionRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextRunActionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrun_actionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::click(::grpc::ClientContext* context, const ::maarpc::SyncContextClickRequest& request, ::maarpc::EmptyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextClickRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_click_, context, request, response);
}

void SyncContext::Stub::async::click(::grpc::ClientContext* context, const ::maarpc::SyncContextClickRequest* request, ::maarpc::EmptyRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextClickRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_click_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::click(::grpc::ClientContext* context, const ::maarpc::SyncContextClickRequest* request, ::maarpc::EmptyRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_click_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::PrepareAsyncclickRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextClickRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyRequest, ::maarpc::SyncContextClickRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_click_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::AsyncclickRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextClickRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::swipe(::grpc::ClientContext* context, const ::maarpc::SyncContextSwipeRequest& request, ::maarpc::EmptyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextSwipeRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_swipe_, context, request, response);
}

void SyncContext::Stub::async::swipe(::grpc::ClientContext* context, const ::maarpc::SyncContextSwipeRequest* request, ::maarpc::EmptyRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextSwipeRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_swipe_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::swipe(::grpc::ClientContext* context, const ::maarpc::SyncContextSwipeRequest* request, ::maarpc::EmptyRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_swipe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::PrepareAsyncswipeRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextSwipeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyRequest, ::maarpc::SyncContextSwipeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_swipe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::AsyncswipeRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextSwipeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncswipeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::key(::grpc::ClientContext* context, const ::maarpc::SyncContextKeyRequest& request, ::maarpc::EmptyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextKeyRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_key_, context, request, response);
}

void SyncContext::Stub::async::key(::grpc::ClientContext* context, const ::maarpc::SyncContextKeyRequest* request, ::maarpc::EmptyRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextKeyRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_key_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::key(::grpc::ClientContext* context, const ::maarpc::SyncContextKeyRequest* request, ::maarpc::EmptyRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_key_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::PrepareAsynckeyRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyRequest, ::maarpc::SyncContextKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_key_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::AsynckeyRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynckeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::touch_down(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::maarpc::EmptyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_touch_down_, context, request, response);
}

void SyncContext::Stub::async::touch_down(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_touch_down_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::touch_down(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_touch_down_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::PrepareAsynctouch_downRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyRequest, ::maarpc::SyncContextTouchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_touch_down_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::Asynctouch_downRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctouch_downRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::touch_move(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::maarpc::EmptyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_touch_move_, context, request, response);
}

void SyncContext::Stub::async::touch_move(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_touch_move_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::touch_move(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_touch_move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::PrepareAsynctouch_moveRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyRequest, ::maarpc::SyncContextTouchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_touch_move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::Asynctouch_moveRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctouch_moveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::touch_up(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::maarpc::EmptyRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_touch_up_, context, request, response);
}

void SyncContext::Stub::async::touch_up(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_touch_up_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::touch_up(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_touch_up_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::PrepareAsynctouch_upRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyRequest, ::maarpc::SyncContextTouchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_touch_up_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyRequest>* SyncContext::Stub::Asynctouch_upRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextTouchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctouch_upRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::screencap(::grpc::ClientContext* context, const ::maarpc::SyncContextScreencapRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SyncContextScreencapRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_screencap_, context, request, response);
}

void SyncContext::Stub::async::screencap(::grpc::ClientContext* context, const ::maarpc::SyncContextScreencapRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SyncContextScreencapRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_screencap_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::screencap(::grpc::ClientContext* context, const ::maarpc::SyncContextScreencapRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_screencap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* SyncContext::Stub::PrepareAsyncscreencapRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextScreencapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::SyncContextScreencapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_screencap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* SyncContext::Stub::AsyncscreencapRaw(::grpc::ClientContext* context, const ::maarpc::SyncContextScreencapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncscreencapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SyncContext::Stub::task_result(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_task_result_, context, request, response);
}

void SyncContext::Stub::async::task_result(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_task_result_, context, request, response, std::move(f));
}

void SyncContext::Stub::async::task_result(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_task_result_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* SyncContext::Stub::PrepareAsynctask_resultRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StringResponse, ::maarpc::HandleStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_task_result_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* SyncContext::Stub::Asynctask_resultRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctask_resultRaw(context, request, cq);
  result->StartCall();
  return result;
}

SyncContext::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextRunTaskRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextRunTaskRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->run_task(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextRunRecognizerRequest, ::maarpc::SyncContextRunRecognizerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextRunRecognizerRequest* req,
             ::maarpc::SyncContextRunRecognizerResponse* resp) {
               return service->run_recognizer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextRunActionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextRunActionRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->run_action(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextClickRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextClickRequest* req,
             ::maarpc::EmptyRequest* resp) {
               return service->click(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextSwipeRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextSwipeRequest* req,
             ::maarpc::EmptyRequest* resp) {
               return service->swipe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextKeyRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextKeyRequest* req,
             ::maarpc::EmptyRequest* resp) {
               return service->key(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextTouchRequest* req,
             ::maarpc::EmptyRequest* resp) {
               return service->touch_down(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextTouchRequest* req,
             ::maarpc::EmptyRequest* resp) {
               return service->touch_move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextTouchRequest, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextTouchRequest* req,
             ::maarpc::EmptyRequest* resp) {
               return service->touch_up(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::SyncContextScreencapRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SyncContextScreencapRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->screencap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SyncContext_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SyncContext::Service, ::maarpc::HandleStringRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SyncContext::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleStringRequest* req,
             ::maarpc::StringResponse* resp) {
               return service->task_result(ctx, req, resp);
             }, this)));
}

SyncContext::Service::~Service() {
}

::grpc::Status SyncContext::Service::run_task(::grpc::ServerContext* context, const ::maarpc::SyncContextRunTaskRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::run_recognizer(::grpc::ServerContext* context, const ::maarpc::SyncContextRunRecognizerRequest* request, ::maarpc::SyncContextRunRecognizerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::run_action(::grpc::ServerContext* context, const ::maarpc::SyncContextRunActionRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::click(::grpc::ServerContext* context, const ::maarpc::SyncContextClickRequest* request, ::maarpc::EmptyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::swipe(::grpc::ServerContext* context, const ::maarpc::SyncContextSwipeRequest* request, ::maarpc::EmptyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::key(::grpc::ServerContext* context, const ::maarpc::SyncContextKeyRequest* request, ::maarpc::EmptyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::touch_down(::grpc::ServerContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::touch_move(::grpc::ServerContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::touch_up(::grpc::ServerContext* context, const ::maarpc::SyncContextTouchRequest* request, ::maarpc::EmptyRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::screencap(::grpc::ServerContext* context, const ::maarpc::SyncContextScreencapRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SyncContext::Service::task_result(::grpc::ServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace maarpc

