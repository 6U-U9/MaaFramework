// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom.recognizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_custom_2erecognizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_custom_2erecognizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_custom_2erecognizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_custom_2erecognizer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custom_2erecognizer_2eproto;
namespace maarpc {
class CustomRecognizerAnalyzeParam;
struct CustomRecognizerAnalyzeParamDefaultTypeInternal;
extern CustomRecognizerAnalyzeParamDefaultTypeInternal _CustomRecognizerAnalyzeParam_default_instance_;
class CustomRecognizerAnalyzeResult;
struct CustomRecognizerAnalyzeResultDefaultTypeInternal;
extern CustomRecognizerAnalyzeResultDefaultTypeInternal _CustomRecognizerAnalyzeResult_default_instance_;
class CustomRecognizerInit;
struct CustomRecognizerInitDefaultTypeInternal;
extern CustomRecognizerInitDefaultTypeInternal _CustomRecognizerInit_default_instance_;
class CustomRecognizerRequest;
struct CustomRecognizerRequestDefaultTypeInternal;
extern CustomRecognizerRequestDefaultTypeInternal _CustomRecognizerRequest_default_instance_;
class CustomRecognizerResponse;
struct CustomRecognizerResponseDefaultTypeInternal;
extern CustomRecognizerResponseDefaultTypeInternal _CustomRecognizerResponse_default_instance_;
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> ::maarpc::CustomRecognizerAnalyzeParam* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerAnalyzeParam>(Arena*);
template<> ::maarpc::CustomRecognizerAnalyzeResult* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerAnalyzeResult>(Arena*);
template<> ::maarpc::CustomRecognizerInit* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerInit>(Arena*);
template<> ::maarpc::CustomRecognizerRequest* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerRequest>(Arena*);
template<> ::maarpc::CustomRecognizerResponse* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace maarpc {

// ===================================================================

class CustomRecognizerInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerInit) */ {
 public:
  inline CustomRecognizerInit() : CustomRecognizerInit(nullptr) {}
  ~CustomRecognizerInit() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerInit(const CustomRecognizerInit& from);
  CustomRecognizerInit(CustomRecognizerInit&& from) noexcept
    : CustomRecognizerInit() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerInit& operator=(const CustomRecognizerInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerInit& operator=(CustomRecognizerInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomRecognizerInit* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerInit*>(
               &_CustomRecognizerInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomRecognizerInit& a, CustomRecognizerInit& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerInit& from) {
    CustomRecognizerInit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerInit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerInit";
  }
  protected:
  explicit CustomRecognizerInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2erecognizer_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerAnalyzeResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerAnalyzeResult) */ {
 public:
  inline CustomRecognizerAnalyzeResult() : CustomRecognizerAnalyzeResult(nullptr) {}
  ~CustomRecognizerAnalyzeResult() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerAnalyzeResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerAnalyzeResult(const CustomRecognizerAnalyzeResult& from);
  CustomRecognizerAnalyzeResult(CustomRecognizerAnalyzeResult&& from) noexcept
    : CustomRecognizerAnalyzeResult() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerAnalyzeResult& operator=(const CustomRecognizerAnalyzeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerAnalyzeResult& operator=(CustomRecognizerAnalyzeResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerAnalyzeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomRecognizerAnalyzeResult* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerAnalyzeResult*>(
               &_CustomRecognizerAnalyzeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomRecognizerAnalyzeResult& a, CustomRecognizerAnalyzeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerAnalyzeResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerAnalyzeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerAnalyzeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerAnalyzeResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerAnalyzeResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerAnalyzeResult& from) {
    CustomRecognizerAnalyzeResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerAnalyzeResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerAnalyzeResult";
  }
  protected:
  explicit CustomRecognizerAnalyzeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 3,
    kBoxFieldNumber = 2,
    kMatchFieldNumber = 1,
  };
  // optional string detail = 3;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // optional .maarpc.Rect box = 2;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::maarpc::Rect& box() const;
  PROTOBUF_NODISCARD ::maarpc::Rect* release_box();
  ::maarpc::Rect* mutable_box();
  void set_allocated_box(::maarpc::Rect* box);
  private:
  const ::maarpc::Rect& _internal_box() const;
  ::maarpc::Rect* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::maarpc::Rect* box);
  ::maarpc::Rect* unsafe_arena_release_box();

  // optional bool match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  bool match() const;
  void set_match(bool value);
  private:
  bool _internal_match() const;
  void _internal_set_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerAnalyzeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::maarpc::Rect* box_;
    bool match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2erecognizer_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerRequest) */ {
 public:
  inline CustomRecognizerRequest() : CustomRecognizerRequest(nullptr) {}
  ~CustomRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerRequest(const CustomRecognizerRequest& from);
  CustomRecognizerRequest(CustomRecognizerRequest&& from) noexcept
    : CustomRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerRequest& operator=(const CustomRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerRequest& operator=(CustomRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kInit = 101,
    kAnalyze = 201,
    RESULT_NOT_SET = 0,
  };

  static inline const CustomRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerRequest*>(
               &_CustomRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CustomRecognizerRequest& a, CustomRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerRequest& from) {
    CustomRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerRequest";
  }
  protected:
  explicit CustomRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kInitFieldNumber = 101,
    kAnalyzeFieldNumber = 201,
  };
  // optional bool ok = 1;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // .maarpc.CustomRecognizerInit init = 101;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::maarpc::CustomRecognizerInit& init() const;
  PROTOBUF_NODISCARD ::maarpc::CustomRecognizerInit* release_init();
  ::maarpc::CustomRecognizerInit* mutable_init();
  void set_allocated_init(::maarpc::CustomRecognizerInit* init);
  private:
  const ::maarpc::CustomRecognizerInit& _internal_init() const;
  ::maarpc::CustomRecognizerInit* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::maarpc::CustomRecognizerInit* init);
  ::maarpc::CustomRecognizerInit* unsafe_arena_release_init();

  // .maarpc.CustomRecognizerAnalyzeResult analyze = 201;
  bool has_analyze() const;
  private:
  bool _internal_has_analyze() const;
  public:
  void clear_analyze();
  const ::maarpc::CustomRecognizerAnalyzeResult& analyze() const;
  PROTOBUF_NODISCARD ::maarpc::CustomRecognizerAnalyzeResult* release_analyze();
  ::maarpc::CustomRecognizerAnalyzeResult* mutable_analyze();
  void set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeResult* analyze);
  private:
  const ::maarpc::CustomRecognizerAnalyzeResult& _internal_analyze() const;
  ::maarpc::CustomRecognizerAnalyzeResult* _internal_mutable_analyze();
  public:
  void unsafe_arena_set_allocated_analyze(
      ::maarpc::CustomRecognizerAnalyzeResult* analyze);
  ::maarpc::CustomRecognizerAnalyzeResult* unsafe_arena_release_analyze();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerRequest)
 private:
  class _Internal;
  void set_has_init();
  void set_has_analyze();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool ok_;
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomRecognizerInit* init_;
      ::maarpc::CustomRecognizerAnalyzeResult* analyze_;
    } result_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2erecognizer_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerAnalyzeParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerAnalyzeParam) */ {
 public:
  inline CustomRecognizerAnalyzeParam() : CustomRecognizerAnalyzeParam(nullptr) {}
  ~CustomRecognizerAnalyzeParam() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerAnalyzeParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerAnalyzeParam(const CustomRecognizerAnalyzeParam& from);
  CustomRecognizerAnalyzeParam(CustomRecognizerAnalyzeParam&& from) noexcept
    : CustomRecognizerAnalyzeParam() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerAnalyzeParam& operator=(const CustomRecognizerAnalyzeParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerAnalyzeParam& operator=(CustomRecognizerAnalyzeParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerAnalyzeParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomRecognizerAnalyzeParam* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerAnalyzeParam*>(
               &_CustomRecognizerAnalyzeParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomRecognizerAnalyzeParam& a, CustomRecognizerAnalyzeParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerAnalyzeParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerAnalyzeParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerAnalyzeParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerAnalyzeParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerAnalyzeParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerAnalyzeParam& from) {
    CustomRecognizerAnalyzeParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerAnalyzeParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerAnalyzeParam";
  }
  protected:
  explicit CustomRecognizerAnalyzeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 1,
    kImageHandleFieldNumber = 2,
    kTaskFieldNumber = 3,
    kParamFieldNumber = 4,
  };
  // optional string context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional string image_handle = 2;
  bool has_image_handle() const;
  private:
  bool _internal_has_image_handle() const;
  public:
  void clear_image_handle();
  const std::string& image_handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_handle();
  PROTOBUF_NODISCARD std::string* release_image_handle();
  void set_allocated_image_handle(std::string* image_handle);
  private:
  const std::string& _internal_image_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_handle(const std::string& value);
  std::string* _internal_mutable_image_handle();
  public:

  // optional string task = 3;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerAnalyzeParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2erecognizer_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerResponse) */ {
 public:
  inline CustomRecognizerResponse() : CustomRecognizerResponse(nullptr) {}
  ~CustomRecognizerResponse() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerResponse(const CustomRecognizerResponse& from);
  CustomRecognizerResponse(CustomRecognizerResponse&& from) noexcept
    : CustomRecognizerResponse() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerResponse& operator=(const CustomRecognizerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerResponse& operator=(CustomRecognizerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerResponse& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kAnalyze = 101,
    COMMAND_NOT_SET = 0,
  };

  static inline const CustomRecognizerResponse* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerResponse*>(
               &_CustomRecognizerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CustomRecognizerResponse& a, CustomRecognizerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerResponse& from) {
    CustomRecognizerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerResponse";
  }
  protected:
  explicit CustomRecognizerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalyzeFieldNumber = 101,
  };
  // .maarpc.CustomRecognizerAnalyzeParam analyze = 101;
  bool has_analyze() const;
  private:
  bool _internal_has_analyze() const;
  public:
  void clear_analyze();
  const ::maarpc::CustomRecognizerAnalyzeParam& analyze() const;
  PROTOBUF_NODISCARD ::maarpc::CustomRecognizerAnalyzeParam* release_analyze();
  ::maarpc::CustomRecognizerAnalyzeParam* mutable_analyze();
  void set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeParam* analyze);
  private:
  const ::maarpc::CustomRecognizerAnalyzeParam& _internal_analyze() const;
  ::maarpc::CustomRecognizerAnalyzeParam* _internal_mutable_analyze();
  public:
  void unsafe_arena_set_allocated_analyze(
      ::maarpc::CustomRecognizerAnalyzeParam* analyze);
  ::maarpc::CustomRecognizerAnalyzeParam* unsafe_arena_release_analyze();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerResponse)
 private:
  class _Internal;
  void set_has_analyze();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomRecognizerAnalyzeParam* analyze_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2erecognizer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomRecognizerInit

// optional string handle = 1;
inline bool CustomRecognizerInit::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerInit::has_handle() const {
  return _internal_has_handle();
}
inline void CustomRecognizerInit::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRecognizerInit::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerInit.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerInit::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerInit.handle)
}
inline std::string* CustomRecognizerInit::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerInit.handle)
  return _s;
}
inline const std::string& CustomRecognizerInit::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void CustomRecognizerInit::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerInit::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerInit::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerInit.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerInit::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerInit.handle)
}

// optional string name = 2;
inline bool CustomRecognizerInit::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomRecognizerInit::has_name() const {
  return _internal_has_name();
}
inline void CustomRecognizerInit::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomRecognizerInit::name() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerInit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerInit::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerInit.name)
}
inline std::string* CustomRecognizerInit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerInit.name)
  return _s;
}
inline const std::string& CustomRecognizerInit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CustomRecognizerInit::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerInit::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerInit::release_name() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerInit.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerInit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerInit.name)
}

// -------------------------------------------------------------------

// CustomRecognizerAnalyzeResult

// optional bool match = 1;
inline bool CustomRecognizerAnalyzeResult::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeResult::has_match() const {
  return _internal_has_match();
}
inline void CustomRecognizerAnalyzeResult::clear_match() {
  _impl_.match_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CustomRecognizerAnalyzeResult::_internal_match() const {
  return _impl_.match_;
}
inline bool CustomRecognizerAnalyzeResult::match() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeResult.match)
  return _internal_match();
}
inline void CustomRecognizerAnalyzeResult::_internal_set_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_ = value;
}
inline void CustomRecognizerAnalyzeResult::set_match(bool value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeResult.match)
}

// optional .maarpc.Rect box = 2;
inline bool CustomRecognizerAnalyzeResult::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box_ != nullptr);
  return value;
}
inline bool CustomRecognizerAnalyzeResult::has_box() const {
  return _internal_has_box();
}
inline const ::maarpc::Rect& CustomRecognizerAnalyzeResult::_internal_box() const {
  const ::maarpc::Rect* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Rect&>(
      ::maarpc::_Rect_default_instance_);
}
inline const ::maarpc::Rect& CustomRecognizerAnalyzeResult::box() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeResult.box)
  return _internal_box();
}
inline void CustomRecognizerAnalyzeResult::unsafe_arena_set_allocated_box(
    ::maarpc::Rect* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerAnalyzeResult.box)
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::release_box() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeResult.box)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Rect>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::mutable_box() {
  ::maarpc::Rect* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeResult.box)
  return _msg;
}
inline void CustomRecognizerAnalyzeResult::set_allocated_box(::maarpc::Rect* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box));
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeResult.box)
}

// optional string detail = 3;
inline bool CustomRecognizerAnalyzeResult::_internal_has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeResult::has_detail() const {
  return _internal_has_detail();
}
inline void CustomRecognizerAnalyzeResult::clear_detail() {
  _impl_.detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRecognizerAnalyzeResult::detail() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeResult.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeResult::set_detail(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeResult.detail)
}
inline std::string* CustomRecognizerAnalyzeResult::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeResult.detail)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeResult::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void CustomRecognizerAnalyzeResult::_internal_set_detail(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeResult::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeResult::release_detail() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeResult.detail)
  if (!_internal_has_detail()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.detail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeResult::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeResult.detail)
}

// -------------------------------------------------------------------

// CustomRecognizerRequest

// optional bool ok = 1;
inline bool CustomRecognizerRequest::_internal_has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerRequest::has_ok() const {
  return _internal_has_ok();
}
inline void CustomRecognizerRequest::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CustomRecognizerRequest::_internal_ok() const {
  return _impl_.ok_;
}
inline bool CustomRecognizerRequest::ok() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerRequest.ok)
  return _internal_ok();
}
inline void CustomRecognizerRequest::_internal_set_ok(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ok_ = value;
}
inline void CustomRecognizerRequest::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerRequest.ok)
}

// .maarpc.CustomRecognizerInit init = 101;
inline bool CustomRecognizerRequest::_internal_has_init() const {
  return result_case() == kInit;
}
inline bool CustomRecognizerRequest::has_init() const {
  return _internal_has_init();
}
inline void CustomRecognizerRequest::set_has_init() {
  _impl_._oneof_case_[0] = kInit;
}
inline void CustomRecognizerRequest::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.init_;
    }
    clear_has_result();
  }
}
inline ::maarpc::CustomRecognizerInit* CustomRecognizerRequest::release_init() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerRequest.init)
  if (_internal_has_init()) {
    clear_has_result();
    ::maarpc::CustomRecognizerInit* temp = _impl_.result_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomRecognizerInit& CustomRecognizerRequest::_internal_init() const {
  return _internal_has_init()
      ? *_impl_.result_.init_
      : reinterpret_cast< ::maarpc::CustomRecognizerInit&>(::maarpc::_CustomRecognizerInit_default_instance_);
}
inline const ::maarpc::CustomRecognizerInit& CustomRecognizerRequest::init() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerRequest.init)
  return _internal_init();
}
inline ::maarpc::CustomRecognizerInit* CustomRecognizerRequest::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomRecognizerRequest.init)
  if (_internal_has_init()) {
    clear_has_result();
    ::maarpc::CustomRecognizerInit* temp = _impl_.result_.init_;
    _impl_.result_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomRecognizerRequest::unsafe_arena_set_allocated_init(::maarpc::CustomRecognizerInit* init) {
  clear_result();
  if (init) {
    set_has_init();
    _impl_.result_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerRequest.init)
}
inline ::maarpc::CustomRecognizerInit* CustomRecognizerRequest::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_result();
    set_has_init();
    _impl_.result_.init_ = CreateMaybeMessage< ::maarpc::CustomRecognizerInit >(GetArenaForAllocation());
  }
  return _impl_.result_.init_;
}
inline ::maarpc::CustomRecognizerInit* CustomRecognizerRequest::mutable_init() {
  ::maarpc::CustomRecognizerInit* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerRequest.init)
  return _msg;
}

// .maarpc.CustomRecognizerAnalyzeResult analyze = 201;
inline bool CustomRecognizerRequest::_internal_has_analyze() const {
  return result_case() == kAnalyze;
}
inline bool CustomRecognizerRequest::has_analyze() const {
  return _internal_has_analyze();
}
inline void CustomRecognizerRequest::set_has_analyze() {
  _impl_._oneof_case_[0] = kAnalyze;
}
inline void CustomRecognizerRequest::clear_analyze() {
  if (_internal_has_analyze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.analyze_;
    }
    clear_has_result();
  }
}
inline ::maarpc::CustomRecognizerAnalyzeResult* CustomRecognizerRequest::release_analyze() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerRequest.analyze)
  if (_internal_has_analyze()) {
    clear_has_result();
    ::maarpc::CustomRecognizerAnalyzeResult* temp = _impl_.result_.analyze_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomRecognizerAnalyzeResult& CustomRecognizerRequest::_internal_analyze() const {
  return _internal_has_analyze()
      ? *_impl_.result_.analyze_
      : reinterpret_cast< ::maarpc::CustomRecognizerAnalyzeResult&>(::maarpc::_CustomRecognizerAnalyzeResult_default_instance_);
}
inline const ::maarpc::CustomRecognizerAnalyzeResult& CustomRecognizerRequest::analyze() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerRequest.analyze)
  return _internal_analyze();
}
inline ::maarpc::CustomRecognizerAnalyzeResult* CustomRecognizerRequest::unsafe_arena_release_analyze() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomRecognizerRequest.analyze)
  if (_internal_has_analyze()) {
    clear_has_result();
    ::maarpc::CustomRecognizerAnalyzeResult* temp = _impl_.result_.analyze_;
    _impl_.result_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomRecognizerRequest::unsafe_arena_set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeResult* analyze) {
  clear_result();
  if (analyze) {
    set_has_analyze();
    _impl_.result_.analyze_ = analyze;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerRequest.analyze)
}
inline ::maarpc::CustomRecognizerAnalyzeResult* CustomRecognizerRequest::_internal_mutable_analyze() {
  if (!_internal_has_analyze()) {
    clear_result();
    set_has_analyze();
    _impl_.result_.analyze_ = CreateMaybeMessage< ::maarpc::CustomRecognizerAnalyzeResult >(GetArenaForAllocation());
  }
  return _impl_.result_.analyze_;
}
inline ::maarpc::CustomRecognizerAnalyzeResult* CustomRecognizerRequest::mutable_analyze() {
  ::maarpc::CustomRecognizerAnalyzeResult* _msg = _internal_mutable_analyze();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerRequest.analyze)
  return _msg;
}

inline bool CustomRecognizerRequest::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void CustomRecognizerRequest::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline CustomRecognizerRequest::ResultCase CustomRecognizerRequest::result_case() const {
  return CustomRecognizerRequest::ResultCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomRecognizerAnalyzeParam

// optional string context = 1;
inline bool CustomRecognizerAnalyzeParam::_internal_has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_context() const {
  return _internal_has_context();
}
inline void CustomRecognizerAnalyzeParam::clear_context() {
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRecognizerAnalyzeParam::context() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeParam::set_context(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeParam.context)
}
inline std::string* CustomRecognizerAnalyzeParam::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.context)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeParam::_internal_context() const {
  return _impl_.context_.Get();
}
inline void CustomRecognizerAnalyzeParam::_internal_set_context(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::_internal_mutable_context() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.context_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::release_context() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.context_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.context)
}

// optional string image_handle = 2;
inline bool CustomRecognizerAnalyzeParam::_internal_has_image_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_image_handle() const {
  return _internal_has_image_handle();
}
inline void CustomRecognizerAnalyzeParam::clear_image_handle() {
  _impl_.image_handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomRecognizerAnalyzeParam::image_handle() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.image_handle)
  return _internal_image_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeParam::set_image_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.image_handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeParam.image_handle)
}
inline std::string* CustomRecognizerAnalyzeParam::mutable_image_handle() {
  std::string* _s = _internal_mutable_image_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.image_handle)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeParam::_internal_image_handle() const {
  return _impl_.image_handle_.Get();
}
inline void CustomRecognizerAnalyzeParam::_internal_set_image_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.image_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::_internal_mutable_image_handle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.image_handle_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::release_image_handle() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.image_handle)
  if (!_internal_has_image_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.image_handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_handle_.IsDefault()) {
    _impl_.image_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_image_handle(std::string* image_handle) {
  if (image_handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_handle_.SetAllocated(image_handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_handle_.IsDefault()) {
    _impl_.image_handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.image_handle)
}

// optional string task = 3;
inline bool CustomRecognizerAnalyzeParam::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_task() const {
  return _internal_has_task();
}
inline void CustomRecognizerAnalyzeParam::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CustomRecognizerAnalyzeParam::task() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeParam::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeParam.task)
}
inline std::string* CustomRecognizerAnalyzeParam::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.task)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeParam::_internal_task() const {
  return _impl_.task_.Get();
}
inline void CustomRecognizerAnalyzeParam::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.task)
}

// optional string param = 4;
inline bool CustomRecognizerAnalyzeParam::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_param() const {
  return _internal_has_param();
}
inline void CustomRecognizerAnalyzeParam::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CustomRecognizerAnalyzeParam::param() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeParam::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeParam.param)
}
inline std::string* CustomRecognizerAnalyzeParam::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.param)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeParam::_internal_param() const {
  return _impl_.param_.Get();
}
inline void CustomRecognizerAnalyzeParam::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.param)
}

// -------------------------------------------------------------------

// CustomRecognizerResponse

// .maarpc.CustomRecognizerAnalyzeParam analyze = 101;
inline bool CustomRecognizerResponse::_internal_has_analyze() const {
  return command_case() == kAnalyze;
}
inline bool CustomRecognizerResponse::has_analyze() const {
  return _internal_has_analyze();
}
inline void CustomRecognizerResponse::set_has_analyze() {
  _impl_._oneof_case_[0] = kAnalyze;
}
inline void CustomRecognizerResponse::clear_analyze() {
  if (_internal_has_analyze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.analyze_;
    }
    clear_has_command();
  }
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::release_analyze() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerResponse.analyze)
  if (_internal_has_analyze()) {
    clear_has_command();
    ::maarpc::CustomRecognizerAnalyzeParam* temp = _impl_.command_.analyze_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomRecognizerAnalyzeParam& CustomRecognizerResponse::_internal_analyze() const {
  return _internal_has_analyze()
      ? *_impl_.command_.analyze_
      : reinterpret_cast< ::maarpc::CustomRecognizerAnalyzeParam&>(::maarpc::_CustomRecognizerAnalyzeParam_default_instance_);
}
inline const ::maarpc::CustomRecognizerAnalyzeParam& CustomRecognizerResponse::analyze() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerResponse.analyze)
  return _internal_analyze();
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::unsafe_arena_release_analyze() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomRecognizerResponse.analyze)
  if (_internal_has_analyze()) {
    clear_has_command();
    ::maarpc::CustomRecognizerAnalyzeParam* temp = _impl_.command_.analyze_;
    _impl_.command_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomRecognizerResponse::unsafe_arena_set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeParam* analyze) {
  clear_command();
  if (analyze) {
    set_has_analyze();
    _impl_.command_.analyze_ = analyze;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerResponse.analyze)
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::_internal_mutable_analyze() {
  if (!_internal_has_analyze()) {
    clear_command();
    set_has_analyze();
    _impl_.command_.analyze_ = CreateMaybeMessage< ::maarpc::CustomRecognizerAnalyzeParam >(GetArenaForAllocation());
  }
  return _impl_.command_.analyze_;
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::mutable_analyze() {
  ::maarpc::CustomRecognizerAnalyzeParam* _msg = _internal_mutable_analyze();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerResponse.analyze)
  return _msg;
}

inline bool CustomRecognizerResponse::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CustomRecognizerResponse::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CustomRecognizerResponse::CommandCase CustomRecognizerResponse::command_case() const {
  return CustomRecognizerResponse::CommandCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace maarpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_custom_2erecognizer_2eproto
