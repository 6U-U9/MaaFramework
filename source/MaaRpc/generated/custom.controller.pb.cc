// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom.controller.proto

#include "custom.controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace maarpc {
PROTOBUF_CONSTEXPR CustomControllerSetOptionParam::CustomControllerSetOptionParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/0} {}
struct CustomControllerSetOptionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomControllerSetOptionParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomControllerSetOptionParamDefaultTypeInternal() {}
  union {
    CustomControllerSetOptionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomControllerSetOptionParamDefaultTypeInternal _CustomControllerSetOptionParam_default_instance_;
PROTOBUF_CONSTEXPR CustomControllerRequest::CustomControllerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CustomControllerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomControllerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomControllerRequestDefaultTypeInternal() {}
  union {
    CustomControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomControllerRequestDefaultTypeInternal _CustomControllerRequest_default_instance_;
PROTOBUF_CONSTEXPR CustomControllerResponse::CustomControllerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CustomControllerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomControllerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomControllerResponseDefaultTypeInternal() {}
  union {
    CustomControllerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomControllerResponseDefaultTypeInternal _CustomControllerResponse_default_instance_;
}  // namespace maarpc
static ::_pb::Metadata file_level_metadata_custom_2econtroller_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_custom_2econtroller_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_custom_2econtroller_2eproto = nullptr;

const uint32_t TableStruct_custom_2econtroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerSetOptionParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerSetOptionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerSetOptionParam, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerSetOptionParam, _impl_.value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerRequest, _impl_.ok_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerRequest, _impl_.result_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::maarpc::CustomControllerResponse, _impl_.command_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::maarpc::CustomControllerSetOptionParam)},
  { 10, 21, -1, sizeof(::maarpc::CustomControllerRequest)},
  { 25, -1, -1, sizeof(::maarpc::CustomControllerResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::maarpc::_CustomControllerSetOptionParam_default_instance_._instance,
  &::maarpc::_CustomControllerRequest_default_instance_._instance,
  &::maarpc::_CustomControllerResponse_default_instance_._instance,
};

const char descriptor_table_protodef_custom_2econtroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027custom.controller.proto\022\006maarpc\032\013types"
  ".proto\"X\n\036CustomControllerSetOptionParam"
  "\022\020\n\003key\030\001 \001(\005H\000\210\001\001\022\022\n\005value\030\002 \001(\tH\001\210\001\001B\006"
  "\n\004_keyB\010\n\006_value\"\201\001\n\027CustomControllerReq"
  "uest\022\017\n\002ok\030\001 \001(\010H\001\210\001\001\022\016\n\004init\030e \001(\010H\000\022#\n"
  "\nresolution\030\311\001 \001(\0132\014.maarpc.SizeH\000\022\017\n\004uu"
  "id\030\312\001 \001(\tH\000B\010\n\006resultB\005\n\003_ok\"\322\003\n\030CustomC"
  "ontrollerResponse\022\016\n\004init\030e \001(\tH\000\022\022\n\007con"
  "nect\030\311\001 \001(\010H\000\022$\n\005click\030\312\001 \001(\0132\022.maarpc.C"
  "lickParamH\000\022$\n\005swipe\030\313\001 \001(\0132\022.maarpc.Swi"
  "peParamH\000\022 \n\003key\030\314\001 \001(\0132\020.maarpc.KeyPara"
  "mH\000\022)\n\ntouch_down\030\315\001 \001(\0132\022.maarpc.TouchP"
  "aramH\000\022)\n\ntouch_move\030\316\001 \001(\0132\022.maarpc.Tou"
  "chParamH\000\022\'\n\010touch_up\030\317\001 \001(\0132\022.maarpc.To"
  "uchParamH\000\022\020\n\005start\030\320\001 \001(\tH\000\022\017\n\004stop\030\321\001 "
  "\001(\tH\000\022\025\n\nresolution\030\322\001 \001(\010H\000\022\020\n\005image\030\323\001"
  " \001(\tH\000\022\017\n\004uuid\030\324\001 \001(\010H\000\022=\n\nset_option\030\325\001"
  " \001(\0132&.maarpc.CustomControllerSetOptionP"
  "aramH\000B\t\n\007commandb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_custom_2econtroller_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_custom_2econtroller_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_custom_2econtroller_2eproto = {
    false, false, 745, descriptor_table_protodef_custom_2econtroller_2eproto,
    "custom.controller.proto",
    &descriptor_table_custom_2econtroller_2eproto_once, descriptor_table_custom_2econtroller_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_custom_2econtroller_2eproto::offsets,
    file_level_metadata_custom_2econtroller_2eproto, file_level_enum_descriptors_custom_2econtroller_2eproto,
    file_level_service_descriptors_custom_2econtroller_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_custom_2econtroller_2eproto_getter() {
  return &descriptor_table_custom_2econtroller_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_custom_2econtroller_2eproto(&descriptor_table_custom_2econtroller_2eproto);
namespace maarpc {

// ===================================================================

class CustomControllerSetOptionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomControllerSetOptionParam>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CustomControllerSetOptionParam::CustomControllerSetOptionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.CustomControllerSetOptionParam)
}
CustomControllerSetOptionParam::CustomControllerSetOptionParam(const CustomControllerSetOptionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomControllerSetOptionParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.key_ = from._impl_.key_;
  // @@protoc_insertion_point(copy_constructor:maarpc.CustomControllerSetOptionParam)
}

inline void CustomControllerSetOptionParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_){0}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CustomControllerSetOptionParam::~CustomControllerSetOptionParam() {
  // @@protoc_insertion_point(destructor:maarpc.CustomControllerSetOptionParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomControllerSetOptionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void CustomControllerSetOptionParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomControllerSetOptionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.CustomControllerSetOptionParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_.key_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomControllerSetOptionParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.CustomControllerSetOptionParam.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomControllerSetOptionParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.CustomControllerSetOptionParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 key = 1;
  if (_internal_has_key()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.CustomControllerSetOptionParam.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.CustomControllerSetOptionParam)
  return target;
}

size_t CustomControllerSetOptionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.CustomControllerSetOptionParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional int32 key = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomControllerSetOptionParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomControllerSetOptionParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomControllerSetOptionParam::GetClassData() const { return &_class_data_; }


void CustomControllerSetOptionParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomControllerSetOptionParam*>(&to_msg);
  auto& from = static_cast<const CustomControllerSetOptionParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.CustomControllerSetOptionParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomControllerSetOptionParam::CopyFrom(const CustomControllerSetOptionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.CustomControllerSetOptionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomControllerSetOptionParam::IsInitialized() const {
  return true;
}

void CustomControllerSetOptionParam::InternalSwap(CustomControllerSetOptionParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.key_, other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomControllerSetOptionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_2econtroller_2eproto_getter, &descriptor_table_custom_2econtroller_2eproto_once,
      file_level_metadata_custom_2econtroller_2eproto[0]);
}

// ===================================================================

class CustomControllerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomControllerRequest>()._impl_._has_bits_);
  static void set_has_ok(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::maarpc::Size& resolution(const CustomControllerRequest* msg);
};

const ::maarpc::Size&
CustomControllerRequest::_Internal::resolution(const CustomControllerRequest* msg) {
  return *msg->_impl_.result_.resolution_;
}
void CustomControllerRequest::set_allocated_resolution(::maarpc::Size* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolution));
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    set_has_resolution();
    _impl_.result_.resolution_ = resolution;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerRequest.resolution)
}
void CustomControllerRequest::clear_resolution() {
  if (_internal_has_resolution()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.resolution_;
    }
    clear_has_result();
  }
}
CustomControllerRequest::CustomControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.CustomControllerRequest)
}
CustomControllerRequest::CustomControllerRequest(const CustomControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomControllerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ok_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ok_ = from._impl_.ok_;
  clear_has_result();
  switch (from.result_case()) {
    case kInit: {
      _this->_internal_set_init(from._internal_init());
      break;
    }
    case kResolution: {
      _this->_internal_mutable_resolution()->::maarpc::Size::MergeFrom(
          from._internal_resolution());
      break;
    }
    case kUuid: {
      _this->_internal_set_uuid(from._internal_uuid());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.CustomControllerRequest)
}

inline void CustomControllerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ok_){false}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_result();
}

CustomControllerRequest::~CustomControllerRequest() {
  // @@protoc_insertion_point(destructor:maarpc.CustomControllerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_result()) {
    clear_result();
  }
}

void CustomControllerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomControllerRequest::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:maarpc.CustomControllerRequest)
  switch (result_case()) {
    case kInit: {
      // No need to clear
      break;
    }
    case kResolution: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.result_.resolution_;
      }
      break;
    }
    case kUuid: {
      _impl_.result_.uuid_.Destroy();
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}


void CustomControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.CustomControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ok_ = false;
  clear_result();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomControllerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ok(&has_bits);
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool init = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_init(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.Size resolution = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uuid = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.CustomControllerRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.CustomControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool ok = 1;
  if (_internal_has_ok()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // bool init = 101;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(101, this->_internal_init(), target);
  }

  // .maarpc.Size resolution = 201;
  if (_internal_has_resolution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(201, _Internal::resolution(this),
        _Internal::resolution(this).GetCachedSize(), target, stream);
  }

  // string uuid = 202;
  if (_internal_has_uuid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.CustomControllerRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        202, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.CustomControllerRequest)
  return target;
}

size_t CustomControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.CustomControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool ok = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  switch (result_case()) {
    // bool init = 101;
    case kInit: {
      total_size += 2 + 1;
      break;
    }
    // .maarpc.Size resolution = 201;
    case kResolution: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_.resolution_);
      break;
    }
    // string uuid = 202;
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomControllerRequest::GetClassData() const { return &_class_data_; }


void CustomControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomControllerRequest*>(&to_msg);
  auto& from = static_cast<const CustomControllerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.CustomControllerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ok()) {
    _this->_internal_set_ok(from._internal_ok());
  }
  switch (from.result_case()) {
    case kInit: {
      _this->_internal_set_init(from._internal_init());
      break;
    }
    case kResolution: {
      _this->_internal_mutable_resolution()->::maarpc::Size::MergeFrom(
          from._internal_resolution());
      break;
    }
    case kUuid: {
      _this->_internal_set_uuid(from._internal_uuid());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomControllerRequest::CopyFrom(const CustomControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.CustomControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomControllerRequest::IsInitialized() const {
  return true;
}

void CustomControllerRequest::InternalSwap(CustomControllerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ok_, other->_impl_.ok_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomControllerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_2econtroller_2eproto_getter, &descriptor_table_custom_2econtroller_2eproto_once,
      file_level_metadata_custom_2econtroller_2eproto[1]);
}

// ===================================================================

class CustomControllerResponse::_Internal {
 public:
  static const ::maarpc::ClickParam& click(const CustomControllerResponse* msg);
  static const ::maarpc::SwipeParam& swipe(const CustomControllerResponse* msg);
  static const ::maarpc::KeyParam& key(const CustomControllerResponse* msg);
  static const ::maarpc::TouchParam& touch_down(const CustomControllerResponse* msg);
  static const ::maarpc::TouchParam& touch_move(const CustomControllerResponse* msg);
  static const ::maarpc::TouchParam& touch_up(const CustomControllerResponse* msg);
  static const ::maarpc::CustomControllerSetOptionParam& set_option(const CustomControllerResponse* msg);
};

const ::maarpc::ClickParam&
CustomControllerResponse::_Internal::click(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.click_;
}
const ::maarpc::SwipeParam&
CustomControllerResponse::_Internal::swipe(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.swipe_;
}
const ::maarpc::KeyParam&
CustomControllerResponse::_Internal::key(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.key_;
}
const ::maarpc::TouchParam&
CustomControllerResponse::_Internal::touch_down(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.touch_down_;
}
const ::maarpc::TouchParam&
CustomControllerResponse::_Internal::touch_move(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.touch_move_;
}
const ::maarpc::TouchParam&
CustomControllerResponse::_Internal::touch_up(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.touch_up_;
}
const ::maarpc::CustomControllerSetOptionParam&
CustomControllerResponse::_Internal::set_option(const CustomControllerResponse* msg) {
  return *msg->_impl_.command_.set_option_;
}
void CustomControllerResponse::set_allocated_click(::maarpc::ClickParam* click) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (click) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(click));
    if (message_arena != submessage_arena) {
      click = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, click, submessage_arena);
    }
    set_has_click();
    _impl_.command_.click_ = click;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.click)
}
void CustomControllerResponse::clear_click() {
  if (_internal_has_click()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.click_;
    }
    clear_has_command();
  }
}
void CustomControllerResponse::set_allocated_swipe(::maarpc::SwipeParam* swipe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (swipe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swipe));
    if (message_arena != submessage_arena) {
      swipe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swipe, submessage_arena);
    }
    set_has_swipe();
    _impl_.command_.swipe_ = swipe;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.swipe)
}
void CustomControllerResponse::clear_swipe() {
  if (_internal_has_swipe()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.swipe_;
    }
    clear_has_command();
  }
}
void CustomControllerResponse::set_allocated_key(::maarpc::KeyParam* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    set_has_key();
    _impl_.command_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.key)
}
void CustomControllerResponse::clear_key() {
  if (_internal_has_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.key_;
    }
    clear_has_command();
  }
}
void CustomControllerResponse::set_allocated_touch_down(::maarpc::TouchParam* touch_down) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (touch_down) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_down));
    if (message_arena != submessage_arena) {
      touch_down = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_down, submessage_arena);
    }
    set_has_touch_down();
    _impl_.command_.touch_down_ = touch_down;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.touch_down)
}
void CustomControllerResponse::clear_touch_down() {
  if (_internal_has_touch_down()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.touch_down_;
    }
    clear_has_command();
  }
}
void CustomControllerResponse::set_allocated_touch_move(::maarpc::TouchParam* touch_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (touch_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_move));
    if (message_arena != submessage_arena) {
      touch_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_move, submessage_arena);
    }
    set_has_touch_move();
    _impl_.command_.touch_move_ = touch_move;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.touch_move)
}
void CustomControllerResponse::clear_touch_move() {
  if (_internal_has_touch_move()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.touch_move_;
    }
    clear_has_command();
  }
}
void CustomControllerResponse::set_allocated_touch_up(::maarpc::TouchParam* touch_up) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (touch_up) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_up));
    if (message_arena != submessage_arena) {
      touch_up = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_up, submessage_arena);
    }
    set_has_touch_up();
    _impl_.command_.touch_up_ = touch_up;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.touch_up)
}
void CustomControllerResponse::clear_touch_up() {
  if (_internal_has_touch_up()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.touch_up_;
    }
    clear_has_command();
  }
}
void CustomControllerResponse::set_allocated_set_option(::maarpc::CustomControllerSetOptionParam* set_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (set_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_option);
    if (message_arena != submessage_arena) {
      set_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    _impl_.command_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.set_option)
}
CustomControllerResponse::CustomControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.CustomControllerResponse)
}
CustomControllerResponse::CustomControllerResponse(const CustomControllerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CustomControllerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kInit: {
      _this->_internal_set_init(from._internal_init());
      break;
    }
    case kConnect: {
      _this->_internal_set_connect(from._internal_connect());
      break;
    }
    case kClick: {
      _this->_internal_mutable_click()->::maarpc::ClickParam::MergeFrom(
          from._internal_click());
      break;
    }
    case kSwipe: {
      _this->_internal_mutable_swipe()->::maarpc::SwipeParam::MergeFrom(
          from._internal_swipe());
      break;
    }
    case kKey: {
      _this->_internal_mutable_key()->::maarpc::KeyParam::MergeFrom(
          from._internal_key());
      break;
    }
    case kTouchDown: {
      _this->_internal_mutable_touch_down()->::maarpc::TouchParam::MergeFrom(
          from._internal_touch_down());
      break;
    }
    case kTouchMove: {
      _this->_internal_mutable_touch_move()->::maarpc::TouchParam::MergeFrom(
          from._internal_touch_move());
      break;
    }
    case kTouchUp: {
      _this->_internal_mutable_touch_up()->::maarpc::TouchParam::MergeFrom(
          from._internal_touch_up());
      break;
    }
    case kStart: {
      _this->_internal_set_start(from._internal_start());
      break;
    }
    case kStop: {
      _this->_internal_set_stop(from._internal_stop());
      break;
    }
    case kResolution: {
      _this->_internal_set_resolution(from._internal_resolution());
      break;
    }
    case kImage: {
      _this->_internal_set_image(from._internal_image());
      break;
    }
    case kUuid: {
      _this->_internal_set_uuid(from._internal_uuid());
      break;
    }
    case kSetOption: {
      _this->_internal_mutable_set_option()->::maarpc::CustomControllerSetOptionParam::MergeFrom(
          from._internal_set_option());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.CustomControllerResponse)
}

inline void CustomControllerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_command();
}

CustomControllerResponse::~CustomControllerResponse() {
  // @@protoc_insertion_point(destructor:maarpc.CustomControllerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomControllerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void CustomControllerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CustomControllerResponse::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:maarpc.CustomControllerResponse)
  switch (command_case()) {
    case kInit: {
      _impl_.command_.init_.Destroy();
      break;
    }
    case kConnect: {
      // No need to clear
      break;
    }
    case kClick: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.click_;
      }
      break;
    }
    case kSwipe: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.swipe_;
      }
      break;
    }
    case kKey: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.key_;
      }
      break;
    }
    case kTouchDown: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.touch_down_;
      }
      break;
    }
    case kTouchMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.touch_move_;
      }
      break;
    }
    case kTouchUp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.touch_up_;
      }
      break;
    }
    case kStart: {
      _impl_.command_.start_.Destroy();
      break;
    }
    case kStop: {
      _impl_.command_.stop_.Destroy();
      break;
    }
    case kResolution: {
      // No need to clear
      break;
    }
    case kImage: {
      _impl_.command_.image_.Destroy();
      break;
    }
    case kUuid: {
      // No need to clear
      break;
    }
    case kSetOption: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_.set_option_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}


void CustomControllerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.CustomControllerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomControllerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string init = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_init();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.CustomControllerResponse.init"));
        } else
          goto handle_unusual;
        continue;
      // bool connect = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_connect(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.ClickParam click = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_click(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.SwipeParam swipe = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_swipe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.KeyParam key = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.TouchParam touch_down = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_down(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.TouchParam touch_move = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.TouchParam touch_up = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_up(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_start();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.CustomControllerResponse.start"));
        } else
          goto handle_unusual;
        continue;
      // string stop = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_stop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.CustomControllerResponse.stop"));
        } else
          goto handle_unusual;
        continue;
      // bool resolution = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_set_resolution(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string image = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.CustomControllerResponse.image"));
        } else
          goto handle_unusual;
        continue;
      // bool uuid = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _internal_set_uuid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .maarpc.CustomControllerSetOptionParam set_option = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_option(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomControllerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.CustomControllerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string init = 101;
  if (_internal_has_init()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_init().data(), static_cast<int>(this->_internal_init().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.CustomControllerResponse.init");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_init(), target);
  }

  // bool connect = 201;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(201, this->_internal_connect(), target);
  }

  // .maarpc.ClickParam click = 202;
  if (_internal_has_click()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(202, _Internal::click(this),
        _Internal::click(this).GetCachedSize(), target, stream);
  }

  // .maarpc.SwipeParam swipe = 203;
  if (_internal_has_swipe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(203, _Internal::swipe(this),
        _Internal::swipe(this).GetCachedSize(), target, stream);
  }

  // .maarpc.KeyParam key = 204;
  if (_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // .maarpc.TouchParam touch_down = 205;
  if (_internal_has_touch_down()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(205, _Internal::touch_down(this),
        _Internal::touch_down(this).GetCachedSize(), target, stream);
  }

  // .maarpc.TouchParam touch_move = 206;
  if (_internal_has_touch_move()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(206, _Internal::touch_move(this),
        _Internal::touch_move(this).GetCachedSize(), target, stream);
  }

  // .maarpc.TouchParam touch_up = 207;
  if (_internal_has_touch_up()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(207, _Internal::touch_up(this),
        _Internal::touch_up(this).GetCachedSize(), target, stream);
  }

  // string start = 208;
  if (_internal_has_start()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.CustomControllerResponse.start");
    target = stream->WriteStringMaybeAliased(
        208, this->_internal_start(), target);
  }

  // string stop = 209;
  if (_internal_has_stop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop().data(), static_cast<int>(this->_internal_stop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.CustomControllerResponse.stop");
    target = stream->WriteStringMaybeAliased(
        209, this->_internal_stop(), target);
  }

  // bool resolution = 210;
  if (_internal_has_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(210, this->_internal_resolution(), target);
  }

  // string image = 211;
  if (_internal_has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.CustomControllerResponse.image");
    target = stream->WriteStringMaybeAliased(
        211, this->_internal_image(), target);
  }

  // bool uuid = 212;
  if (_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(212, this->_internal_uuid(), target);
  }

  // .maarpc.CustomControllerSetOptionParam set_option = 213;
  if (_internal_has_set_option()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(213, _Internal::set_option(this),
        _Internal::set_option(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.CustomControllerResponse)
  return target;
}

size_t CustomControllerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.CustomControllerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // string init = 101;
    case kInit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_init());
      break;
    }
    // bool connect = 201;
    case kConnect: {
      total_size += 2 + 1;
      break;
    }
    // .maarpc.ClickParam click = 202;
    case kClick: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.click_);
      break;
    }
    // .maarpc.SwipeParam swipe = 203;
    case kSwipe: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.swipe_);
      break;
    }
    // .maarpc.KeyParam key = 204;
    case kKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.key_);
      break;
    }
    // .maarpc.TouchParam touch_down = 205;
    case kTouchDown: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.touch_down_);
      break;
    }
    // .maarpc.TouchParam touch_move = 206;
    case kTouchMove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.touch_move_);
      break;
    }
    // .maarpc.TouchParam touch_up = 207;
    case kTouchUp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.touch_up_);
      break;
    }
    // string start = 208;
    case kStart: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start());
      break;
    }
    // string stop = 209;
    case kStop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop());
      break;
    }
    // bool resolution = 210;
    case kResolution: {
      total_size += 2 + 1;
      break;
    }
    // string image = 211;
    case kImage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
      break;
    }
    // bool uuid = 212;
    case kUuid: {
      total_size += 2 + 1;
      break;
    }
    // .maarpc.CustomControllerSetOptionParam set_option = 213;
    case kSetOption: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_.set_option_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomControllerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CustomControllerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomControllerResponse::GetClassData() const { return &_class_data_; }


void CustomControllerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CustomControllerResponse*>(&to_msg);
  auto& from = static_cast<const CustomControllerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.CustomControllerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kInit: {
      _this->_internal_set_init(from._internal_init());
      break;
    }
    case kConnect: {
      _this->_internal_set_connect(from._internal_connect());
      break;
    }
    case kClick: {
      _this->_internal_mutable_click()->::maarpc::ClickParam::MergeFrom(
          from._internal_click());
      break;
    }
    case kSwipe: {
      _this->_internal_mutable_swipe()->::maarpc::SwipeParam::MergeFrom(
          from._internal_swipe());
      break;
    }
    case kKey: {
      _this->_internal_mutable_key()->::maarpc::KeyParam::MergeFrom(
          from._internal_key());
      break;
    }
    case kTouchDown: {
      _this->_internal_mutable_touch_down()->::maarpc::TouchParam::MergeFrom(
          from._internal_touch_down());
      break;
    }
    case kTouchMove: {
      _this->_internal_mutable_touch_move()->::maarpc::TouchParam::MergeFrom(
          from._internal_touch_move());
      break;
    }
    case kTouchUp: {
      _this->_internal_mutable_touch_up()->::maarpc::TouchParam::MergeFrom(
          from._internal_touch_up());
      break;
    }
    case kStart: {
      _this->_internal_set_start(from._internal_start());
      break;
    }
    case kStop: {
      _this->_internal_set_stop(from._internal_stop());
      break;
    }
    case kResolution: {
      _this->_internal_set_resolution(from._internal_resolution());
      break;
    }
    case kImage: {
      _this->_internal_set_image(from._internal_image());
      break;
    }
    case kUuid: {
      _this->_internal_set_uuid(from._internal_uuid());
      break;
    }
    case kSetOption: {
      _this->_internal_mutable_set_option()->::maarpc::CustomControllerSetOptionParam::MergeFrom(
          from._internal_set_option());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomControllerResponse::CopyFrom(const CustomControllerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.CustomControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomControllerResponse::IsInitialized() const {
  return true;
}

void CustomControllerResponse::InternalSwap(CustomControllerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.command_, other->_impl_.command_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomControllerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custom_2econtroller_2eproto_getter, &descriptor_table_custom_2econtroller_2eproto_once,
      file_level_metadata_custom_2econtroller_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::maarpc::CustomControllerSetOptionParam*
Arena::CreateMaybeMessage< ::maarpc::CustomControllerSetOptionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::CustomControllerSetOptionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::CustomControllerRequest*
Arena::CreateMaybeMessage< ::maarpc::CustomControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::CustomControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::CustomControllerResponse*
Arena::CreateMaybeMessage< ::maarpc::CustomControllerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::CustomControllerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
