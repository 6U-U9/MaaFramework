// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_controller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_controller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include "custom.controller.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_controller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_controller_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controller_2eproto;
namespace maarpc {
class AdbControllerRequest;
struct AdbControllerRequestDefaultTypeInternal;
extern AdbControllerRequestDefaultTypeInternal _AdbControllerRequest_default_instance_;
class ControllerPostClickRequest;
struct ControllerPostClickRequestDefaultTypeInternal;
extern ControllerPostClickRequestDefaultTypeInternal _ControllerPostClickRequest_default_instance_;
class ControllerPostKeyRequest;
struct ControllerPostKeyRequestDefaultTypeInternal;
extern ControllerPostKeyRequestDefaultTypeInternal _ControllerPostKeyRequest_default_instance_;
class ControllerPostSwipeRequest;
struct ControllerPostSwipeRequestDefaultTypeInternal;
extern ControllerPostSwipeRequestDefaultTypeInternal _ControllerPostSwipeRequest_default_instance_;
class ControllerPostTouchRequest;
struct ControllerPostTouchRequestDefaultTypeInternal;
extern ControllerPostTouchRequestDefaultTypeInternal _ControllerPostTouchRequest_default_instance_;
class ControllerSetOptionRequest;
struct ControllerSetOptionRequestDefaultTypeInternal;
extern ControllerSetOptionRequestDefaultTypeInternal _ControllerSetOptionRequest_default_instance_;
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> ::maarpc::AdbControllerRequest* Arena::CreateMaybeMessage<::maarpc::AdbControllerRequest>(Arena*);
template<> ::maarpc::ControllerPostClickRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostClickRequest>(Arena*);
template<> ::maarpc::ControllerPostKeyRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostKeyRequest>(Arena*);
template<> ::maarpc::ControllerPostSwipeRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostSwipeRequest>(Arena*);
template<> ::maarpc::ControllerPostTouchRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostTouchRequest>(Arena*);
template<> ::maarpc::ControllerSetOptionRequest* Arena::CreateMaybeMessage<::maarpc::ControllerSetOptionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace maarpc {

// ===================================================================

class AdbControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.AdbControllerRequest) */ {
 public:
  inline AdbControllerRequest() : AdbControllerRequest(nullptr) {}
  ~AdbControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR AdbControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdbControllerRequest(const AdbControllerRequest& from);
  AdbControllerRequest(AdbControllerRequest&& from) noexcept
    : AdbControllerRequest() {
    *this = ::std::move(from);
  }

  inline AdbControllerRequest& operator=(const AdbControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdbControllerRequest& operator=(AdbControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdbControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdbControllerRequest* internal_default_instance() {
    return reinterpret_cast<const AdbControllerRequest*>(
               &_AdbControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdbControllerRequest& a, AdbControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdbControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdbControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdbControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdbControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdbControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdbControllerRequest& from) {
    AdbControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdbControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.AdbControllerRequest";
  }
  protected:
  explicit AdbControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAdbPathFieldNumber = 2,
    kAdbSerialFieldNumber = 3,
    kAdbConfigFieldNumber = 5,
    kAdbTypeFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string adb_path = 2;
  bool has_adb_path() const;
  private:
  bool _internal_has_adb_path() const;
  public:
  void clear_adb_path();
  const std::string& adb_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_path();
  PROTOBUF_NODISCARD std::string* release_adb_path();
  void set_allocated_adb_path(std::string* adb_path);
  private:
  const std::string& _internal_adb_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_path(const std::string& value);
  std::string* _internal_mutable_adb_path();
  public:

  // optional string adb_serial = 3;
  bool has_adb_serial() const;
  private:
  bool _internal_has_adb_serial() const;
  public:
  void clear_adb_serial();
  const std::string& adb_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_serial();
  PROTOBUF_NODISCARD std::string* release_adb_serial();
  void set_allocated_adb_serial(std::string* adb_serial);
  private:
  const std::string& _internal_adb_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_serial(const std::string& value);
  std::string* _internal_mutable_adb_serial();
  public:

  // optional string adb_config = 5;
  bool has_adb_config() const;
  private:
  bool _internal_has_adb_config() const;
  public:
  void clear_adb_config();
  const std::string& adb_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_config();
  PROTOBUF_NODISCARD std::string* release_adb_config();
  void set_allocated_adb_config(std::string* adb_config);
  private:
  const std::string& _internal_adb_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_config(const std::string& value);
  std::string* _internal_mutable_adb_config();
  public:

  // optional uint32 adb_type = 4;
  bool has_adb_type() const;
  private:
  bool _internal_has_adb_type() const;
  public:
  void clear_adb_type();
  uint32_t adb_type() const;
  void set_adb_type(uint32_t value);
  private:
  uint32_t _internal_adb_type() const;
  void _internal_set_adb_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.AdbControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_serial_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_config_;
    uint32_t adb_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_controller_2eproto;
};
// -------------------------------------------------------------------

class ControllerSetOptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerSetOptionRequest) */ {
 public:
  inline ControllerSetOptionRequest() : ControllerSetOptionRequest(nullptr) {}
  ~ControllerSetOptionRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerSetOptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerSetOptionRequest(const ControllerSetOptionRequest& from);
  ControllerSetOptionRequest(ControllerSetOptionRequest&& from) noexcept
    : ControllerSetOptionRequest() {
    *this = ::std::move(from);
  }

  inline ControllerSetOptionRequest& operator=(const ControllerSetOptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerSetOptionRequest& operator=(ControllerSetOptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerSetOptionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionCase {
    kLongSide = 101,
    kShortSide = 102,
    kDefPackageEntry = 103,
    kDefPackage = 104,
    OPTION_NOT_SET = 0,
  };

  static inline const ControllerSetOptionRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerSetOptionRequest*>(
               &_ControllerSetOptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControllerSetOptionRequest& a, ControllerSetOptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerSetOptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerSetOptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerSetOptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerSetOptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerSetOptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerSetOptionRequest& from) {
    ControllerSetOptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerSetOptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerSetOptionRequest";
  }
  protected:
  explicit ControllerSetOptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kLongSideFieldNumber = 101,
    kShortSideFieldNumber = 102,
    kDefPackageEntryFieldNumber = 103,
    kDefPackageFieldNumber = 104,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // int32 long_side = 101;
  bool has_long_side() const;
  private:
  bool _internal_has_long_side() const;
  public:
  void clear_long_side();
  int32_t long_side() const;
  void set_long_side(int32_t value);
  private:
  int32_t _internal_long_side() const;
  void _internal_set_long_side(int32_t value);
  public:

  // int32 short_side = 102;
  bool has_short_side() const;
  private:
  bool _internal_has_short_side() const;
  public:
  void clear_short_side();
  int32_t short_side() const;
  void set_short_side(int32_t value);
  private:
  int32_t _internal_short_side() const;
  void _internal_set_short_side(int32_t value);
  public:

  // string def_package_entry = 103;
  bool has_def_package_entry() const;
  private:
  bool _internal_has_def_package_entry() const;
  public:
  void clear_def_package_entry();
  const std::string& def_package_entry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_def_package_entry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_def_package_entry();
  PROTOBUF_NODISCARD std::string* release_def_package_entry();
  void set_allocated_def_package_entry(std::string* def_package_entry);
  private:
  const std::string& _internal_def_package_entry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_def_package_entry(const std::string& value);
  std::string* _internal_mutable_def_package_entry();
  public:

  // string def_package = 104;
  bool has_def_package() const;
  private:
  bool _internal_has_def_package() const;
  public:
  void clear_def_package();
  const std::string& def_package() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_def_package(ArgT0&& arg0, ArgT... args);
  std::string* mutable_def_package();
  PROTOBUF_NODISCARD std::string* release_def_package();
  void set_allocated_def_package(std::string* def_package);
  private:
  const std::string& _internal_def_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_def_package(const std::string& value);
  std::string* _internal_mutable_def_package();
  public:

  void clear_option();
  OptionCase option_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.ControllerSetOptionRequest)
 private:
  class _Internal;
  void set_has_long_side();
  void set_has_short_side();
  void set_has_def_package_entry();
  void set_has_def_package();

  inline bool has_option() const;
  inline void clear_has_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    union OptionUnion {
      constexpr OptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t long_side_;
      int32_t short_side_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr def_package_entry_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr def_package_;
    } option_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_controller_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostClickRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostClickRequest) */ {
 public:
  inline ControllerPostClickRequest() : ControllerPostClickRequest(nullptr) {}
  ~ControllerPostClickRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostClickRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostClickRequest(const ControllerPostClickRequest& from);
  ControllerPostClickRequest(ControllerPostClickRequest&& from) noexcept
    : ControllerPostClickRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostClickRequest& operator=(const ControllerPostClickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostClickRequest& operator=(ControllerPostClickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostClickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostClickRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostClickRequest*>(
               &_ControllerPostClickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerPostClickRequest& a, ControllerPostClickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostClickRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostClickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostClickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostClickRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostClickRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostClickRequest& from) {
    ControllerPostClickRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostClickRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostClickRequest";
  }
  protected:
  explicit ControllerPostClickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional .maarpc.ClickParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::ClickParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::ClickParam* release_param();
  ::maarpc::ClickParam* mutable_param();
  void set_allocated_param(::maarpc::ClickParam* param);
  private:
  const ::maarpc::ClickParam& _internal_param() const;
  ::maarpc::ClickParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::ClickParam* param);
  ::maarpc::ClickParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostClickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::maarpc::ClickParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_controller_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostSwipeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostSwipeRequest) */ {
 public:
  inline ControllerPostSwipeRequest() : ControllerPostSwipeRequest(nullptr) {}
  ~ControllerPostSwipeRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostSwipeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostSwipeRequest(const ControllerPostSwipeRequest& from);
  ControllerPostSwipeRequest(ControllerPostSwipeRequest&& from) noexcept
    : ControllerPostSwipeRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostSwipeRequest& operator=(const ControllerPostSwipeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostSwipeRequest& operator=(ControllerPostSwipeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostSwipeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostSwipeRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostSwipeRequest*>(
               &_ControllerPostSwipeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControllerPostSwipeRequest& a, ControllerPostSwipeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostSwipeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostSwipeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostSwipeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostSwipeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostSwipeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostSwipeRequest& from) {
    ControllerPostSwipeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostSwipeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostSwipeRequest";
  }
  protected:
  explicit ControllerPostSwipeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional .maarpc.SwipeParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::SwipeParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::SwipeParam* release_param();
  ::maarpc::SwipeParam* mutable_param();
  void set_allocated_param(::maarpc::SwipeParam* param);
  private:
  const ::maarpc::SwipeParam& _internal_param() const;
  ::maarpc::SwipeParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::SwipeParam* param);
  ::maarpc::SwipeParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostSwipeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::maarpc::SwipeParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_controller_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostKeyRequest) */ {
 public:
  inline ControllerPostKeyRequest() : ControllerPostKeyRequest(nullptr) {}
  ~ControllerPostKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostKeyRequest(const ControllerPostKeyRequest& from);
  ControllerPostKeyRequest(ControllerPostKeyRequest&& from) noexcept
    : ControllerPostKeyRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostKeyRequest& operator=(const ControllerPostKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostKeyRequest& operator=(ControllerPostKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostKeyRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostKeyRequest*>(
               &_ControllerPostKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ControllerPostKeyRequest& a, ControllerPostKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostKeyRequest& from) {
    ControllerPostKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostKeyRequest";
  }
  protected:
  explicit ControllerPostKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional .maarpc.KeyParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::KeyParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::KeyParam* release_param();
  ::maarpc::KeyParam* mutable_param();
  void set_allocated_param(::maarpc::KeyParam* param);
  private:
  const ::maarpc::KeyParam& _internal_param() const;
  ::maarpc::KeyParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::KeyParam* param);
  ::maarpc::KeyParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::maarpc::KeyParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_controller_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostTouchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostTouchRequest) */ {
 public:
  inline ControllerPostTouchRequest() : ControllerPostTouchRequest(nullptr) {}
  ~ControllerPostTouchRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostTouchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostTouchRequest(const ControllerPostTouchRequest& from);
  ControllerPostTouchRequest(ControllerPostTouchRequest&& from) noexcept
    : ControllerPostTouchRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostTouchRequest& operator=(const ControllerPostTouchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostTouchRequest& operator=(ControllerPostTouchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostTouchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostTouchRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostTouchRequest*>(
               &_ControllerPostTouchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ControllerPostTouchRequest& a, ControllerPostTouchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostTouchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostTouchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostTouchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostTouchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostTouchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostTouchRequest& from) {
    ControllerPostTouchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostTouchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostTouchRequest";
  }
  protected:
  explicit ControllerPostTouchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional .maarpc.TouchParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::TouchParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::TouchParam* release_param();
  ::maarpc::TouchParam* mutable_param();
  void set_allocated_param(::maarpc::TouchParam* param);
  private:
  const ::maarpc::TouchParam& _internal_param() const;
  ::maarpc::TouchParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::TouchParam* param);
  ::maarpc::TouchParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostTouchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::maarpc::TouchParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_controller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdbControllerRequest

// optional string id = 1;
inline bool AdbControllerRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_id() const {
  return _internal_has_id();
}
inline void AdbControllerRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdbControllerRequest::id() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.id)
}
inline std::string* AdbControllerRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.id)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AdbControllerRequest::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_id() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.id)
}

// optional string adb_path = 2;
inline bool AdbControllerRequest::_internal_has_adb_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_path() const {
  return _internal_has_adb_path();
}
inline void AdbControllerRequest::clear_adb_path() {
  _impl_.adb_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AdbControllerRequest::adb_path() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_path)
  return _internal_adb_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_adb_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.adb_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_path)
}
inline std::string* AdbControllerRequest::mutable_adb_path() {
  std::string* _s = _internal_mutable_adb_path();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.adb_path)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_adb_path() const {
  return _impl_.adb_path_.Get();
}
inline void AdbControllerRequest::_internal_set_adb_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.adb_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_adb_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.adb_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_adb_path() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.adb_path)
  if (!_internal_has_adb_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.adb_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_path_.IsDefault()) {
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_adb_path(std::string* adb_path) {
  if (adb_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.adb_path_.SetAllocated(adb_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_path_.IsDefault()) {
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.adb_path)
}

// optional string adb_serial = 3;
inline bool AdbControllerRequest::_internal_has_adb_serial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_serial() const {
  return _internal_has_adb_serial();
}
inline void AdbControllerRequest::clear_adb_serial() {
  _impl_.adb_serial_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AdbControllerRequest::adb_serial() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_serial)
  return _internal_adb_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_adb_serial(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.adb_serial_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_serial)
}
inline std::string* AdbControllerRequest::mutable_adb_serial() {
  std::string* _s = _internal_mutable_adb_serial();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.adb_serial)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_adb_serial() const {
  return _impl_.adb_serial_.Get();
}
inline void AdbControllerRequest::_internal_set_adb_serial(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.adb_serial_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_adb_serial() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.adb_serial_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_adb_serial() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.adb_serial)
  if (!_internal_has_adb_serial()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.adb_serial_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_serial_.IsDefault()) {
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_adb_serial(std::string* adb_serial) {
  if (adb_serial != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.adb_serial_.SetAllocated(adb_serial, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_serial_.IsDefault()) {
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.adb_serial)
}

// optional uint32 adb_type = 4;
inline bool AdbControllerRequest::_internal_has_adb_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_type() const {
  return _internal_has_adb_type();
}
inline void AdbControllerRequest::clear_adb_type() {
  _impl_.adb_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t AdbControllerRequest::_internal_adb_type() const {
  return _impl_.adb_type_;
}
inline uint32_t AdbControllerRequest::adb_type() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_type)
  return _internal_adb_type();
}
inline void AdbControllerRequest::_internal_set_adb_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.adb_type_ = value;
}
inline void AdbControllerRequest::set_adb_type(uint32_t value) {
  _internal_set_adb_type(value);
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_type)
}

// optional string adb_config = 5;
inline bool AdbControllerRequest::_internal_has_adb_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_config() const {
  return _internal_has_adb_config();
}
inline void AdbControllerRequest::clear_adb_config() {
  _impl_.adb_config_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AdbControllerRequest::adb_config() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_config)
  return _internal_adb_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_adb_config(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.adb_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_config)
}
inline std::string* AdbControllerRequest::mutable_adb_config() {
  std::string* _s = _internal_mutable_adb_config();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.adb_config)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_adb_config() const {
  return _impl_.adb_config_.Get();
}
inline void AdbControllerRequest::_internal_set_adb_config(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.adb_config_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_adb_config() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.adb_config_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_adb_config() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.adb_config)
  if (!_internal_has_adb_config()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.adb_config_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_config_.IsDefault()) {
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_adb_config(std::string* adb_config) {
  if (adb_config != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.adb_config_.SetAllocated(adb_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_config_.IsDefault()) {
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.adb_config)
}

// -------------------------------------------------------------------

// ControllerSetOptionRequest

// optional string handle = 1;
inline bool ControllerSetOptionRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerSetOptionRequest::has_handle() const {
  return _internal_has_handle();
}
inline void ControllerSetOptionRequest::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControllerSetOptionRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControllerSetOptionRequest::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.handle)
}
inline std::string* ControllerSetOptionRequest::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerSetOptionRequest.handle)
  return _s;
}
inline const std::string& ControllerSetOptionRequest::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void ControllerSetOptionRequest::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerSetOptionRequest.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ControllerSetOptionRequest::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerSetOptionRequest.handle)
}

// int32 long_side = 101;
inline bool ControllerSetOptionRequest::_internal_has_long_side() const {
  return option_case() == kLongSide;
}
inline bool ControllerSetOptionRequest::has_long_side() const {
  return _internal_has_long_side();
}
inline void ControllerSetOptionRequest::set_has_long_side() {
  _impl_._oneof_case_[0] = kLongSide;
}
inline void ControllerSetOptionRequest::clear_long_side() {
  if (_internal_has_long_side()) {
    _impl_.option_.long_side_ = 0;
    clear_has_option();
  }
}
inline int32_t ControllerSetOptionRequest::_internal_long_side() const {
  if (_internal_has_long_side()) {
    return _impl_.option_.long_side_;
  }
  return 0;
}
inline void ControllerSetOptionRequest::_internal_set_long_side(int32_t value) {
  if (!_internal_has_long_side()) {
    clear_option();
    set_has_long_side();
  }
  _impl_.option_.long_side_ = value;
}
inline int32_t ControllerSetOptionRequest::long_side() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.long_side)
  return _internal_long_side();
}
inline void ControllerSetOptionRequest::set_long_side(int32_t value) {
  _internal_set_long_side(value);
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.long_side)
}

// int32 short_side = 102;
inline bool ControllerSetOptionRequest::_internal_has_short_side() const {
  return option_case() == kShortSide;
}
inline bool ControllerSetOptionRequest::has_short_side() const {
  return _internal_has_short_side();
}
inline void ControllerSetOptionRequest::set_has_short_side() {
  _impl_._oneof_case_[0] = kShortSide;
}
inline void ControllerSetOptionRequest::clear_short_side() {
  if (_internal_has_short_side()) {
    _impl_.option_.short_side_ = 0;
    clear_has_option();
  }
}
inline int32_t ControllerSetOptionRequest::_internal_short_side() const {
  if (_internal_has_short_side()) {
    return _impl_.option_.short_side_;
  }
  return 0;
}
inline void ControllerSetOptionRequest::_internal_set_short_side(int32_t value) {
  if (!_internal_has_short_side()) {
    clear_option();
    set_has_short_side();
  }
  _impl_.option_.short_side_ = value;
}
inline int32_t ControllerSetOptionRequest::short_side() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.short_side)
  return _internal_short_side();
}
inline void ControllerSetOptionRequest::set_short_side(int32_t value) {
  _internal_set_short_side(value);
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.short_side)
}

// string def_package_entry = 103;
inline bool ControllerSetOptionRequest::_internal_has_def_package_entry() const {
  return option_case() == kDefPackageEntry;
}
inline bool ControllerSetOptionRequest::has_def_package_entry() const {
  return _internal_has_def_package_entry();
}
inline void ControllerSetOptionRequest::set_has_def_package_entry() {
  _impl_._oneof_case_[0] = kDefPackageEntry;
}
inline void ControllerSetOptionRequest::clear_def_package_entry() {
  if (_internal_has_def_package_entry()) {
    _impl_.option_.def_package_entry_.Destroy();
    clear_has_option();
  }
}
inline const std::string& ControllerSetOptionRequest::def_package_entry() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.def_package_entry)
  return _internal_def_package_entry();
}
template <typename ArgT0, typename... ArgT>
inline void ControllerSetOptionRequest::set_def_package_entry(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_def_package_entry()) {
    clear_option();
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitDefault();
  }
  _impl_.option_.def_package_entry_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.def_package_entry)
}
inline std::string* ControllerSetOptionRequest::mutable_def_package_entry() {
  std::string* _s = _internal_mutable_def_package_entry();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerSetOptionRequest.def_package_entry)
  return _s;
}
inline const std::string& ControllerSetOptionRequest::_internal_def_package_entry() const {
  if (_internal_has_def_package_entry()) {
    return _impl_.option_.def_package_entry_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ControllerSetOptionRequest::_internal_set_def_package_entry(const std::string& value) {
  if (!_internal_has_def_package_entry()) {
    clear_option();
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitDefault();
  }
  _impl_.option_.def_package_entry_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::_internal_mutable_def_package_entry() {
  if (!_internal_has_def_package_entry()) {
    clear_option();
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitDefault();
  }
  return _impl_.option_.def_package_entry_.Mutable(      GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::release_def_package_entry() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerSetOptionRequest.def_package_entry)
  if (_internal_has_def_package_entry()) {
    clear_has_option();
    return _impl_.option_.def_package_entry_.Release();
  } else {
    return nullptr;
  }
}
inline void ControllerSetOptionRequest::set_allocated_def_package_entry(std::string* def_package_entry) {
  if (has_option()) {
    clear_option();
  }
  if (def_package_entry != nullptr) {
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitAllocated(def_package_entry, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerSetOptionRequest.def_package_entry)
}

// string def_package = 104;
inline bool ControllerSetOptionRequest::_internal_has_def_package() const {
  return option_case() == kDefPackage;
}
inline bool ControllerSetOptionRequest::has_def_package() const {
  return _internal_has_def_package();
}
inline void ControllerSetOptionRequest::set_has_def_package() {
  _impl_._oneof_case_[0] = kDefPackage;
}
inline void ControllerSetOptionRequest::clear_def_package() {
  if (_internal_has_def_package()) {
    _impl_.option_.def_package_.Destroy();
    clear_has_option();
  }
}
inline const std::string& ControllerSetOptionRequest::def_package() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.def_package)
  return _internal_def_package();
}
template <typename ArgT0, typename... ArgT>
inline void ControllerSetOptionRequest::set_def_package(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_def_package()) {
    clear_option();
    set_has_def_package();
    _impl_.option_.def_package_.InitDefault();
  }
  _impl_.option_.def_package_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.def_package)
}
inline std::string* ControllerSetOptionRequest::mutable_def_package() {
  std::string* _s = _internal_mutable_def_package();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerSetOptionRequest.def_package)
  return _s;
}
inline const std::string& ControllerSetOptionRequest::_internal_def_package() const {
  if (_internal_has_def_package()) {
    return _impl_.option_.def_package_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ControllerSetOptionRequest::_internal_set_def_package(const std::string& value) {
  if (!_internal_has_def_package()) {
    clear_option();
    set_has_def_package();
    _impl_.option_.def_package_.InitDefault();
  }
  _impl_.option_.def_package_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::_internal_mutable_def_package() {
  if (!_internal_has_def_package()) {
    clear_option();
    set_has_def_package();
    _impl_.option_.def_package_.InitDefault();
  }
  return _impl_.option_.def_package_.Mutable(      GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::release_def_package() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerSetOptionRequest.def_package)
  if (_internal_has_def_package()) {
    clear_has_option();
    return _impl_.option_.def_package_.Release();
  } else {
    return nullptr;
  }
}
inline void ControllerSetOptionRequest::set_allocated_def_package(std::string* def_package) {
  if (has_option()) {
    clear_option();
  }
  if (def_package != nullptr) {
    set_has_def_package();
    _impl_.option_.def_package_.InitAllocated(def_package, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerSetOptionRequest.def_package)
}

inline bool ControllerSetOptionRequest::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
inline void ControllerSetOptionRequest::clear_has_option() {
  _impl_._oneof_case_[0] = OPTION_NOT_SET;
}
inline ControllerSetOptionRequest::OptionCase ControllerSetOptionRequest::option_case() const {
  return ControllerSetOptionRequest::OptionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerPostClickRequest

// optional string handle = 1;
inline bool ControllerPostClickRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerPostClickRequest::has_handle() const {
  return _internal_has_handle();
}
inline void ControllerPostClickRequest::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControllerPostClickRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostClickRequest.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControllerPostClickRequest::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerPostClickRequest.handle)
}
inline std::string* ControllerPostClickRequest::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostClickRequest.handle)
  return _s;
}
inline const std::string& ControllerPostClickRequest::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void ControllerPostClickRequest::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerPostClickRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* ControllerPostClickRequest::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostClickRequest.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ControllerPostClickRequest::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostClickRequest.handle)
}

// optional .maarpc.ClickParam param = 2;
inline bool ControllerPostClickRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostClickRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::ClickParam& ControllerPostClickRequest::_internal_param() const {
  const ::maarpc::ClickParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::ClickParam&>(
      ::maarpc::_ClickParam_default_instance_);
}
inline const ::maarpc::ClickParam& ControllerPostClickRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostClickRequest.param)
  return _internal_param();
}
inline void ControllerPostClickRequest::unsafe_arena_set_allocated_param(
    ::maarpc::ClickParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostClickRequest.param)
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::ClickParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostClickRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::ClickParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::ClickParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::mutable_param() {
  ::maarpc::ClickParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostClickRequest.param)
  return _msg;
}
inline void ControllerPostClickRequest::set_allocated_param(::maarpc::ClickParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostClickRequest.param)
}

// -------------------------------------------------------------------

// ControllerPostSwipeRequest

// optional string handle = 1;
inline bool ControllerPostSwipeRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerPostSwipeRequest::has_handle() const {
  return _internal_has_handle();
}
inline void ControllerPostSwipeRequest::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControllerPostSwipeRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostSwipeRequest.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControllerPostSwipeRequest::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerPostSwipeRequest.handle)
}
inline std::string* ControllerPostSwipeRequest::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostSwipeRequest.handle)
  return _s;
}
inline const std::string& ControllerPostSwipeRequest::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void ControllerPostSwipeRequest::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerPostSwipeRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* ControllerPostSwipeRequest::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostSwipeRequest.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ControllerPostSwipeRequest::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostSwipeRequest.handle)
}

// optional .maarpc.SwipeParam param = 2;
inline bool ControllerPostSwipeRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostSwipeRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::SwipeParam& ControllerPostSwipeRequest::_internal_param() const {
  const ::maarpc::SwipeParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::SwipeParam&>(
      ::maarpc::_SwipeParam_default_instance_);
}
inline const ::maarpc::SwipeParam& ControllerPostSwipeRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostSwipeRequest.param)
  return _internal_param();
}
inline void ControllerPostSwipeRequest::unsafe_arena_set_allocated_param(
    ::maarpc::SwipeParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostSwipeRequest.param)
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::SwipeParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostSwipeRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::SwipeParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::SwipeParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::mutable_param() {
  ::maarpc::SwipeParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostSwipeRequest.param)
  return _msg;
}
inline void ControllerPostSwipeRequest::set_allocated_param(::maarpc::SwipeParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostSwipeRequest.param)
}

// -------------------------------------------------------------------

// ControllerPostKeyRequest

// optional string handle = 1;
inline bool ControllerPostKeyRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerPostKeyRequest::has_handle() const {
  return _internal_has_handle();
}
inline void ControllerPostKeyRequest::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControllerPostKeyRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostKeyRequest.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControllerPostKeyRequest::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerPostKeyRequest.handle)
}
inline std::string* ControllerPostKeyRequest::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostKeyRequest.handle)
  return _s;
}
inline const std::string& ControllerPostKeyRequest::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void ControllerPostKeyRequest::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerPostKeyRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* ControllerPostKeyRequest::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostKeyRequest.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ControllerPostKeyRequest::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostKeyRequest.handle)
}

// optional .maarpc.KeyParam param = 2;
inline bool ControllerPostKeyRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostKeyRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::KeyParam& ControllerPostKeyRequest::_internal_param() const {
  const ::maarpc::KeyParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::KeyParam&>(
      ::maarpc::_KeyParam_default_instance_);
}
inline const ::maarpc::KeyParam& ControllerPostKeyRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostKeyRequest.param)
  return _internal_param();
}
inline void ControllerPostKeyRequest::unsafe_arena_set_allocated_param(
    ::maarpc::KeyParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostKeyRequest.param)
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::KeyParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostKeyRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::KeyParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::KeyParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::mutable_param() {
  ::maarpc::KeyParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostKeyRequest.param)
  return _msg;
}
inline void ControllerPostKeyRequest::set_allocated_param(::maarpc::KeyParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostKeyRequest.param)
}

// -------------------------------------------------------------------

// ControllerPostTouchRequest

// optional string handle = 1;
inline bool ControllerPostTouchRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControllerPostTouchRequest::has_handle() const {
  return _internal_has_handle();
}
inline void ControllerPostTouchRequest::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ControllerPostTouchRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostTouchRequest.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControllerPostTouchRequest::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerPostTouchRequest.handle)
}
inline std::string* ControllerPostTouchRequest::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostTouchRequest.handle)
  return _s;
}
inline const std::string& ControllerPostTouchRequest::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void ControllerPostTouchRequest::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerPostTouchRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* ControllerPostTouchRequest::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostTouchRequest.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ControllerPostTouchRequest::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostTouchRequest.handle)
}

// optional .maarpc.TouchParam param = 2;
inline bool ControllerPostTouchRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostTouchRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::TouchParam& ControllerPostTouchRequest::_internal_param() const {
  const ::maarpc::TouchParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::TouchParam&>(
      ::maarpc::_TouchParam_default_instance_);
}
inline const ::maarpc::TouchParam& ControllerPostTouchRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostTouchRequest.param)
  return _internal_param();
}
inline void ControllerPostTouchRequest::unsafe_arena_set_allocated_param(
    ::maarpc::TouchParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostTouchRequest.param)
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::TouchParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostTouchRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::TouchParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::TouchParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::mutable_param() {
  ::maarpc::TouchParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostTouchRequest.param)
  return _msg;
}
inline void ControllerPostTouchRequest::set_allocated_param(::maarpc::TouchParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostTouchRequest.param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace maarpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_controller_2eproto
