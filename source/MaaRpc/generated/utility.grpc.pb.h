// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: utility.proto
#ifndef GRPC_utility_2eproto__INCLUDED
#define GRPC_utility_2eproto__INCLUDED

#include "utility.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace maarpc {

class Utility final {
 public:
  static constexpr char const* service_full_name() {
    return "maarpc.Utility";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::StringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StringResponse>> Asyncversion(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StringResponse>>(AsyncversionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StringResponse>> PrepareAsyncversion(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StringResponse>>(PrepareAsyncversionRaw(context, request, cq));
    }
    virtual ::grpc::Status set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncset_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncset_global_optionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncset_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncset_global_optionRaw(context, request, cq));
    }
    virtual ::grpc::Status acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::IdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IdResponse>> Asyncacquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IdResponse>>(Asyncacquire_idRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IdResponse>> PrepareAsyncacquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IdResponse>>(PrepareAsyncacquire_idRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::maarpc::Callback>> register_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::maarpc::Callback>>(register_callbackRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::maarpc::Callback>> Asyncregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::maarpc::Callback>>(Asyncregister_callbackRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::maarpc::Callback>> PrepareAsyncregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::maarpc::Callback>>(PrepareAsyncregister_callbackRaw(context, request, cq));
    }
    virtual ::grpc::Status unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> Asyncunregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(Asyncunregister_callbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>> PrepareAsyncunregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>>(PrepareAsyncunregister_callbackRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void register_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::grpc::ClientReadReactor< ::maarpc::Callback>* reactor) = 0;
      virtual void unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StringResponse>* AsyncversionRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::StringResponse>* PrepareAsyncversionRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncset_global_optionRaw(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncset_global_optionRaw(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IdResponse>* Asyncacquire_idRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::IdResponse>* PrepareAsyncacquire_idRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::maarpc::Callback>* register_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::maarpc::Callback>* Asyncregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::maarpc::Callback>* PrepareAsyncregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* Asyncunregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::maarpc::EmptyResponse>* PrepareAsyncunregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::StringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>> Asyncversion(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>>(AsyncversionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>> PrepareAsyncversion(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>>(PrepareAsyncversionRaw(context, request, cq));
    }
    ::grpc::Status set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncset_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncset_global_optionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncset_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncset_global_optionRaw(context, request, cq));
    }
    ::grpc::Status acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::IdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>> Asyncacquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>>(Asyncacquire_idRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>> PrepareAsyncacquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>>(PrepareAsyncacquire_idRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::maarpc::Callback>> register_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::maarpc::Callback>>(register_callbackRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::maarpc::Callback>> Asyncregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::maarpc::Callback>>(Asyncregister_callbackRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::maarpc::Callback>> PrepareAsyncregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::maarpc::Callback>>(PrepareAsyncregister_callbackRaw(context, request, cq));
    }
    ::grpc::Status unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> Asyncunregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(Asyncunregister_callbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>> PrepareAsyncunregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>>(PrepareAsyncunregister_callbackRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response, std::function<void(::grpc::Status)>) override;
      void version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response, std::function<void(::grpc::Status)>) override;
      void acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void register_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::grpc::ClientReadReactor< ::maarpc::Callback>* reactor) override;
      void unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* AsyncversionRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* PrepareAsyncversionRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncset_global_optionRaw(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncset_global_optionRaw(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>* Asyncacquire_idRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>* PrepareAsyncacquire_idRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::maarpc::Callback>* register_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request) override;
    ::grpc::ClientAsyncReader< ::maarpc::Callback>* Asyncregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::maarpc::Callback>* PrepareAsyncregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Asyncunregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* PrepareAsyncunregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_version_;
    const ::grpc::internal::RpcMethod rpcmethod_set_global_option_;
    const ::grpc::internal::RpcMethod rpcmethod_acquire_id_;
    const ::grpc::internal::RpcMethod rpcmethod_register_callback_;
    const ::grpc::internal::RpcMethod rpcmethod_unregister_callback_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status version(::grpc::ServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response);
    virtual ::grpc::Status set_global_option(::grpc::ServerContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response);
    virtual ::grpc::Status acquire_id(::grpc::ServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response);
    virtual ::grpc::Status register_callback(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::grpc::ServerWriter< ::maarpc::Callback>* writer);
    virtual ::grpc::Status unregister_callback(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_version() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status version(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestversion(::grpc::ServerContext* context, ::maarpc::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::StringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_set_global_option : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_set_global_option() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_set_global_option() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_global_option(::grpc::ServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_global_option(::grpc::ServerContext* context, ::maarpc::SetGlobalOptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_acquire_id : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_acquire_id() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_acquire_id() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquire_id(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestacquire_id(::grpc::ServerContext* context, ::maarpc::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::IdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_register_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_register_callback() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_register_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::grpc::ServerWriter< ::maarpc::Callback>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_callback(::grpc::ServerContext* context, ::maarpc::IdRequest* request, ::grpc::ServerAsyncWriter< ::maarpc::Callback>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregister_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregister_callback() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_unregister_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunregister_callback(::grpc::ServerContext* context, ::maarpc::IdRequest* request, ::grpc::ServerAsyncResponseWriter< ::maarpc::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_version<WithAsyncMethod_set_global_option<WithAsyncMethod_acquire_id<WithAsyncMethod_register_callback<WithAsyncMethod_unregister_callback<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_version() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::EmptyRequest, ::maarpc::StringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response) { return this->version(context, request, response); }));}
    void SetMessageAllocatorFor_version(
        ::grpc::MessageAllocator< ::maarpc::EmptyRequest, ::maarpc::StringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::EmptyRequest, ::maarpc::StringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status version(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* version(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_set_global_option : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_set_global_option() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response) { return this->set_global_option(context, request, response); }));}
    void SetMessageAllocatorFor_set_global_option(
        ::grpc::MessageAllocator< ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_set_global_option() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_global_option(::grpc::ServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_global_option(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_acquire_id : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_acquire_id() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::EmptyRequest, ::maarpc::IdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response) { return this->acquire_id(context, request, response); }));}
    void SetMessageAllocatorFor_acquire_id(
        ::grpc::MessageAllocator< ::maarpc::EmptyRequest, ::maarpc::IdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::EmptyRequest, ::maarpc::IdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_acquire_id() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquire_id(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* acquire_id(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_register_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_register_callback() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::maarpc::IdRequest, ::maarpc::Callback>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::IdRequest* request) { return this->register_callback(context, request); }));
    }
    ~WithCallbackMethod_register_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::grpc::ServerWriter< ::maarpc::Callback>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::maarpc::Callback>* register_callback(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregister_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregister_callback() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::maarpc::IdRequest, ::maarpc::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response) { return this->unregister_callback(context, request, response); }));}
    void SetMessageAllocatorFor_unregister_callback(
        ::grpc::MessageAllocator< ::maarpc::IdRequest, ::maarpc::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::maarpc::IdRequest, ::maarpc::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregister_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregister_callback(
      ::grpc::CallbackServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_version<WithCallbackMethod_set_global_option<WithCallbackMethod_acquire_id<WithCallbackMethod_register_callback<WithCallbackMethod_unregister_callback<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_version() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status version(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_set_global_option : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_set_global_option() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_set_global_option() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_global_option(::grpc::ServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_acquire_id : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_acquire_id() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_acquire_id() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquire_id(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_register_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_register_callback() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_register_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::grpc::ServerWriter< ::maarpc::Callback>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregister_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregister_callback() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_unregister_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_version() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status version(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestversion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_set_global_option : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_set_global_option() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_set_global_option() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_global_option(::grpc::ServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_global_option(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_acquire_id : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_acquire_id() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_acquire_id() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquire_id(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestacquire_id(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_register_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_register_callback() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_register_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::grpc::ServerWriter< ::maarpc::Callback>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_callback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregister_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregister_callback() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_unregister_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunregister_callback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_version() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->version(context, request, response); }));
    }
    ~WithRawCallbackMethod_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status version(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* version(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_set_global_option : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_set_global_option() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->set_global_option(context, request, response); }));
    }
    ~WithRawCallbackMethod_set_global_option() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_global_option(::grpc::ServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_global_option(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_acquire_id : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_acquire_id() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->acquire_id(context, request, response); }));
    }
    ~WithRawCallbackMethod_acquire_id() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acquire_id(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* acquire_id(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_register_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_register_callback() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->register_callback(context, request); }));
    }
    ~WithRawCallbackMethod_register_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::grpc::ServerWriter< ::maarpc::Callback>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* register_callback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregister_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregister_callback() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregister_callback(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregister_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregister_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregister_callback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_version() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::EmptyRequest, ::maarpc::StringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::EmptyRequest, ::maarpc::StringResponse>* streamer) {
                       return this->Streamedversion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status version(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedversion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::EmptyRequest,::maarpc::StringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_set_global_option : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_set_global_option() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedset_global_option(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_set_global_option() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status set_global_option(::grpc::ServerContext* /*context*/, const ::maarpc::SetGlobalOptionRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedset_global_option(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::SetGlobalOptionRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_acquire_id : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_acquire_id() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::EmptyRequest, ::maarpc::IdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::EmptyRequest, ::maarpc::IdResponse>* streamer) {
                       return this->Streamedacquire_id(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_acquire_id() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status acquire_id(::grpc::ServerContext* /*context*/, const ::maarpc::EmptyRequest* /*request*/, ::maarpc::IdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedacquire_id(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::EmptyRequest,::maarpc::IdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregister_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregister_callback() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::maarpc::IdRequest, ::maarpc::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::maarpc::IdRequest, ::maarpc::EmptyResponse>* streamer) {
                       return this->Streamedunregister_callback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregister_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregister_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::maarpc::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunregister_callback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::maarpc::IdRequest,::maarpc::EmptyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_version<WithStreamedUnaryMethod_set_global_option<WithStreamedUnaryMethod_acquire_id<WithStreamedUnaryMethod_unregister_callback<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_register_callback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_register_callback() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::maarpc::IdRequest, ::maarpc::Callback>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::maarpc::IdRequest, ::maarpc::Callback>* streamer) {
                       return this->Streamedregister_callback(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_register_callback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status register_callback(::grpc::ServerContext* /*context*/, const ::maarpc::IdRequest* /*request*/, ::grpc::ServerWriter< ::maarpc::Callback>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedregister_callback(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::maarpc::IdRequest,::maarpc::Callback>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_register_callback<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_version<WithStreamedUnaryMethod_set_global_option<WithStreamedUnaryMethod_acquire_id<WithSplitStreamingMethod_register_callback<WithStreamedUnaryMethod_unregister_callback<Service > > > > > StreamedService;
};

}  // namespace maarpc


#endif  // GRPC_utility_2eproto__INCLUDED
