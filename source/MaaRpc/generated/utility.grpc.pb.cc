// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: utility.proto

#include "utility.pb.h"
#include "utility.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace maarpc {

static const char* Utility_method_names[] = {
  "/maarpc.Utility/version",
  "/maarpc.Utility/set_global_option",
  "/maarpc.Utility/acquire_id",
  "/maarpc.Utility/register_callback",
  "/maarpc.Utility/unregister_callback",
};

std::unique_ptr< Utility::Stub> Utility::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Utility::Stub> stub(new Utility::Stub(channel, options));
  return stub;
}

Utility::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_version_(Utility_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_global_option_(Utility_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_acquire_id_(Utility_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_register_callback_(Utility_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_unregister_callback_(Utility_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Utility::Stub::version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::EmptyRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_version_, context, request, response);
}

void Utility::Stub::async::version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::EmptyRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_version_, context, request, response, std::move(f));
}

void Utility::Stub::async::version(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* Utility::Stub::PrepareAsyncversionRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StringResponse, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_version_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StringResponse>* Utility::Stub::AsyncversionRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncversionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Utility::Stub::set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_global_option_, context, request, response);
}

void Utility::Stub::async::set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_global_option_, context, request, response, std::move(f));
}

void Utility::Stub::async::set_global_option(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_global_option_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Utility::Stub::PrepareAsyncset_global_optionRaw(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::SetGlobalOptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_global_option_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Utility::Stub::Asyncset_global_optionRaw(::grpc::ClientContext* context, const ::maarpc::SetGlobalOptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_global_optionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Utility::Stub::acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::IdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::EmptyRequest, ::maarpc::IdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_acquire_id_, context, request, response);
}

void Utility::Stub::async::acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::EmptyRequest, ::maarpc::IdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_acquire_id_, context, request, response, std::move(f));
}

void Utility::Stub::async::acquire_id(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_acquire_id_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>* Utility::Stub::PrepareAsyncacquire_idRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IdResponse, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_acquire_id_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IdResponse>* Utility::Stub::Asyncacquire_idRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncacquire_idRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::maarpc::Callback>* Utility::Stub::register_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::maarpc::Callback>::Create(channel_.get(), rpcmethod_register_callback_, context, request);
}

void Utility::Stub::async::register_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::grpc::ClientReadReactor< ::maarpc::Callback>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::maarpc::Callback>::Create(stub_->channel_.get(), stub_->rpcmethod_register_callback_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::maarpc::Callback>* Utility::Stub::Asyncregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::maarpc::Callback>::Create(channel_.get(), cq, rpcmethod_register_callback_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::maarpc::Callback>* Utility::Stub::PrepareAsyncregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::maarpc::Callback>::Create(channel_.get(), cq, rpcmethod_register_callback_, context, request, false, nullptr);
}

::grpc::Status Utility::Stub::unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::IdRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregister_callback_, context, request, response);
}

void Utility::Stub::async::unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::IdRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregister_callback_, context, request, response, std::move(f));
}

void Utility::Stub::async::unregister_callback(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregister_callback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Utility::Stub::PrepareAsyncunregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregister_callback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Utility::Stub::Asyncunregister_callbackRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregister_callbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

Utility::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Utility_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Utility::Service, ::maarpc::EmptyRequest, ::maarpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Utility::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::EmptyRequest* req,
             ::maarpc::StringResponse* resp) {
               return service->version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Utility_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Utility::Service, ::maarpc::SetGlobalOptionRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Utility::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::SetGlobalOptionRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->set_global_option(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Utility_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Utility::Service, ::maarpc::EmptyRequest, ::maarpc::IdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Utility::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::EmptyRequest* req,
             ::maarpc::IdResponse* resp) {
               return service->acquire_id(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Utility_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Utility::Service, ::maarpc::IdRequest, ::maarpc::Callback>(
          [](Utility::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::IdRequest* req,
             ::grpc::ServerWriter<::maarpc::Callback>* writer) {
               return service->register_callback(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Utility_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Utility::Service, ::maarpc::IdRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Utility::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::IdRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->unregister_callback(ctx, req, resp);
             }, this)));
}

Utility::Service::~Service() {
}

::grpc::Status Utility::Service::version(::grpc::ServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Utility::Service::set_global_option(::grpc::ServerContext* context, const ::maarpc::SetGlobalOptionRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Utility::Service::acquire_id(::grpc::ServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::IdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Utility::Service::register_callback(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::grpc::ServerWriter< ::maarpc::Callback>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Utility::Service::unregister_callback(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace maarpc

