// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buffer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_buffer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_buffer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_buffer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_buffer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_buffer_2eproto;
namespace maarpc {
class ImageInfoResponse;
struct ImageInfoResponseDefaultTypeInternal;
extern ImageInfoResponseDefaultTypeInternal _ImageInfoResponse_default_instance_;
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> ::maarpc::ImageInfoResponse* Arena::CreateMaybeMessage<::maarpc::ImageInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace maarpc {

// ===================================================================

class ImageInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ImageInfoResponse) */ {
 public:
  inline ImageInfoResponse() : ImageInfoResponse(nullptr) {}
  ~ImageInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ImageInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoResponse(const ImageInfoResponse& from);
  ImageInfoResponse(ImageInfoResponse&& from) noexcept
    : ImageInfoResponse() {
    *this = ::std::move(from);
  }

  inline ImageInfoResponse& operator=(const ImageInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoResponse& operator=(ImageInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ImageInfoResponse*>(
               &_ImageInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageInfoResponse& a, ImageInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageInfoResponse& from) {
    ImageInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ImageInfoResponse";
  }
  protected:
  explicit ImageInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .maarpc.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::maarpc::Size& size() const;
  PROTOBUF_NODISCARD ::maarpc::Size* release_size();
  ::maarpc::Size* mutable_size();
  void set_allocated_size(::maarpc::Size* size);
  private:
  const ::maarpc::Size& _internal_size() const;
  ::maarpc::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::maarpc::Size* size);
  ::maarpc::Size* unsafe_arena_release_size();

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.ImageInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Size* size_;
    int32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_buffer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageInfoResponse

// optional int32 type = 1;
inline bool ImageInfoResponse::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageInfoResponse::has_type() const {
  return _internal_has_type();
}
inline void ImageInfoResponse::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ImageInfoResponse::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ImageInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:maarpc.ImageInfoResponse.type)
  return _internal_type();
}
inline void ImageInfoResponse::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void ImageInfoResponse::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:maarpc.ImageInfoResponse.type)
}

// optional .maarpc.Size size = 2;
inline bool ImageInfoResponse::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool ImageInfoResponse::has_size() const {
  return _internal_has_size();
}
inline const ::maarpc::Size& ImageInfoResponse::_internal_size() const {
  const ::maarpc::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Size&>(
      ::maarpc::_Size_default_instance_);
}
inline const ::maarpc::Size& ImageInfoResponse::size() const {
  // @@protoc_insertion_point(field_get:maarpc.ImageInfoResponse.size)
  return _internal_size();
}
inline void ImageInfoResponse::unsafe_arena_set_allocated_size(
    ::maarpc::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ImageInfoResponse.size)
}
inline ::maarpc::Size* ImageInfoResponse::release_size() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Size* ImageInfoResponse::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:maarpc.ImageInfoResponse.size)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::maarpc::Size* ImageInfoResponse::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Size>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::maarpc::Size* ImageInfoResponse::mutable_size() {
  ::maarpc::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:maarpc.ImageInfoResponse.size)
  return _msg;
}
inline void ImageInfoResponse::set_allocated_size(::maarpc::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ImageInfoResponse.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace maarpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_buffer_2eproto
