// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto

#include "config.pb.h"
#include "config.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace maarpc {

static const char* Config_method_names[] = {
  "/maarpc.Config/init",
  "/maarpc.Config/uninit",
};

std::unique_ptr< Config::Stub> Config::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Config::Stub> stub(new Config::Stub(channel, options));
  return stub;
}

Config::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_(Config_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_uninit_(Config_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Config::Stub::init(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::EmptyRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void Config::Stub::async::init(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::EmptyRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void Config::Stub::async::init(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Config::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Config::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Config::Stub::uninit(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::EmptyRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_uninit_, context, request, response);
}

void Config::Stub::async::uninit(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::EmptyRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_uninit_, context, request, response, std::move(f));
}

void Config::Stub::async::uninit(::grpc::ClientContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_uninit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Config::Stub::PrepareAsyncuninitRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_uninit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Config::Stub::AsyncuninitRaw(::grpc::ClientContext* context, const ::maarpc::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncuninitRaw(context, request, cq);
  result->StartCall();
  return result;
}

Config::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::maarpc::EmptyRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Config::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::EmptyRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Config_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Config::Service, ::maarpc::EmptyRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Config::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::EmptyRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->uninit(ctx, req, resp);
             }, this)));
}

Config::Service::~Service() {
}

::grpc::Status Config::Service::init(::grpc::ServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Config::Service::uninit(::grpc::ServerContext* context, const ::maarpc::EmptyRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace maarpc

