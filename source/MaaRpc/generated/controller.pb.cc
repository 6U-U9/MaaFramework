// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace maarpc {
PROTOBUF_CONSTEXPR AdbControllerRequest::AdbControllerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adb_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adb_serial_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adb_config_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.adb_type_)*/0u} {}
struct AdbControllerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdbControllerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdbControllerRequestDefaultTypeInternal() {}
  union {
    AdbControllerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdbControllerRequestDefaultTypeInternal _AdbControllerRequest_default_instance_;
PROTOBUF_CONSTEXPR ControllerSetOptionRequest::ControllerSetOptionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.option_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ControllerSetOptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerSetOptionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerSetOptionRequestDefaultTypeInternal() {}
  union {
    ControllerSetOptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerSetOptionRequestDefaultTypeInternal _ControllerSetOptionRequest_default_instance_;
PROTOBUF_CONSTEXPR ControllerPostClickRequest::ControllerPostClickRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_)*/nullptr} {}
struct ControllerPostClickRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerPostClickRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerPostClickRequestDefaultTypeInternal() {}
  union {
    ControllerPostClickRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerPostClickRequestDefaultTypeInternal _ControllerPostClickRequest_default_instance_;
PROTOBUF_CONSTEXPR ControllerPostSwipeRequest::ControllerPostSwipeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_)*/nullptr} {}
struct ControllerPostSwipeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerPostSwipeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerPostSwipeRequestDefaultTypeInternal() {}
  union {
    ControllerPostSwipeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerPostSwipeRequestDefaultTypeInternal _ControllerPostSwipeRequest_default_instance_;
PROTOBUF_CONSTEXPR ControllerPostKeyRequest::ControllerPostKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_)*/nullptr} {}
struct ControllerPostKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerPostKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerPostKeyRequestDefaultTypeInternal() {}
  union {
    ControllerPostKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerPostKeyRequestDefaultTypeInternal _ControllerPostKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR ControllerPostTouchRequest::ControllerPostTouchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.param_)*/nullptr} {}
struct ControllerPostTouchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerPostTouchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerPostTouchRequestDefaultTypeInternal() {}
  union {
    ControllerPostTouchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerPostTouchRequestDefaultTypeInternal _ControllerPostTouchRequest_default_instance_;
}  // namespace maarpc
static ::_pb::Metadata file_level_metadata_controller_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_controller_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_controller_2eproto = nullptr;

const uint32_t TableStruct_controller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _impl_.adb_path_),
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _impl_.adb_serial_),
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _impl_.adb_type_),
  PROTOBUF_FIELD_OFFSET(::maarpc::AdbControllerRequest, _impl_.adb_config_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerSetOptionRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerSetOptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerSetOptionRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerSetOptionRequest, _impl_.handle_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerSetOptionRequest, _impl_.option_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostClickRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostClickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostClickRequest, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostClickRequest, _impl_.param_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostSwipeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostSwipeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostSwipeRequest, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostSwipeRequest, _impl_.param_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostKeyRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostKeyRequest, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostKeyRequest, _impl_.param_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostTouchRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostTouchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostTouchRequest, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::maarpc::ControllerPostTouchRequest, _impl_.param_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::maarpc::AdbControllerRequest)},
  { 16, 28, -1, sizeof(::maarpc::ControllerSetOptionRequest)},
  { 33, 41, -1, sizeof(::maarpc::ControllerPostClickRequest)},
  { 43, 51, -1, sizeof(::maarpc::ControllerPostSwipeRequest)},
  { 53, 61, -1, sizeof(::maarpc::ControllerPostKeyRequest)},
  { 63, 71, -1, sizeof(::maarpc::ControllerPostTouchRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::maarpc::_AdbControllerRequest_default_instance_._instance,
  &::maarpc::_ControllerSetOptionRequest_default_instance_._instance,
  &::maarpc::_ControllerPostClickRequest_default_instance_._instance,
  &::maarpc::_ControllerPostSwipeRequest_default_instance_._instance,
  &::maarpc::_ControllerPostKeyRequest_default_instance_._instance,
  &::maarpc::_ControllerPostTouchRequest_default_instance_._instance,
};

const char descriptor_table_protodef_controller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020controller.proto\022\006maarpc\032\013types.proto\032"
  "\027custom.controller.proto\"\306\001\n\024AdbControll"
  "erRequest\022\017\n\002id\030\001 \001(\tH\000\210\001\001\022\025\n\010adb_path\030\002"
  " \001(\tH\001\210\001\001\022\027\n\nadb_serial\030\003 \001(\tH\002\210\001\001\022\025\n\010ad"
  "b_type\030\004 \001(\rH\003\210\001\001\022\027\n\nadb_config\030\005 \001(\tH\004\210"
  "\001\001B\005\n\003_idB\013\n\t_adb_pathB\r\n\013_adb_serialB\013\n"
  "\t_adb_typeB\r\n\013_adb_config\"\245\001\n\032Controller"
  "SetOptionRequest\022\023\n\006handle\030\001 \001(\tH\001\210\001\001\022\023\n"
  "\tlong_side\030e \001(\005H\000\022\024\n\nshort_side\030f \001(\005H\000"
  "\022\033\n\021def_package_entry\030g \001(\tH\000\022\025\n\013def_pac"
  "kage\030h \001(\tH\000B\010\n\006optionB\t\n\007_handle\"n\n\032Con"
  "trollerPostClickRequest\022\023\n\006handle\030\001 \001(\tH"
  "\000\210\001\001\022&\n\005param\030\002 \001(\0132\022.maarpc.ClickParamH"
  "\001\210\001\001B\t\n\007_handleB\010\n\006_param\"n\n\032ControllerP"
  "ostSwipeRequest\022\023\n\006handle\030\001 \001(\tH\000\210\001\001\022&\n\005"
  "param\030\002 \001(\0132\022.maarpc.SwipeParamH\001\210\001\001B\t\n\007"
  "_handleB\010\n\006_param\"j\n\030ControllerPostKeyRe"
  "quest\022\023\n\006handle\030\001 \001(\tH\000\210\001\001\022$\n\005param\030\002 \001("
  "\0132\020.maarpc.KeyParamH\001\210\001\001B\t\n\007_handleB\010\n\006_"
  "param\"n\n\032ControllerPostTouchRequest\022\023\n\006h"
  "andle\030\001 \001(\tH\000\210\001\001\022&\n\005param\030\002 \001(\0132\022.maarpc"
  ".TouchParamH\001\210\001\001B\t\n\007_handleB\010\n\006_param2\204\t"
  "\n\nController\022B\n\ncreate_adb\022\034.maarpc.AdbC"
  "ontrollerRequest\032\026.maarpc.HandleResponse"
  "\0227\n\007destroy\022\025.maarpc.HandleRequest\032\025.maa"
  "rpc.EmptyResponse\022V\n\rcreate_custom\022\037.maa"
  "rpc.CustomControllerRequest\032 .maarpc.Cus"
  "tomControllerResponse(\0010\001\022G\n\nset_option\022"
  "\".maarpc.ControllerSetOptionRequest\032\025.ma"
  "arpc.EmptyResponse\022=\n\017post_connection\022\025."
  "maarpc.HandleRequest\032\023.maarpc.IIdRespons"
  "e\022E\n\npost_click\022\".maarpc.ControllerPostC"
  "lickRequest\032\023.maarpc.IIdResponse\022E\n\npost"
  "_swipe\022\".maarpc.ControllerPostSwipeReque"
  "st\032\023.maarpc.IIdResponse\022G\n\016post_press_ke"
  "y\022 .maarpc.ControllerPostKeyRequest\032\023.ma"
  "arpc.IIdResponse\022J\n\017post_touch_down\022\".ma"
  "arpc.ControllerPostTouchRequest\032\023.maarpc"
  ".IIdResponse\022J\n\017post_touch_move\022\".maarpc"
  ".ControllerPostTouchRequest\032\023.maarpc.IId"
  "Response\022H\n\rpost_touch_up\022\".maarpc.Contr"
  "ollerPostTouchRequest\032\023.maarpc.IIdRespon"
  "se\022<\n\016post_screencap\022\025.maarpc.HandleRequ"
  "est\032\023.maarpc.IIdResponse\022:\n\006status\022\030.maa"
  "rpc.HandleIIdRequest\032\026.maarpc.StatusResp"
  "onse\0228\n\004wait\022\030.maarpc.HandleIIdRequest\032\026"
  ".maarpc.StatusResponse\0228\n\tconnected\022\025.ma"
  "arpc.HandleRequest\032\024.maarpc.BoolResponse"
  "\022;\n\005image\022\033.maarpc.HandleHandleRequest\032\025"
  ".maarpc.EmptyResponse\0225\n\004uuid\022\025.maarpc.H"
  "andleRequest\032\026.maarpc.StringResponseb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_controller_2eproto_deps[2] = {
  &::descriptor_table_custom_2econtroller_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_controller_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_controller_2eproto = {
    false, false, 2044, descriptor_table_protodef_controller_2eproto,
    "controller.proto",
    &descriptor_table_controller_2eproto_once, descriptor_table_controller_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_controller_2eproto::offsets,
    file_level_metadata_controller_2eproto, file_level_enum_descriptors_controller_2eproto,
    file_level_service_descriptors_controller_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_controller_2eproto_getter() {
  return &descriptor_table_controller_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_controller_2eproto(&descriptor_table_controller_2eproto);
namespace maarpc {

// ===================================================================

class AdbControllerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AdbControllerRequest>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adb_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adb_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adb_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_adb_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AdbControllerRequest::AdbControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.AdbControllerRequest)
}
AdbControllerRequest::AdbControllerRequest(const AdbControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdbControllerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.adb_path_){}
    , decltype(_impl_.adb_serial_){}
    , decltype(_impl_.adb_config_){}
    , decltype(_impl_.adb_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.adb_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_adb_path()) {
    _this->_impl_.adb_path_.Set(from._internal_adb_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.adb_serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_adb_serial()) {
    _this->_impl_.adb_serial_.Set(from._internal_adb_serial(), 
      _this->GetArenaForAllocation());
  }
  _impl_.adb_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_adb_config()) {
    _this->_impl_.adb_config_.Set(from._internal_adb_config(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.adb_type_ = from._impl_.adb_type_;
  // @@protoc_insertion_point(copy_constructor:maarpc.AdbControllerRequest)
}

inline void AdbControllerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.adb_path_){}
    , decltype(_impl_.adb_serial_){}
    , decltype(_impl_.adb_config_){}
    , decltype(_impl_.adb_type_){0u}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.adb_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.adb_serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.adb_config_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdbControllerRequest::~AdbControllerRequest() {
  // @@protoc_insertion_point(destructor:maarpc.AdbControllerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdbControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.adb_path_.Destroy();
  _impl_.adb_serial_.Destroy();
  _impl_.adb_config_.Destroy();
}

void AdbControllerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdbControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.AdbControllerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.adb_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.adb_serial_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.adb_config_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.adb_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdbControllerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.AdbControllerRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // optional string adb_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_adb_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.AdbControllerRequest.adb_path"));
        } else
          goto handle_unusual;
        continue;
      // optional string adb_serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_adb_serial();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.AdbControllerRequest.adb_serial"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 adb_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_adb_type(&has_bits);
          _impl_.adb_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string adb_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_adb_config();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.AdbControllerRequest.adb_config"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdbControllerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.AdbControllerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string id = 1;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.AdbControllerRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string adb_path = 2;
  if (_internal_has_adb_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_adb_path().data(), static_cast<int>(this->_internal_adb_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.AdbControllerRequest.adb_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_adb_path(), target);
  }

  // optional string adb_serial = 3;
  if (_internal_has_adb_serial()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_adb_serial().data(), static_cast<int>(this->_internal_adb_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.AdbControllerRequest.adb_serial");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_adb_serial(), target);
  }

  // optional uint32 adb_type = 4;
  if (_internal_has_adb_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_adb_type(), target);
  }

  // optional string adb_config = 5;
  if (_internal_has_adb_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_adb_config().data(), static_cast<int>(this->_internal_adb_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.AdbControllerRequest.adb_config");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_adb_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.AdbControllerRequest)
  return target;
}

size_t AdbControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.AdbControllerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string adb_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_adb_path());
    }

    // optional string adb_serial = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_adb_serial());
    }

    // optional string adb_config = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_adb_config());
    }

    // optional uint32 adb_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_adb_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdbControllerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdbControllerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdbControllerRequest::GetClassData() const { return &_class_data_; }


void AdbControllerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdbControllerRequest*>(&to_msg);
  auto& from = static_cast<const AdbControllerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.AdbControllerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_adb_path(from._internal_adb_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_adb_serial(from._internal_adb_serial());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_adb_config(from._internal_adb_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.adb_type_ = from._impl_.adb_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdbControllerRequest::CopyFrom(const AdbControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.AdbControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdbControllerRequest::IsInitialized() const {
  return true;
}

void AdbControllerRequest::InternalSwap(AdbControllerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.adb_path_, lhs_arena,
      &other->_impl_.adb_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.adb_serial_, lhs_arena,
      &other->_impl_.adb_serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.adb_config_, lhs_arena,
      &other->_impl_.adb_config_, rhs_arena
  );
  swap(_impl_.adb_type_, other->_impl_.adb_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdbControllerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[0]);
}

// ===================================================================

class ControllerSetOptionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerSetOptionRequest>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ControllerSetOptionRequest::ControllerSetOptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.ControllerSetOptionRequest)
}
ControllerSetOptionRequest::ControllerSetOptionRequest(const ControllerSetOptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerSetOptionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.option_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_handle()) {
    _this->_impl_.handle_.Set(from._internal_handle(), 
      _this->GetArenaForAllocation());
  }
  clear_has_option();
  switch (from.option_case()) {
    case kLongSide: {
      _this->_internal_set_long_side(from._internal_long_side());
      break;
    }
    case kShortSide: {
      _this->_internal_set_short_side(from._internal_short_side());
      break;
    }
    case kDefPackageEntry: {
      _this->_internal_set_def_package_entry(from._internal_def_package_entry());
      break;
    }
    case kDefPackage: {
      _this->_internal_set_def_package(from._internal_def_package());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.ControllerSetOptionRequest)
}

inline void ControllerSetOptionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.option_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_option();
}

ControllerSetOptionRequest::~ControllerSetOptionRequest() {
  // @@protoc_insertion_point(destructor:maarpc.ControllerSetOptionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerSetOptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.handle_.Destroy();
  if (has_option()) {
    clear_option();
  }
}

void ControllerSetOptionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerSetOptionRequest::clear_option() {
// @@protoc_insertion_point(one_of_clear_start:maarpc.ControllerSetOptionRequest)
  switch (option_case()) {
    case kLongSide: {
      // No need to clear
      break;
    }
    case kShortSide: {
      // No need to clear
      break;
    }
    case kDefPackageEntry: {
      _impl_.option_.def_package_entry_.Destroy();
      break;
    }
    case kDefPackage: {
      _impl_.option_.def_package_.Destroy();
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTION_NOT_SET;
}


void ControllerSetOptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.ControllerSetOptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.handle_.ClearNonDefaultToEmpty();
  }
  clear_option();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerSetOptionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerSetOptionRequest.handle"));
        } else
          goto handle_unusual;
        continue;
      // int32 long_side = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_long_side(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 short_side = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_short_side(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string def_package_entry = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_def_package_entry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerSetOptionRequest.def_package_entry"));
        } else
          goto handle_unusual;
        continue;
      // string def_package = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_def_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerSetOptionRequest.def_package"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerSetOptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.ControllerSetOptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string handle = 1;
  if (_internal_has_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerSetOptionRequest.handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_handle(), target);
  }

  // int32 long_side = 101;
  if (_internal_has_long_side()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(101, this->_internal_long_side(), target);
  }

  // int32 short_side = 102;
  if (_internal_has_short_side()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(102, this->_internal_short_side(), target);
  }

  // string def_package_entry = 103;
  if (_internal_has_def_package_entry()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_def_package_entry().data(), static_cast<int>(this->_internal_def_package_entry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerSetOptionRequest.def_package_entry");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_def_package_entry(), target);
  }

  // string def_package = 104;
  if (_internal_has_def_package()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_def_package().data(), static_cast<int>(this->_internal_def_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerSetOptionRequest.def_package");
    target = stream->WriteStringMaybeAliased(
        104, this->_internal_def_package(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.ControllerSetOptionRequest)
  return target;
}

size_t ControllerSetOptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.ControllerSetOptionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_handle());
  }

  switch (option_case()) {
    // int32 long_side = 101;
    case kLongSide: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_long_side());
      break;
    }
    // int32 short_side = 102;
    case kShortSide: {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_short_side());
      break;
    }
    // string def_package_entry = 103;
    case kDefPackageEntry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_def_package_entry());
      break;
    }
    // string def_package = 104;
    case kDefPackage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_def_package());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerSetOptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerSetOptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerSetOptionRequest::GetClassData() const { return &_class_data_; }


void ControllerSetOptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerSetOptionRequest*>(&to_msg);
  auto& from = static_cast<const ControllerSetOptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.ControllerSetOptionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _this->_internal_set_handle(from._internal_handle());
  }
  switch (from.option_case()) {
    case kLongSide: {
      _this->_internal_set_long_side(from._internal_long_side());
      break;
    }
    case kShortSide: {
      _this->_internal_set_short_side(from._internal_short_side());
      break;
    }
    case kDefPackageEntry: {
      _this->_internal_set_def_package_entry(from._internal_def_package_entry());
      break;
    }
    case kDefPackage: {
      _this->_internal_set_def_package(from._internal_def_package());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerSetOptionRequest::CopyFrom(const ControllerSetOptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.ControllerSetOptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerSetOptionRequest::IsInitialized() const {
  return true;
}

void ControllerSetOptionRequest::InternalSwap(ControllerSetOptionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.handle_, lhs_arena,
      &other->_impl_.handle_, rhs_arena
  );
  swap(_impl_.option_, other->_impl_.option_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerSetOptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[1]);
}

// ===================================================================

class ControllerPostClickRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerPostClickRequest>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::maarpc::ClickParam& param(const ControllerPostClickRequest* msg);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::maarpc::ClickParam&
ControllerPostClickRequest::_Internal::param(const ControllerPostClickRequest* msg) {
  return *msg->_impl_.param_;
}
void ControllerPostClickRequest::clear_param() {
  if (_impl_.param_ != nullptr) _impl_.param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ControllerPostClickRequest::ControllerPostClickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.ControllerPostClickRequest)
}
ControllerPostClickRequest::ControllerPostClickRequest(const ControllerPostClickRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerPostClickRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_handle()) {
    _this->_impl_.handle_.Set(from._internal_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_param()) {
    _this->_impl_.param_ = new ::maarpc::ClickParam(*from._impl_.param_);
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.ControllerPostClickRequest)
}

inline void ControllerPostClickRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}
  };
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControllerPostClickRequest::~ControllerPostClickRequest() {
  // @@protoc_insertion_point(destructor:maarpc.ControllerPostClickRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerPostClickRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.param_;
}

void ControllerPostClickRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerPostClickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.ControllerPostClickRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.param_ != nullptr);
      _impl_.param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPostClickRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerPostClickRequest.handle"));
        } else
          goto handle_unusual;
        continue;
      // optional .maarpc.ClickParam param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerPostClickRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.ControllerPostClickRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string handle = 1;
  if (_internal_has_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerPostClickRequest.handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_handle(), target);
  }

  // optional .maarpc.ClickParam param = 2;
  if (_internal_has_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.ControllerPostClickRequest)
  return target;
}

size_t ControllerPostClickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.ControllerPostClickRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_handle());
    }

    // optional .maarpc.ClickParam param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerPostClickRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerPostClickRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerPostClickRequest::GetClassData() const { return &_class_data_; }


void ControllerPostClickRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerPostClickRequest*>(&to_msg);
  auto& from = static_cast<const ControllerPostClickRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.ControllerPostClickRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_handle(from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_param()->::maarpc::ClickParam::MergeFrom(
          from._internal_param());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerPostClickRequest::CopyFrom(const ControllerPostClickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.ControllerPostClickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPostClickRequest::IsInitialized() const {
  return true;
}

void ControllerPostClickRequest::InternalSwap(ControllerPostClickRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.handle_, lhs_arena,
      &other->_impl_.handle_, rhs_arena
  );
  swap(_impl_.param_, other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPostClickRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[2]);
}

// ===================================================================

class ControllerPostSwipeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerPostSwipeRequest>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::maarpc::SwipeParam& param(const ControllerPostSwipeRequest* msg);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::maarpc::SwipeParam&
ControllerPostSwipeRequest::_Internal::param(const ControllerPostSwipeRequest* msg) {
  return *msg->_impl_.param_;
}
void ControllerPostSwipeRequest::clear_param() {
  if (_impl_.param_ != nullptr) _impl_.param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ControllerPostSwipeRequest::ControllerPostSwipeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.ControllerPostSwipeRequest)
}
ControllerPostSwipeRequest::ControllerPostSwipeRequest(const ControllerPostSwipeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerPostSwipeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_handle()) {
    _this->_impl_.handle_.Set(from._internal_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_param()) {
    _this->_impl_.param_ = new ::maarpc::SwipeParam(*from._impl_.param_);
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.ControllerPostSwipeRequest)
}

inline void ControllerPostSwipeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}
  };
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControllerPostSwipeRequest::~ControllerPostSwipeRequest() {
  // @@protoc_insertion_point(destructor:maarpc.ControllerPostSwipeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerPostSwipeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.param_;
}

void ControllerPostSwipeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerPostSwipeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.ControllerPostSwipeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.param_ != nullptr);
      _impl_.param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPostSwipeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerPostSwipeRequest.handle"));
        } else
          goto handle_unusual;
        continue;
      // optional .maarpc.SwipeParam param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerPostSwipeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.ControllerPostSwipeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string handle = 1;
  if (_internal_has_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerPostSwipeRequest.handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_handle(), target);
  }

  // optional .maarpc.SwipeParam param = 2;
  if (_internal_has_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.ControllerPostSwipeRequest)
  return target;
}

size_t ControllerPostSwipeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.ControllerPostSwipeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_handle());
    }

    // optional .maarpc.SwipeParam param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerPostSwipeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerPostSwipeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerPostSwipeRequest::GetClassData() const { return &_class_data_; }


void ControllerPostSwipeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerPostSwipeRequest*>(&to_msg);
  auto& from = static_cast<const ControllerPostSwipeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.ControllerPostSwipeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_handle(from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_param()->::maarpc::SwipeParam::MergeFrom(
          from._internal_param());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerPostSwipeRequest::CopyFrom(const ControllerPostSwipeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.ControllerPostSwipeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPostSwipeRequest::IsInitialized() const {
  return true;
}

void ControllerPostSwipeRequest::InternalSwap(ControllerPostSwipeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.handle_, lhs_arena,
      &other->_impl_.handle_, rhs_arena
  );
  swap(_impl_.param_, other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPostSwipeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[3]);
}

// ===================================================================

class ControllerPostKeyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerPostKeyRequest>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::maarpc::KeyParam& param(const ControllerPostKeyRequest* msg);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::maarpc::KeyParam&
ControllerPostKeyRequest::_Internal::param(const ControllerPostKeyRequest* msg) {
  return *msg->_impl_.param_;
}
void ControllerPostKeyRequest::clear_param() {
  if (_impl_.param_ != nullptr) _impl_.param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ControllerPostKeyRequest::ControllerPostKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.ControllerPostKeyRequest)
}
ControllerPostKeyRequest::ControllerPostKeyRequest(const ControllerPostKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerPostKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_handle()) {
    _this->_impl_.handle_.Set(from._internal_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_param()) {
    _this->_impl_.param_ = new ::maarpc::KeyParam(*from._impl_.param_);
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.ControllerPostKeyRequest)
}

inline void ControllerPostKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}
  };
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControllerPostKeyRequest::~ControllerPostKeyRequest() {
  // @@protoc_insertion_point(destructor:maarpc.ControllerPostKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerPostKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.param_;
}

void ControllerPostKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerPostKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.ControllerPostKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.param_ != nullptr);
      _impl_.param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPostKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerPostKeyRequest.handle"));
        } else
          goto handle_unusual;
        continue;
      // optional .maarpc.KeyParam param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerPostKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.ControllerPostKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string handle = 1;
  if (_internal_has_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerPostKeyRequest.handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_handle(), target);
  }

  // optional .maarpc.KeyParam param = 2;
  if (_internal_has_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.ControllerPostKeyRequest)
  return target;
}

size_t ControllerPostKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.ControllerPostKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_handle());
    }

    // optional .maarpc.KeyParam param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerPostKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerPostKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerPostKeyRequest::GetClassData() const { return &_class_data_; }


void ControllerPostKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerPostKeyRequest*>(&to_msg);
  auto& from = static_cast<const ControllerPostKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.ControllerPostKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_handle(from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_param()->::maarpc::KeyParam::MergeFrom(
          from._internal_param());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerPostKeyRequest::CopyFrom(const ControllerPostKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.ControllerPostKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPostKeyRequest::IsInitialized() const {
  return true;
}

void ControllerPostKeyRequest::InternalSwap(ControllerPostKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.handle_, lhs_arena,
      &other->_impl_.handle_, rhs_arena
  );
  swap(_impl_.param_, other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPostKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[4]);
}

// ===================================================================

class ControllerPostTouchRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerPostTouchRequest>()._impl_._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::maarpc::TouchParam& param(const ControllerPostTouchRequest* msg);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::maarpc::TouchParam&
ControllerPostTouchRequest::_Internal::param(const ControllerPostTouchRequest* msg) {
  return *msg->_impl_.param_;
}
void ControllerPostTouchRequest::clear_param() {
  if (_impl_.param_ != nullptr) _impl_.param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ControllerPostTouchRequest::ControllerPostTouchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:maarpc.ControllerPostTouchRequest)
}
ControllerPostTouchRequest::ControllerPostTouchRequest(const ControllerPostTouchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerPostTouchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_handle()) {
    _this->_impl_.handle_.Set(from._internal_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_param()) {
    _this->_impl_.param_ = new ::maarpc::TouchParam(*from._impl_.param_);
  }
  // @@protoc_insertion_point(copy_constructor:maarpc.ControllerPostTouchRequest)
}

inline void ControllerPostTouchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.param_){nullptr}
  };
  _impl_.handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControllerPostTouchRequest::~ControllerPostTouchRequest() {
  // @@protoc_insertion_point(destructor:maarpc.ControllerPostTouchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerPostTouchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.param_;
}

void ControllerPostTouchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerPostTouchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:maarpc.ControllerPostTouchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.param_ != nullptr);
      _impl_.param_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerPostTouchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "maarpc.ControllerPostTouchRequest.handle"));
        } else
          goto handle_unusual;
        continue;
      // optional .maarpc.TouchParam param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControllerPostTouchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:maarpc.ControllerPostTouchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string handle = 1;
  if (_internal_has_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "maarpc.ControllerPostTouchRequest.handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_handle(), target);
  }

  // optional .maarpc.TouchParam param = 2;
  if (_internal_has_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:maarpc.ControllerPostTouchRequest)
  return target;
}

size_t ControllerPostTouchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:maarpc.ControllerPostTouchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_handle());
    }

    // optional .maarpc.TouchParam param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerPostTouchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerPostTouchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerPostTouchRequest::GetClassData() const { return &_class_data_; }


void ControllerPostTouchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerPostTouchRequest*>(&to_msg);
  auto& from = static_cast<const ControllerPostTouchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:maarpc.ControllerPostTouchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_handle(from._internal_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_param()->::maarpc::TouchParam::MergeFrom(
          from._internal_param());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerPostTouchRequest::CopyFrom(const ControllerPostTouchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:maarpc.ControllerPostTouchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerPostTouchRequest::IsInitialized() const {
  return true;
}

void ControllerPostTouchRequest::InternalSwap(ControllerPostTouchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.handle_, lhs_arena,
      &other->_impl_.handle_, rhs_arena
  );
  swap(_impl_.param_, other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerPostTouchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::maarpc::AdbControllerRequest*
Arena::CreateMaybeMessage< ::maarpc::AdbControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::AdbControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::ControllerSetOptionRequest*
Arena::CreateMaybeMessage< ::maarpc::ControllerSetOptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::ControllerSetOptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::ControllerPostClickRequest*
Arena::CreateMaybeMessage< ::maarpc::ControllerPostClickRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::ControllerPostClickRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::ControllerPostSwipeRequest*
Arena::CreateMaybeMessage< ::maarpc::ControllerPostSwipeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::ControllerPostSwipeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::ControllerPostKeyRequest*
Arena::CreateMaybeMessage< ::maarpc::ControllerPostKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::ControllerPostKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::maarpc::ControllerPostTouchRequest*
Arena::CreateMaybeMessage< ::maarpc::ControllerPostTouchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::maarpc::ControllerPostTouchRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
