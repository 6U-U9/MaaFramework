// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_2eproto;
namespace maarpc {
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceInfosResponse;
struct DeviceInfosResponseDefaultTypeInternal;
extern DeviceInfosResponseDefaultTypeInternal _DeviceInfosResponse_default_instance_;
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> ::maarpc::DeviceInfo* Arena::CreateMaybeMessage<::maarpc::DeviceInfo>(Arena*);
template<> ::maarpc::DeviceInfosResponse* Arena::CreateMaybeMessage<::maarpc::DeviceInfosResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace maarpc {

// ===================================================================

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceInfo& from) {
    DeviceInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAdbPathFieldNumber = 2,
    kAdbSerialFieldNumber = 3,
    kAdbConfigFieldNumber = 5,
    kAdbTypeFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string adb_path = 2;
  bool has_adb_path() const;
  private:
  bool _internal_has_adb_path() const;
  public:
  void clear_adb_path();
  const std::string& adb_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_path();
  PROTOBUF_NODISCARD std::string* release_adb_path();
  void set_allocated_adb_path(std::string* adb_path);
  private:
  const std::string& _internal_adb_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_path(const std::string& value);
  std::string* _internal_mutable_adb_path();
  public:

  // optional string adb_serial = 3;
  bool has_adb_serial() const;
  private:
  bool _internal_has_adb_serial() const;
  public:
  void clear_adb_serial();
  const std::string& adb_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_serial();
  PROTOBUF_NODISCARD std::string* release_adb_serial();
  void set_allocated_adb_serial(std::string* adb_serial);
  private:
  const std::string& _internal_adb_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_serial(const std::string& value);
  std::string* _internal_mutable_adb_serial();
  public:

  // optional string adb_config = 5;
  bool has_adb_config() const;
  private:
  bool _internal_has_adb_config() const;
  public:
  void clear_adb_config();
  const std::string& adb_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_config();
  PROTOBUF_NODISCARD std::string* release_adb_config();
  void set_allocated_adb_config(std::string* adb_config);
  private:
  const std::string& _internal_adb_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_config(const std::string& value);
  std::string* _internal_mutable_adb_config();
  public:

  // optional int32 adb_type = 4;
  bool has_adb_type() const;
  private:
  bool _internal_has_adb_type() const;
  public:
  void clear_adb_type();
  int32_t adb_type() const;
  void set_adb_type(int32_t value);
  private:
  int32_t _internal_adb_type() const;
  void _internal_set_adb_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_serial_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_config_;
    int32_t adb_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfosResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.DeviceInfosResponse) */ {
 public:
  inline DeviceInfosResponse() : DeviceInfosResponse(nullptr) {}
  ~DeviceInfosResponse() override;
  explicit PROTOBUF_CONSTEXPR DeviceInfosResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfosResponse(const DeviceInfosResponse& from);
  DeviceInfosResponse(DeviceInfosResponse&& from) noexcept
    : DeviceInfosResponse() {
    *this = ::std::move(from);
  }

  inline DeviceInfosResponse& operator=(const DeviceInfosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfosResponse& operator=(DeviceInfosResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfosResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfosResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceInfosResponse*>(
               &_DeviceInfosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceInfosResponse& a, DeviceInfosResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfosResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfosResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfosResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfosResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceInfosResponse& from) {
    DeviceInfosResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfosResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.DeviceInfosResponse";
  }
  protected:
  explicit DeviceInfosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .maarpc.DeviceInfo info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::maarpc::DeviceInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::maarpc::DeviceInfo >*
      mutable_info();
  private:
  const ::maarpc::DeviceInfo& _internal_info(int index) const;
  ::maarpc::DeviceInfo* _internal_add_info();
  public:
  const ::maarpc::DeviceInfo& info(int index) const;
  ::maarpc::DeviceInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::maarpc::DeviceInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:maarpc.DeviceInfosResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::maarpc::DeviceInfo > info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfo

// optional string name = 1;
inline bool DeviceInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceInfo::has_name() const {
  return _internal_has_name();
}
inline void DeviceInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceInfo::name() const {
  // @@protoc_insertion_point(field_get:maarpc.DeviceInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.DeviceInfo.name)
}
inline std::string* DeviceInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:maarpc.DeviceInfo.name)
  return _s;
}
inline const std::string& DeviceInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeviceInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_name() {
  // @@protoc_insertion_point(field_release:maarpc.DeviceInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeviceInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.DeviceInfo.name)
}

// optional string adb_path = 2;
inline bool DeviceInfo::_internal_has_adb_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceInfo::has_adb_path() const {
  return _internal_has_adb_path();
}
inline void DeviceInfo::clear_adb_path() {
  _impl_.adb_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeviceInfo::adb_path() const {
  // @@protoc_insertion_point(field_get:maarpc.DeviceInfo.adb_path)
  return _internal_adb_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_adb_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.adb_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.DeviceInfo.adb_path)
}
inline std::string* DeviceInfo::mutable_adb_path() {
  std::string* _s = _internal_mutable_adb_path();
  // @@protoc_insertion_point(field_mutable:maarpc.DeviceInfo.adb_path)
  return _s;
}
inline const std::string& DeviceInfo::_internal_adb_path() const {
  return _impl_.adb_path_.Get();
}
inline void DeviceInfo::_internal_set_adb_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.adb_path_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_adb_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.adb_path_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_adb_path() {
  // @@protoc_insertion_point(field_release:maarpc.DeviceInfo.adb_path)
  if (!_internal_has_adb_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.adb_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_path_.IsDefault()) {
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeviceInfo::set_allocated_adb_path(std::string* adb_path) {
  if (adb_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.adb_path_.SetAllocated(adb_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_path_.IsDefault()) {
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.DeviceInfo.adb_path)
}

// optional string adb_serial = 3;
inline bool DeviceInfo::_internal_has_adb_serial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceInfo::has_adb_serial() const {
  return _internal_has_adb_serial();
}
inline void DeviceInfo::clear_adb_serial() {
  _impl_.adb_serial_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DeviceInfo::adb_serial() const {
  // @@protoc_insertion_point(field_get:maarpc.DeviceInfo.adb_serial)
  return _internal_adb_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_adb_serial(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.adb_serial_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.DeviceInfo.adb_serial)
}
inline std::string* DeviceInfo::mutable_adb_serial() {
  std::string* _s = _internal_mutable_adb_serial();
  // @@protoc_insertion_point(field_mutable:maarpc.DeviceInfo.adb_serial)
  return _s;
}
inline const std::string& DeviceInfo::_internal_adb_serial() const {
  return _impl_.adb_serial_.Get();
}
inline void DeviceInfo::_internal_set_adb_serial(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.adb_serial_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_adb_serial() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.adb_serial_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_adb_serial() {
  // @@protoc_insertion_point(field_release:maarpc.DeviceInfo.adb_serial)
  if (!_internal_has_adb_serial()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.adb_serial_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_serial_.IsDefault()) {
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeviceInfo::set_allocated_adb_serial(std::string* adb_serial) {
  if (adb_serial != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.adb_serial_.SetAllocated(adb_serial, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_serial_.IsDefault()) {
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.DeviceInfo.adb_serial)
}

// optional int32 adb_type = 4;
inline bool DeviceInfo::_internal_has_adb_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceInfo::has_adb_type() const {
  return _internal_has_adb_type();
}
inline void DeviceInfo::clear_adb_type() {
  _impl_.adb_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DeviceInfo::_internal_adb_type() const {
  return _impl_.adb_type_;
}
inline int32_t DeviceInfo::adb_type() const {
  // @@protoc_insertion_point(field_get:maarpc.DeviceInfo.adb_type)
  return _internal_adb_type();
}
inline void DeviceInfo::_internal_set_adb_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.adb_type_ = value;
}
inline void DeviceInfo::set_adb_type(int32_t value) {
  _internal_set_adb_type(value);
  // @@protoc_insertion_point(field_set:maarpc.DeviceInfo.adb_type)
}

// optional string adb_config = 5;
inline bool DeviceInfo::_internal_has_adb_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceInfo::has_adb_config() const {
  return _internal_has_adb_config();
}
inline void DeviceInfo::clear_adb_config() {
  _impl_.adb_config_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DeviceInfo::adb_config() const {
  // @@protoc_insertion_point(field_get:maarpc.DeviceInfo.adb_config)
  return _internal_adb_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_adb_config(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.adb_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.DeviceInfo.adb_config)
}
inline std::string* DeviceInfo::mutable_adb_config() {
  std::string* _s = _internal_mutable_adb_config();
  // @@protoc_insertion_point(field_mutable:maarpc.DeviceInfo.adb_config)
  return _s;
}
inline const std::string& DeviceInfo::_internal_adb_config() const {
  return _impl_.adb_config_.Get();
}
inline void DeviceInfo::_internal_set_adb_config(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.adb_config_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_adb_config() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.adb_config_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_adb_config() {
  // @@protoc_insertion_point(field_release:maarpc.DeviceInfo.adb_config)
  if (!_internal_has_adb_config()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.adb_config_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_config_.IsDefault()) {
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeviceInfo::set_allocated_adb_config(std::string* adb_config) {
  if (adb_config != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.adb_config_.SetAllocated(adb_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_config_.IsDefault()) {
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.DeviceInfo.adb_config)
}

// -------------------------------------------------------------------

// DeviceInfosResponse

// repeated .maarpc.DeviceInfo info = 1;
inline int DeviceInfosResponse::_internal_info_size() const {
  return _impl_.info_.size();
}
inline int DeviceInfosResponse::info_size() const {
  return _internal_info_size();
}
inline void DeviceInfosResponse::clear_info() {
  _impl_.info_.Clear();
}
inline ::maarpc::DeviceInfo* DeviceInfosResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:maarpc.DeviceInfosResponse.info)
  return _impl_.info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::maarpc::DeviceInfo >*
DeviceInfosResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:maarpc.DeviceInfosResponse.info)
  return &_impl_.info_;
}
inline const ::maarpc::DeviceInfo& DeviceInfosResponse::_internal_info(int index) const {
  return _impl_.info_.Get(index);
}
inline const ::maarpc::DeviceInfo& DeviceInfosResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:maarpc.DeviceInfosResponse.info)
  return _internal_info(index);
}
inline ::maarpc::DeviceInfo* DeviceInfosResponse::_internal_add_info() {
  return _impl_.info_.Add();
}
inline ::maarpc::DeviceInfo* DeviceInfosResponse::add_info() {
  ::maarpc::DeviceInfo* _add = _internal_add_info();
  // @@protoc_insertion_point(field_add:maarpc.DeviceInfosResponse.info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::maarpc::DeviceInfo >&
DeviceInfosResponse::info() const {
  // @@protoc_insertion_point(field_list:maarpc.DeviceInfosResponse.info)
  return _impl_.info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace maarpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_2eproto
