// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Framework.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Framework_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Framework_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Framework_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Framework_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Framework_2eproto;
namespace maarpc {
class AdbControllerRequest;
struct AdbControllerRequestDefaultTypeInternal;
extern AdbControllerRequestDefaultTypeInternal _AdbControllerRequest_default_instance_;
class ControllerGetImageRequest;
struct ControllerGetImageRequestDefaultTypeInternal;
extern ControllerGetImageRequestDefaultTypeInternal _ControllerGetImageRequest_default_instance_;
class ControllerPostClickRequest;
struct ControllerPostClickRequestDefaultTypeInternal;
extern ControllerPostClickRequestDefaultTypeInternal _ControllerPostClickRequest_default_instance_;
class ControllerPostKeyRequest;
struct ControllerPostKeyRequestDefaultTypeInternal;
extern ControllerPostKeyRequestDefaultTypeInternal _ControllerPostKeyRequest_default_instance_;
class ControllerPostSwipeRequest;
struct ControllerPostSwipeRequestDefaultTypeInternal;
extern ControllerPostSwipeRequestDefaultTypeInternal _ControllerPostSwipeRequest_default_instance_;
class ControllerPostTouchRequest;
struct ControllerPostTouchRequestDefaultTypeInternal;
extern ControllerPostTouchRequestDefaultTypeInternal _ControllerPostTouchRequest_default_instance_;
class ControllerSetOptionRequest;
struct ControllerSetOptionRequestDefaultTypeInternal;
extern ControllerSetOptionRequestDefaultTypeInternal _ControllerSetOptionRequest_default_instance_;
class CustomActionRequest;
struct CustomActionRequestDefaultTypeInternal;
extern CustomActionRequestDefaultTypeInternal _CustomActionRequest_default_instance_;
class CustomActionResponse;
struct CustomActionResponseDefaultTypeInternal;
extern CustomActionResponseDefaultTypeInternal _CustomActionResponse_default_instance_;
class CustomActionRunParam;
struct CustomActionRunParamDefaultTypeInternal;
extern CustomActionRunParamDefaultTypeInternal _CustomActionRunParam_default_instance_;
class CustomControllerRequest;
struct CustomControllerRequestDefaultTypeInternal;
extern CustomControllerRequestDefaultTypeInternal _CustomControllerRequest_default_instance_;
class CustomControllerResponse;
struct CustomControllerResponseDefaultTypeInternal;
extern CustomControllerResponseDefaultTypeInternal _CustomControllerResponse_default_instance_;
class CustomControllerSetOptionParam;
struct CustomControllerSetOptionParamDefaultTypeInternal;
extern CustomControllerSetOptionParamDefaultTypeInternal _CustomControllerSetOptionParam_default_instance_;
class CustomRecognizerAnalyzeParam;
struct CustomRecognizerAnalyzeParamDefaultTypeInternal;
extern CustomRecognizerAnalyzeParamDefaultTypeInternal _CustomRecognizerAnalyzeParam_default_instance_;
class CustomRecognizerAnalyzeResult;
struct CustomRecognizerAnalyzeResultDefaultTypeInternal;
extern CustomRecognizerAnalyzeResultDefaultTypeInternal _CustomRecognizerAnalyzeResult_default_instance_;
class CustomRecognizerRequest;
struct CustomRecognizerRequestDefaultTypeInternal;
extern CustomRecognizerRequestDefaultTypeInternal _CustomRecognizerRequest_default_instance_;
class CustomRecognizerResponse;
struct CustomRecognizerResponseDefaultTypeInternal;
extern CustomRecognizerResponseDefaultTypeInternal _CustomRecognizerResponse_default_instance_;
class ImageInfoResponse;
struct ImageInfoResponseDefaultTypeInternal;
extern ImageInfoResponseDefaultTypeInternal _ImageInfoResponse_default_instance_;
class InstancePostTaskRequest;
struct InstancePostTaskRequestDefaultTypeInternal;
extern InstancePostTaskRequestDefaultTypeInternal _InstancePostTaskRequest_default_instance_;
class InstanceSetTaskParamRequest;
struct InstanceSetTaskParamRequestDefaultTypeInternal;
extern InstanceSetTaskParamRequestDefaultTypeInternal _InstanceSetTaskParamRequest_default_instance_;
class SetGlobalOptionRequest;
struct SetGlobalOptionRequestDefaultTypeInternal;
extern SetGlobalOptionRequestDefaultTypeInternal _SetGlobalOptionRequest_default_instance_;
class SubmitCustomActionRequest;
struct SubmitCustomActionRequestDefaultTypeInternal;
extern SubmitCustomActionRequestDefaultTypeInternal _SubmitCustomActionRequest_default_instance_;
class SubmitCustomControllerRequest;
struct SubmitCustomControllerRequestDefaultTypeInternal;
extern SubmitCustomControllerRequestDefaultTypeInternal _SubmitCustomControllerRequest_default_instance_;
class SubmitCustomRecognizerRequest;
struct SubmitCustomRecognizerRequestDefaultTypeInternal;
extern SubmitCustomRecognizerRequestDefaultTypeInternal _SubmitCustomRecognizerRequest_default_instance_;
class SyncContextClickRequest;
struct SyncContextClickRequestDefaultTypeInternal;
extern SyncContextClickRequestDefaultTypeInternal _SyncContextClickRequest_default_instance_;
class SyncContextKeyRequest;
struct SyncContextKeyRequestDefaultTypeInternal;
extern SyncContextKeyRequestDefaultTypeInternal _SyncContextKeyRequest_default_instance_;
class SyncContextRunActionRequest;
struct SyncContextRunActionRequestDefaultTypeInternal;
extern SyncContextRunActionRequestDefaultTypeInternal _SyncContextRunActionRequest_default_instance_;
class SyncContextRunRecognizerRequest;
struct SyncContextRunRecognizerRequestDefaultTypeInternal;
extern SyncContextRunRecognizerRequestDefaultTypeInternal _SyncContextRunRecognizerRequest_default_instance_;
class SyncContextRunRecognizerResponse;
struct SyncContextRunRecognizerResponseDefaultTypeInternal;
extern SyncContextRunRecognizerResponseDefaultTypeInternal _SyncContextRunRecognizerResponse_default_instance_;
class SyncContextRunTaskRequest;
struct SyncContextRunTaskRequestDefaultTypeInternal;
extern SyncContextRunTaskRequestDefaultTypeInternal _SyncContextRunTaskRequest_default_instance_;
class SyncContextScreencapRequest;
struct SyncContextScreencapRequestDefaultTypeInternal;
extern SyncContextScreencapRequestDefaultTypeInternal _SyncContextScreencapRequest_default_instance_;
class SyncContextSwipeRequest;
struct SyncContextSwipeRequestDefaultTypeInternal;
extern SyncContextSwipeRequestDefaultTypeInternal _SyncContextSwipeRequest_default_instance_;
class SyncContextTouchRequest;
struct SyncContextTouchRequestDefaultTypeInternal;
extern SyncContextTouchRequestDefaultTypeInternal _SyncContextTouchRequest_default_instance_;
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> ::maarpc::AdbControllerRequest* Arena::CreateMaybeMessage<::maarpc::AdbControllerRequest>(Arena*);
template<> ::maarpc::ControllerGetImageRequest* Arena::CreateMaybeMessage<::maarpc::ControllerGetImageRequest>(Arena*);
template<> ::maarpc::ControllerPostClickRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostClickRequest>(Arena*);
template<> ::maarpc::ControllerPostKeyRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostKeyRequest>(Arena*);
template<> ::maarpc::ControllerPostSwipeRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostSwipeRequest>(Arena*);
template<> ::maarpc::ControllerPostTouchRequest* Arena::CreateMaybeMessage<::maarpc::ControllerPostTouchRequest>(Arena*);
template<> ::maarpc::ControllerSetOptionRequest* Arena::CreateMaybeMessage<::maarpc::ControllerSetOptionRequest>(Arena*);
template<> ::maarpc::CustomActionRequest* Arena::CreateMaybeMessage<::maarpc::CustomActionRequest>(Arena*);
template<> ::maarpc::CustomActionResponse* Arena::CreateMaybeMessage<::maarpc::CustomActionResponse>(Arena*);
template<> ::maarpc::CustomActionRunParam* Arena::CreateMaybeMessage<::maarpc::CustomActionRunParam>(Arena*);
template<> ::maarpc::CustomControllerRequest* Arena::CreateMaybeMessage<::maarpc::CustomControllerRequest>(Arena*);
template<> ::maarpc::CustomControllerResponse* Arena::CreateMaybeMessage<::maarpc::CustomControllerResponse>(Arena*);
template<> ::maarpc::CustomControllerSetOptionParam* Arena::CreateMaybeMessage<::maarpc::CustomControllerSetOptionParam>(Arena*);
template<> ::maarpc::CustomRecognizerAnalyzeParam* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerAnalyzeParam>(Arena*);
template<> ::maarpc::CustomRecognizerAnalyzeResult* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerAnalyzeResult>(Arena*);
template<> ::maarpc::CustomRecognizerRequest* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerRequest>(Arena*);
template<> ::maarpc::CustomRecognizerResponse* Arena::CreateMaybeMessage<::maarpc::CustomRecognizerResponse>(Arena*);
template<> ::maarpc::ImageInfoResponse* Arena::CreateMaybeMessage<::maarpc::ImageInfoResponse>(Arena*);
template<> ::maarpc::InstancePostTaskRequest* Arena::CreateMaybeMessage<::maarpc::InstancePostTaskRequest>(Arena*);
template<> ::maarpc::InstanceSetTaskParamRequest* Arena::CreateMaybeMessage<::maarpc::InstanceSetTaskParamRequest>(Arena*);
template<> ::maarpc::SetGlobalOptionRequest* Arena::CreateMaybeMessage<::maarpc::SetGlobalOptionRequest>(Arena*);
template<> ::maarpc::SubmitCustomActionRequest* Arena::CreateMaybeMessage<::maarpc::SubmitCustomActionRequest>(Arena*);
template<> ::maarpc::SubmitCustomControllerRequest* Arena::CreateMaybeMessage<::maarpc::SubmitCustomControllerRequest>(Arena*);
template<> ::maarpc::SubmitCustomRecognizerRequest* Arena::CreateMaybeMessage<::maarpc::SubmitCustomRecognizerRequest>(Arena*);
template<> ::maarpc::SyncContextClickRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextClickRequest>(Arena*);
template<> ::maarpc::SyncContextKeyRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextKeyRequest>(Arena*);
template<> ::maarpc::SyncContextRunActionRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextRunActionRequest>(Arena*);
template<> ::maarpc::SyncContextRunRecognizerRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextRunRecognizerRequest>(Arena*);
template<> ::maarpc::SyncContextRunRecognizerResponse* Arena::CreateMaybeMessage<::maarpc::SyncContextRunRecognizerResponse>(Arena*);
template<> ::maarpc::SyncContextRunTaskRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextRunTaskRequest>(Arena*);
template<> ::maarpc::SyncContextScreencapRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextScreencapRequest>(Arena*);
template<> ::maarpc::SyncContextSwipeRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextSwipeRequest>(Arena*);
template<> ::maarpc::SyncContextTouchRequest* Arena::CreateMaybeMessage<::maarpc::SyncContextTouchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace maarpc {

// ===================================================================

class SetGlobalOptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SetGlobalOptionRequest) */ {
 public:
  inline SetGlobalOptionRequest() : SetGlobalOptionRequest(nullptr) {}
  ~SetGlobalOptionRequest() override;
  explicit PROTOBUF_CONSTEXPR SetGlobalOptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGlobalOptionRequest(const SetGlobalOptionRequest& from);
  SetGlobalOptionRequest(SetGlobalOptionRequest&& from) noexcept
    : SetGlobalOptionRequest() {
    *this = ::std::move(from);
  }

  inline SetGlobalOptionRequest& operator=(const SetGlobalOptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGlobalOptionRequest& operator=(SetGlobalOptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGlobalOptionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionCase {
    kLogging = 1,
    kDebugMode = 2,
    OPTION_NOT_SET = 0,
  };

  static inline const SetGlobalOptionRequest* internal_default_instance() {
    return reinterpret_cast<const SetGlobalOptionRequest*>(
               &_SetGlobalOptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetGlobalOptionRequest& a, SetGlobalOptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGlobalOptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGlobalOptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGlobalOptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGlobalOptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGlobalOptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetGlobalOptionRequest& from) {
    SetGlobalOptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGlobalOptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SetGlobalOptionRequest";
  }
  protected:
  explicit SetGlobalOptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoggingFieldNumber = 1,
    kDebugModeFieldNumber = 2,
  };
  // string logging = 1;
  bool has_logging() const;
  private:
  bool _internal_has_logging() const;
  public:
  void clear_logging();
  const std::string& logging() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logging(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logging();
  PROTOBUF_NODISCARD std::string* release_logging();
  void set_allocated_logging(std::string* logging);
  private:
  const std::string& _internal_logging() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logging(const std::string& value);
  std::string* _internal_mutable_logging();
  public:

  // bool debug_mode = 2;
  bool has_debug_mode() const;
  private:
  bool _internal_has_debug_mode() const;
  public:
  void clear_debug_mode();
  bool debug_mode() const;
  void set_debug_mode(bool value);
  private:
  bool _internal_debug_mode() const;
  void _internal_set_debug_mode(bool value);
  public:

  void clear_option();
  OptionCase option_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.SetGlobalOptionRequest)
 private:
  class _Internal;
  void set_has_logging();
  void set_has_debug_mode();

  inline bool has_option() const;
  inline void clear_has_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionUnion {
      constexpr OptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logging_;
      bool debug_mode_;
    } option_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ImageInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ImageInfoResponse) */ {
 public:
  inline ImageInfoResponse() : ImageInfoResponse(nullptr) {}
  ~ImageInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ImageInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoResponse(const ImageInfoResponse& from);
  ImageInfoResponse(ImageInfoResponse&& from) noexcept
    : ImageInfoResponse() {
    *this = ::std::move(from);
  }

  inline ImageInfoResponse& operator=(const ImageInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoResponse& operator=(ImageInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ImageInfoResponse*>(
               &_ImageInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageInfoResponse& a, ImageInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageInfoResponse& from) {
    ImageInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ImageInfoResponse";
  }
  protected:
  explicit ImageInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .maarpc.Size size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::maarpc::Size& size() const;
  PROTOBUF_NODISCARD ::maarpc::Size* release_size();
  ::maarpc::Size* mutable_size();
  void set_allocated_size(::maarpc::Size* size);
  private:
  const ::maarpc::Size& _internal_size() const;
  ::maarpc::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::maarpc::Size* size);
  ::maarpc::Size* unsafe_arena_release_size();

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.ImageInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Size* size_;
    int32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class AdbControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.AdbControllerRequest) */ {
 public:
  inline AdbControllerRequest() : AdbControllerRequest(nullptr) {}
  ~AdbControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR AdbControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdbControllerRequest(const AdbControllerRequest& from);
  AdbControllerRequest(AdbControllerRequest&& from) noexcept
    : AdbControllerRequest() {
    *this = ::std::move(from);
  }

  inline AdbControllerRequest& operator=(const AdbControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdbControllerRequest& operator=(AdbControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdbControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdbControllerRequest* internal_default_instance() {
    return reinterpret_cast<const AdbControllerRequest*>(
               &_AdbControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdbControllerRequest& a, AdbControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdbControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdbControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdbControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdbControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdbControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdbControllerRequest& from) {
    AdbControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdbControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.AdbControllerRequest";
  }
  protected:
  explicit AdbControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdbPathFieldNumber = 2,
    kAdbSerialFieldNumber = 3,
    kAdbConfigFieldNumber = 5,
    kCallbackFieldNumber = 1,
    kAdbTypeFieldNumber = 4,
  };
  // optional string adb_path = 2;
  bool has_adb_path() const;
  private:
  bool _internal_has_adb_path() const;
  public:
  void clear_adb_path();
  const std::string& adb_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_path();
  PROTOBUF_NODISCARD std::string* release_adb_path();
  void set_allocated_adb_path(std::string* adb_path);
  private:
  const std::string& _internal_adb_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_path(const std::string& value);
  std::string* _internal_mutable_adb_path();
  public:

  // optional string adb_serial = 3;
  bool has_adb_serial() const;
  private:
  bool _internal_has_adb_serial() const;
  public:
  void clear_adb_serial();
  const std::string& adb_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_serial();
  PROTOBUF_NODISCARD std::string* release_adb_serial();
  void set_allocated_adb_serial(std::string* adb_serial);
  private:
  const std::string& _internal_adb_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_serial(const std::string& value);
  std::string* _internal_mutable_adb_serial();
  public:

  // optional string adb_config = 5;
  bool has_adb_config() const;
  private:
  bool _internal_has_adb_config() const;
  public:
  void clear_adb_config();
  const std::string& adb_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adb_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adb_config();
  PROTOBUF_NODISCARD std::string* release_adb_config();
  void set_allocated_adb_config(std::string* adb_config);
  private:
  const std::string& _internal_adb_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adb_config(const std::string& value);
  std::string* _internal_mutable_adb_config();
  public:

  // optional .maarpc.Id callback = 1;
  bool has_callback() const;
  private:
  bool _internal_has_callback() const;
  public:
  void clear_callback();
  const ::maarpc::Id& callback() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_callback();
  ::maarpc::Id* mutable_callback();
  void set_allocated_callback(::maarpc::Id* callback);
  private:
  const ::maarpc::Id& _internal_callback() const;
  ::maarpc::Id* _internal_mutable_callback();
  public:
  void unsafe_arena_set_allocated_callback(
      ::maarpc::Id* callback);
  ::maarpc::Id* unsafe_arena_release_callback();

  // optional uint32 adb_type = 4;
  bool has_adb_type() const;
  private:
  bool _internal_has_adb_type() const;
  public:
  void clear_adb_type();
  uint32_t adb_type() const;
  void set_adb_type(uint32_t value);
  private:
  uint32_t _internal_adb_type() const;
  void _internal_set_adb_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.AdbControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_serial_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adb_config_;
    ::maarpc::Id* callback_;
    uint32_t adb_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomControllerRequest) */ {
 public:
  inline CustomControllerRequest() : CustomControllerRequest(nullptr) {}
  ~CustomControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR CustomControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomControllerRequest(const CustomControllerRequest& from);
  CustomControllerRequest(CustomControllerRequest&& from) noexcept
    : CustomControllerRequest() {
    *this = ::std::move(from);
  }

  inline CustomControllerRequest& operator=(const CustomControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomControllerRequest& operator=(CustomControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomControllerRequest* internal_default_instance() {
    return reinterpret_cast<const CustomControllerRequest*>(
               &_CustomControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomControllerRequest& a, CustomControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomControllerRequest& from) {
    CustomControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomControllerRequest";
  }
  protected:
  explicit CustomControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbackFieldNumber = 1,
    kCtrlFieldNumber = 2,
  };
  // optional .maarpc.Id callback = 1;
  bool has_callback() const;
  private:
  bool _internal_has_callback() const;
  public:
  void clear_callback();
  const ::maarpc::Id& callback() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_callback();
  ::maarpc::Id* mutable_callback();
  void set_allocated_callback(::maarpc::Id* callback);
  private:
  const ::maarpc::Id& _internal_callback() const;
  ::maarpc::Id* _internal_mutable_callback();
  public:
  void unsafe_arena_set_allocated_callback(
      ::maarpc::Id* callback);
  ::maarpc::Id* unsafe_arena_release_callback();

  // optional .maarpc.Id ctrl = 2;
  bool has_ctrl() const;
  private:
  bool _internal_has_ctrl() const;
  public:
  void clear_ctrl();
  const ::maarpc::Id& ctrl() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_ctrl();
  ::maarpc::Id* mutable_ctrl();
  void set_allocated_ctrl(::maarpc::Id* ctrl);
  private:
  const ::maarpc::Id& _internal_ctrl() const;
  ::maarpc::Id* _internal_mutable_ctrl();
  public:
  void unsafe_arena_set_allocated_ctrl(
      ::maarpc::Id* ctrl);
  ::maarpc::Id* unsafe_arena_release_ctrl();

  // @@protoc_insertion_point(class_scope:maarpc.CustomControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Id* callback_;
    ::maarpc::Id* ctrl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomControllerSetOptionParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomControllerSetOptionParam) */ {
 public:
  inline CustomControllerSetOptionParam() : CustomControllerSetOptionParam(nullptr) {}
  ~CustomControllerSetOptionParam() override;
  explicit PROTOBUF_CONSTEXPR CustomControllerSetOptionParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomControllerSetOptionParam(const CustomControllerSetOptionParam& from);
  CustomControllerSetOptionParam(CustomControllerSetOptionParam&& from) noexcept
    : CustomControllerSetOptionParam() {
    *this = ::std::move(from);
  }

  inline CustomControllerSetOptionParam& operator=(const CustomControllerSetOptionParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomControllerSetOptionParam& operator=(CustomControllerSetOptionParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomControllerSetOptionParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomControllerSetOptionParam* internal_default_instance() {
    return reinterpret_cast<const CustomControllerSetOptionParam*>(
               &_CustomControllerSetOptionParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CustomControllerSetOptionParam& a, CustomControllerSetOptionParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomControllerSetOptionParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomControllerSetOptionParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomControllerSetOptionParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomControllerSetOptionParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomControllerSetOptionParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomControllerSetOptionParam& from) {
    CustomControllerSetOptionParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomControllerSetOptionParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomControllerSetOptionParam";
  }
  protected:
  explicit CustomControllerSetOptionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  int32_t key() const;
  void set_key(int32_t value);
  private:
  int32_t _internal_key() const;
  void _internal_set_key(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomControllerSetOptionParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int32_t key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomControllerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomControllerResponse) */ {
 public:
  inline CustomControllerResponse() : CustomControllerResponse(nullptr) {}
  ~CustomControllerResponse() override;
  explicit PROTOBUF_CONSTEXPR CustomControllerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomControllerResponse(const CustomControllerResponse& from);
  CustomControllerResponse(CustomControllerResponse&& from) noexcept
    : CustomControllerResponse() {
    *this = ::std::move(from);
  }

  inline CustomControllerResponse& operator=(const CustomControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomControllerResponse& operator=(CustomControllerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomControllerResponse& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kConnect = 101,
    kClick = 102,
    kSwipe = 103,
    kKey = 104,
    kTouchDown = 105,
    kTouchMove = 106,
    kTouchUp = 107,
    kStart = 108,
    kStop = 109,
    kResolution = 110,
    kImage = 111,
    kUuid = 112,
    kSetOption = 200,
    COMMAND_NOT_SET = 0,
  };

  static inline const CustomControllerResponse* internal_default_instance() {
    return reinterpret_cast<const CustomControllerResponse*>(
               &_CustomControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CustomControllerResponse& a, CustomControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomControllerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomControllerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomControllerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomControllerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomControllerResponse& from) {
    CustomControllerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomControllerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomControllerResponse";
  }
  protected:
  explicit CustomControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlFieldNumber = 1,
    kIdFieldNumber = 2,
    kConnectFieldNumber = 101,
    kClickFieldNumber = 102,
    kSwipeFieldNumber = 103,
    kKeyFieldNumber = 104,
    kTouchDownFieldNumber = 105,
    kTouchMoveFieldNumber = 106,
    kTouchUpFieldNumber = 107,
    kStartFieldNumber = 108,
    kStopFieldNumber = 109,
    kResolutionFieldNumber = 110,
    kImageFieldNumber = 111,
    kUuidFieldNumber = 112,
    kSetOptionFieldNumber = 200,
  };
  // optional .maarpc.Id ctrl = 1;
  bool has_ctrl() const;
  private:
  bool _internal_has_ctrl() const;
  public:
  void clear_ctrl();
  const ::maarpc::Id& ctrl() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_ctrl();
  ::maarpc::Id* mutable_ctrl();
  void set_allocated_ctrl(::maarpc::Id* ctrl);
  private:
  const ::maarpc::Id& _internal_ctrl() const;
  ::maarpc::Id* _internal_mutable_ctrl();
  public:
  void unsafe_arena_set_allocated_ctrl(
      ::maarpc::Id* ctrl);
  ::maarpc::Id* unsafe_arena_release_ctrl();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // bool connect = 101;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  bool connect() const;
  void set_connect(bool value);
  private:
  bool _internal_connect() const;
  void _internal_set_connect(bool value);
  public:

  // .maarpc.ClickParam click = 102;
  bool has_click() const;
  private:
  bool _internal_has_click() const;
  public:
  void clear_click();
  const ::maarpc::ClickParam& click() const;
  PROTOBUF_NODISCARD ::maarpc::ClickParam* release_click();
  ::maarpc::ClickParam* mutable_click();
  void set_allocated_click(::maarpc::ClickParam* click);
  private:
  const ::maarpc::ClickParam& _internal_click() const;
  ::maarpc::ClickParam* _internal_mutable_click();
  public:
  void unsafe_arena_set_allocated_click(
      ::maarpc::ClickParam* click);
  ::maarpc::ClickParam* unsafe_arena_release_click();

  // .maarpc.SwipeParam swipe = 103;
  bool has_swipe() const;
  private:
  bool _internal_has_swipe() const;
  public:
  void clear_swipe();
  const ::maarpc::SwipeParam& swipe() const;
  PROTOBUF_NODISCARD ::maarpc::SwipeParam* release_swipe();
  ::maarpc::SwipeParam* mutable_swipe();
  void set_allocated_swipe(::maarpc::SwipeParam* swipe);
  private:
  const ::maarpc::SwipeParam& _internal_swipe() const;
  ::maarpc::SwipeParam* _internal_mutable_swipe();
  public:
  void unsafe_arena_set_allocated_swipe(
      ::maarpc::SwipeParam* swipe);
  ::maarpc::SwipeParam* unsafe_arena_release_swipe();

  // .maarpc.KeyParam key = 104;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::maarpc::KeyParam& key() const;
  PROTOBUF_NODISCARD ::maarpc::KeyParam* release_key();
  ::maarpc::KeyParam* mutable_key();
  void set_allocated_key(::maarpc::KeyParam* key);
  private:
  const ::maarpc::KeyParam& _internal_key() const;
  ::maarpc::KeyParam* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::maarpc::KeyParam* key);
  ::maarpc::KeyParam* unsafe_arena_release_key();

  // .maarpc.TouchParam touch_down = 105;
  bool has_touch_down() const;
  private:
  bool _internal_has_touch_down() const;
  public:
  void clear_touch_down();
  const ::maarpc::TouchParam& touch_down() const;
  PROTOBUF_NODISCARD ::maarpc::TouchParam* release_touch_down();
  ::maarpc::TouchParam* mutable_touch_down();
  void set_allocated_touch_down(::maarpc::TouchParam* touch_down);
  private:
  const ::maarpc::TouchParam& _internal_touch_down() const;
  ::maarpc::TouchParam* _internal_mutable_touch_down();
  public:
  void unsafe_arena_set_allocated_touch_down(
      ::maarpc::TouchParam* touch_down);
  ::maarpc::TouchParam* unsafe_arena_release_touch_down();

  // .maarpc.TouchParam touch_move = 106;
  bool has_touch_move() const;
  private:
  bool _internal_has_touch_move() const;
  public:
  void clear_touch_move();
  const ::maarpc::TouchParam& touch_move() const;
  PROTOBUF_NODISCARD ::maarpc::TouchParam* release_touch_move();
  ::maarpc::TouchParam* mutable_touch_move();
  void set_allocated_touch_move(::maarpc::TouchParam* touch_move);
  private:
  const ::maarpc::TouchParam& _internal_touch_move() const;
  ::maarpc::TouchParam* _internal_mutable_touch_move();
  public:
  void unsafe_arena_set_allocated_touch_move(
      ::maarpc::TouchParam* touch_move);
  ::maarpc::TouchParam* unsafe_arena_release_touch_move();

  // .maarpc.TouchParam touch_up = 107;
  bool has_touch_up() const;
  private:
  bool _internal_has_touch_up() const;
  public:
  void clear_touch_up();
  const ::maarpc::TouchParam& touch_up() const;
  PROTOBUF_NODISCARD ::maarpc::TouchParam* release_touch_up();
  ::maarpc::TouchParam* mutable_touch_up();
  void set_allocated_touch_up(::maarpc::TouchParam* touch_up);
  private:
  const ::maarpc::TouchParam& _internal_touch_up() const;
  ::maarpc::TouchParam* _internal_mutable_touch_up();
  public:
  void unsafe_arena_set_allocated_touch_up(
      ::maarpc::TouchParam* touch_up);
  ::maarpc::TouchParam* unsafe_arena_release_touch_up();

  // string start = 108;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_NODISCARD std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string stop = 109;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const std::string& stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop();
  PROTOBUF_NODISCARD std::string* release_stop();
  void set_allocated_stop(std::string* stop);
  private:
  const std::string& _internal_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop(const std::string& value);
  std::string* _internal_mutable_stop();
  public:

  // bool resolution = 110;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  bool resolution() const;
  void set_resolution(bool value);
  private:
  bool _internal_resolution() const;
  void _internal_set_resolution(bool value);
  public:

  // .maarpc.Handle image = 111;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::maarpc::Handle& image() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_image();
  ::maarpc::Handle* mutable_image();
  void set_allocated_image(::maarpc::Handle* image);
  private:
  const ::maarpc::Handle& _internal_image() const;
  ::maarpc::Handle* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::maarpc::Handle* image);
  ::maarpc::Handle* unsafe_arena_release_image();

  // bool uuid = 112;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  bool uuid() const;
  void set_uuid(bool value);
  private:
  bool _internal_uuid() const;
  void _internal_set_uuid(bool value);
  public:

  // .maarpc.CustomControllerSetOptionParam set_option = 200;
  bool has_set_option() const;
  private:
  bool _internal_has_set_option() const;
  public:
  void clear_set_option();
  const ::maarpc::CustomControllerSetOptionParam& set_option() const;
  PROTOBUF_NODISCARD ::maarpc::CustomControllerSetOptionParam* release_set_option();
  ::maarpc::CustomControllerSetOptionParam* mutable_set_option();
  void set_allocated_set_option(::maarpc::CustomControllerSetOptionParam* set_option);
  private:
  const ::maarpc::CustomControllerSetOptionParam& _internal_set_option() const;
  ::maarpc::CustomControllerSetOptionParam* _internal_mutable_set_option();
  public:
  void unsafe_arena_set_allocated_set_option(
      ::maarpc::CustomControllerSetOptionParam* set_option);
  ::maarpc::CustomControllerSetOptionParam* unsafe_arena_release_set_option();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomControllerResponse)
 private:
  class _Internal;
  void set_has_connect();
  void set_has_click();
  void set_has_swipe();
  void set_has_key();
  void set_has_touch_down();
  void set_has_touch_move();
  void set_has_touch_up();
  void set_has_start();
  void set_has_stop();
  void set_has_resolution();
  void set_has_image();
  void set_has_uuid();
  void set_has_set_option();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Id* ctrl_;
    ::maarpc::Id* id_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool connect_;
      ::maarpc::ClickParam* click_;
      ::maarpc::SwipeParam* swipe_;
      ::maarpc::KeyParam* key_;
      ::maarpc::TouchParam* touch_down_;
      ::maarpc::TouchParam* touch_move_;
      ::maarpc::TouchParam* touch_up_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_;
      bool resolution_;
      ::maarpc::Handle* image_;
      bool uuid_;
      ::maarpc::CustomControllerSetOptionParam* set_option_;
    } command_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SubmitCustomControllerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SubmitCustomControllerRequest) */ {
 public:
  inline SubmitCustomControllerRequest() : SubmitCustomControllerRequest(nullptr) {}
  ~SubmitCustomControllerRequest() override;
  explicit PROTOBUF_CONSTEXPR SubmitCustomControllerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitCustomControllerRequest(const SubmitCustomControllerRequest& from);
  SubmitCustomControllerRequest(SubmitCustomControllerRequest&& from) noexcept
    : SubmitCustomControllerRequest() {
    *this = ::std::move(from);
  }

  inline SubmitCustomControllerRequest& operator=(const SubmitCustomControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitCustomControllerRequest& operator=(SubmitCustomControllerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitCustomControllerRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kResolution = 101,
    kUuid = 102,
    RESULT_NOT_SET = 0,
  };

  static inline const SubmitCustomControllerRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitCustomControllerRequest*>(
               &_SubmitCustomControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubmitCustomControllerRequest& a, SubmitCustomControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitCustomControllerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitCustomControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitCustomControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitCustomControllerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitCustomControllerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmitCustomControllerRequest& from) {
    SubmitCustomControllerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitCustomControllerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SubmitCustomControllerRequest";
  }
  protected:
  explicit SubmitCustomControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kIdFieldNumber = 2,
    kOkFieldNumber = 3,
    kResolutionFieldNumber = 101,
    kUuidFieldNumber = 102,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // optional bool ok = 3;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // .maarpc.Size resolution = 101;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::maarpc::Size& resolution() const;
  PROTOBUF_NODISCARD ::maarpc::Size* release_resolution();
  ::maarpc::Size* mutable_resolution();
  void set_allocated_resolution(::maarpc::Size* resolution);
  private:
  const ::maarpc::Size& _internal_resolution() const;
  ::maarpc::Size* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::maarpc::Size* resolution);
  ::maarpc::Size* unsafe_arena_release_resolution();

  // string uuid = 102;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.SubmitCustomControllerRequest)
 private:
  class _Internal;
  void set_has_resolution();
  void set_has_uuid();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::Id* id_;
    bool ok_;
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::Size* resolution_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    } result_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ControllerSetOptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerSetOptionRequest) */ {
 public:
  inline ControllerSetOptionRequest() : ControllerSetOptionRequest(nullptr) {}
  ~ControllerSetOptionRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerSetOptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerSetOptionRequest(const ControllerSetOptionRequest& from);
  ControllerSetOptionRequest(ControllerSetOptionRequest&& from) noexcept
    : ControllerSetOptionRequest() {
    *this = ::std::move(from);
  }

  inline ControllerSetOptionRequest& operator=(const ControllerSetOptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerSetOptionRequest& operator=(ControllerSetOptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerSetOptionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionCase {
    kLongSide = 1,
    kShortSide = 2,
    kDefPackageEntry = 3,
    kDefPackage = 4,
    OPTION_NOT_SET = 0,
  };

  static inline const ControllerSetOptionRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerSetOptionRequest*>(
               &_ControllerSetOptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ControllerSetOptionRequest& a, ControllerSetOptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerSetOptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerSetOptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerSetOptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerSetOptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerSetOptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerSetOptionRequest& from) {
    ControllerSetOptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerSetOptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerSetOptionRequest";
  }
  protected:
  explicit ControllerSetOptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongSideFieldNumber = 1,
    kShortSideFieldNumber = 2,
    kDefPackageEntryFieldNumber = 3,
    kDefPackageFieldNumber = 4,
  };
  // int32 long_side = 1;
  bool has_long_side() const;
  private:
  bool _internal_has_long_side() const;
  public:
  void clear_long_side();
  int32_t long_side() const;
  void set_long_side(int32_t value);
  private:
  int32_t _internal_long_side() const;
  void _internal_set_long_side(int32_t value);
  public:

  // int32 short_side = 2;
  bool has_short_side() const;
  private:
  bool _internal_has_short_side() const;
  public:
  void clear_short_side();
  int32_t short_side() const;
  void set_short_side(int32_t value);
  private:
  int32_t _internal_short_side() const;
  void _internal_set_short_side(int32_t value);
  public:

  // string def_package_entry = 3;
  bool has_def_package_entry() const;
  private:
  bool _internal_has_def_package_entry() const;
  public:
  void clear_def_package_entry();
  const std::string& def_package_entry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_def_package_entry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_def_package_entry();
  PROTOBUF_NODISCARD std::string* release_def_package_entry();
  void set_allocated_def_package_entry(std::string* def_package_entry);
  private:
  const std::string& _internal_def_package_entry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_def_package_entry(const std::string& value);
  std::string* _internal_mutable_def_package_entry();
  public:

  // string def_package = 4;
  bool has_def_package() const;
  private:
  bool _internal_has_def_package() const;
  public:
  void clear_def_package();
  const std::string& def_package() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_def_package(ArgT0&& arg0, ArgT... args);
  std::string* mutable_def_package();
  PROTOBUF_NODISCARD std::string* release_def_package();
  void set_allocated_def_package(std::string* def_package);
  private:
  const std::string& _internal_def_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_def_package(const std::string& value);
  std::string* _internal_mutable_def_package();
  public:

  void clear_option();
  OptionCase option_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.ControllerSetOptionRequest)
 private:
  class _Internal;
  void set_has_long_side();
  void set_has_short_side();
  void set_has_def_package_entry();
  void set_has_def_package();

  inline bool has_option() const;
  inline void clear_has_option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionUnion {
      constexpr OptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t long_side_;
      int32_t short_side_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr def_package_entry_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr def_package_;
    } option_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostClickRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostClickRequest) */ {
 public:
  inline ControllerPostClickRequest() : ControllerPostClickRequest(nullptr) {}
  ~ControllerPostClickRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostClickRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostClickRequest(const ControllerPostClickRequest& from);
  ControllerPostClickRequest(ControllerPostClickRequest&& from) noexcept
    : ControllerPostClickRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostClickRequest& operator=(const ControllerPostClickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostClickRequest& operator=(ControllerPostClickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostClickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostClickRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostClickRequest*>(
               &_ControllerPostClickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ControllerPostClickRequest& a, ControllerPostClickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostClickRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostClickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostClickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostClickRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostClickRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostClickRequest& from) {
    ControllerPostClickRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostClickRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostClickRequest";
  }
  protected:
  explicit ControllerPostClickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.ClickParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::ClickParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::ClickParam* release_param();
  ::maarpc::ClickParam* mutable_param();
  void set_allocated_param(::maarpc::ClickParam* param);
  private:
  const ::maarpc::ClickParam& _internal_param() const;
  ::maarpc::ClickParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::ClickParam* param);
  ::maarpc::ClickParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostClickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::ClickParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostSwipeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostSwipeRequest) */ {
 public:
  inline ControllerPostSwipeRequest() : ControllerPostSwipeRequest(nullptr) {}
  ~ControllerPostSwipeRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostSwipeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostSwipeRequest(const ControllerPostSwipeRequest& from);
  ControllerPostSwipeRequest(ControllerPostSwipeRequest&& from) noexcept
    : ControllerPostSwipeRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostSwipeRequest& operator=(const ControllerPostSwipeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostSwipeRequest& operator=(ControllerPostSwipeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostSwipeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostSwipeRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostSwipeRequest*>(
               &_ControllerPostSwipeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ControllerPostSwipeRequest& a, ControllerPostSwipeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostSwipeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostSwipeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostSwipeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostSwipeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostSwipeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostSwipeRequest& from) {
    ControllerPostSwipeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostSwipeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostSwipeRequest";
  }
  protected:
  explicit ControllerPostSwipeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.SwipeParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::SwipeParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::SwipeParam* release_param();
  ::maarpc::SwipeParam* mutable_param();
  void set_allocated_param(::maarpc::SwipeParam* param);
  private:
  const ::maarpc::SwipeParam& _internal_param() const;
  ::maarpc::SwipeParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::SwipeParam* param);
  ::maarpc::SwipeParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostSwipeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::SwipeParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostKeyRequest) */ {
 public:
  inline ControllerPostKeyRequest() : ControllerPostKeyRequest(nullptr) {}
  ~ControllerPostKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostKeyRequest(const ControllerPostKeyRequest& from);
  ControllerPostKeyRequest(ControllerPostKeyRequest&& from) noexcept
    : ControllerPostKeyRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostKeyRequest& operator=(const ControllerPostKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostKeyRequest& operator=(ControllerPostKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostKeyRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostKeyRequest*>(
               &_ControllerPostKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ControllerPostKeyRequest& a, ControllerPostKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostKeyRequest& from) {
    ControllerPostKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostKeyRequest";
  }
  protected:
  explicit ControllerPostKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.KeyParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::KeyParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::KeyParam* release_param();
  ::maarpc::KeyParam* mutable_param();
  void set_allocated_param(::maarpc::KeyParam* param);
  private:
  const ::maarpc::KeyParam& _internal_param() const;
  ::maarpc::KeyParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::KeyParam* param);
  ::maarpc::KeyParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::KeyParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ControllerPostTouchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerPostTouchRequest) */ {
 public:
  inline ControllerPostTouchRequest() : ControllerPostTouchRequest(nullptr) {}
  ~ControllerPostTouchRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerPostTouchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerPostTouchRequest(const ControllerPostTouchRequest& from);
  ControllerPostTouchRequest(ControllerPostTouchRequest&& from) noexcept
    : ControllerPostTouchRequest() {
    *this = ::std::move(from);
  }

  inline ControllerPostTouchRequest& operator=(const ControllerPostTouchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerPostTouchRequest& operator=(ControllerPostTouchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerPostTouchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerPostTouchRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerPostTouchRequest*>(
               &_ControllerPostTouchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ControllerPostTouchRequest& a, ControllerPostTouchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerPostTouchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerPostTouchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerPostTouchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerPostTouchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerPostTouchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerPostTouchRequest& from) {
    ControllerPostTouchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerPostTouchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerPostTouchRequest";
  }
  protected:
  explicit ControllerPostTouchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.TouchParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::TouchParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::TouchParam* release_param();
  ::maarpc::TouchParam* mutable_param();
  void set_allocated_param(::maarpc::TouchParam* param);
  private:
  const ::maarpc::TouchParam& _internal_param() const;
  ::maarpc::TouchParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::TouchParam* param);
  ::maarpc::TouchParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerPostTouchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::TouchParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class ControllerGetImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.ControllerGetImageRequest) */ {
 public:
  inline ControllerGetImageRequest() : ControllerGetImageRequest(nullptr) {}
  ~ControllerGetImageRequest() override;
  explicit PROTOBUF_CONSTEXPR ControllerGetImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerGetImageRequest(const ControllerGetImageRequest& from);
  ControllerGetImageRequest(ControllerGetImageRequest&& from) noexcept
    : ControllerGetImageRequest() {
    *this = ::std::move(from);
  }

  inline ControllerGetImageRequest& operator=(const ControllerGetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerGetImageRequest& operator=(ControllerGetImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerGetImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerGetImageRequest* internal_default_instance() {
    return reinterpret_cast<const ControllerGetImageRequest*>(
               &_ControllerGetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ControllerGetImageRequest& a, ControllerGetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerGetImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerGetImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerGetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerGetImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerGetImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerGetImageRequest& from) {
    ControllerGetImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerGetImageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.ControllerGetImageRequest";
  }
  protected:
  explicit ControllerGetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Handle image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::maarpc::Handle& image() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_image();
  ::maarpc::Handle* mutable_image();
  void set_allocated_image(::maarpc::Handle* image);
  private:
  const ::maarpc::Handle& _internal_image() const;
  ::maarpc::Handle* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::maarpc::Handle* image);
  ::maarpc::Handle* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:maarpc.ControllerGetImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::Handle* image_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerRequest) */ {
 public:
  inline CustomRecognizerRequest() : CustomRecognizerRequest(nullptr) {}
  ~CustomRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerRequest(const CustomRecognizerRequest& from);
  CustomRecognizerRequest(CustomRecognizerRequest&& from) noexcept
    : CustomRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerRequest& operator=(const CustomRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerRequest& operator=(CustomRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerRequest*>(
               &_CustomRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CustomRecognizerRequest& a, CustomRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerRequest& from) {
    CustomRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerRequest";
  }
  protected:
  explicit CustomRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHandleFieldNumber = 1,
    kRecoFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Id reco = 3;
  bool has_reco() const;
  private:
  bool _internal_has_reco() const;
  public:
  void clear_reco();
  const ::maarpc::Id& reco() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_reco();
  ::maarpc::Id* mutable_reco();
  void set_allocated_reco(::maarpc::Id* reco);
  private:
  const ::maarpc::Id& _internal_reco() const;
  ::maarpc::Id* _internal_mutable_reco();
  public:
  void unsafe_arena_set_allocated_reco(
      ::maarpc::Id* reco);
  ::maarpc::Id* unsafe_arena_release_reco();

  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::maarpc::Handle* handle_;
    ::maarpc::Id* reco_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerAnalyzeParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerAnalyzeParam) */ {
 public:
  inline CustomRecognizerAnalyzeParam() : CustomRecognizerAnalyzeParam(nullptr) {}
  ~CustomRecognizerAnalyzeParam() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerAnalyzeParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerAnalyzeParam(const CustomRecognizerAnalyzeParam& from);
  CustomRecognizerAnalyzeParam(CustomRecognizerAnalyzeParam&& from) noexcept
    : CustomRecognizerAnalyzeParam() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerAnalyzeParam& operator=(const CustomRecognizerAnalyzeParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerAnalyzeParam& operator=(CustomRecognizerAnalyzeParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerAnalyzeParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomRecognizerAnalyzeParam* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerAnalyzeParam*>(
               &_CustomRecognizerAnalyzeParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CustomRecognizerAnalyzeParam& a, CustomRecognizerAnalyzeParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerAnalyzeParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerAnalyzeParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerAnalyzeParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerAnalyzeParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerAnalyzeParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerAnalyzeParam& from) {
    CustomRecognizerAnalyzeParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerAnalyzeParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerAnalyzeParam";
  }
  protected:
  explicit CustomRecognizerAnalyzeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 3,
    kParamFieldNumber = 4,
    kContextFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // optional string task = 3;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 4;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional .maarpc.Handle context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::maarpc::Handle& context() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_context();
  ::maarpc::Handle* mutable_context();
  void set_allocated_context(::maarpc::Handle* context);
  private:
  const ::maarpc::Handle& _internal_context() const;
  ::maarpc::Handle* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::maarpc::Handle* context);
  ::maarpc::Handle* unsafe_arena_release_context();

  // optional .maarpc.Handle image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::maarpc::Handle& image() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_image();
  ::maarpc::Handle* mutable_image();
  void set_allocated_image(::maarpc::Handle* image);
  private:
  const ::maarpc::Handle& _internal_image() const;
  ::maarpc::Handle* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::maarpc::Handle* image);
  ::maarpc::Handle* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerAnalyzeParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::maarpc::Handle* context_;
    ::maarpc::Handle* image_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerResponse) */ {
 public:
  inline CustomRecognizerResponse() : CustomRecognizerResponse(nullptr) {}
  ~CustomRecognizerResponse() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerResponse(const CustomRecognizerResponse& from);
  CustomRecognizerResponse(CustomRecognizerResponse&& from) noexcept
    : CustomRecognizerResponse() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerResponse& operator=(const CustomRecognizerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerResponse& operator=(CustomRecognizerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerResponse& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kAnalyze = 101,
    COMMAND_NOT_SET = 0,
  };

  static inline const CustomRecognizerResponse* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerResponse*>(
               &_CustomRecognizerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CustomRecognizerResponse& a, CustomRecognizerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerResponse& from) {
    CustomRecognizerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerResponse";
  }
  protected:
  explicit CustomRecognizerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecoFieldNumber = 1,
    kIdFieldNumber = 2,
    kAnalyzeFieldNumber = 101,
  };
  // optional .maarpc.Id reco = 1;
  bool has_reco() const;
  private:
  bool _internal_has_reco() const;
  public:
  void clear_reco();
  const ::maarpc::Id& reco() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_reco();
  ::maarpc::Id* mutable_reco();
  void set_allocated_reco(::maarpc::Id* reco);
  private:
  const ::maarpc::Id& _internal_reco() const;
  ::maarpc::Id* _internal_mutable_reco();
  public:
  void unsafe_arena_set_allocated_reco(
      ::maarpc::Id* reco);
  ::maarpc::Id* unsafe_arena_release_reco();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // .maarpc.CustomRecognizerAnalyzeParam analyze = 101;
  bool has_analyze() const;
  private:
  bool _internal_has_analyze() const;
  public:
  void clear_analyze();
  const ::maarpc::CustomRecognizerAnalyzeParam& analyze() const;
  PROTOBUF_NODISCARD ::maarpc::CustomRecognizerAnalyzeParam* release_analyze();
  ::maarpc::CustomRecognizerAnalyzeParam* mutable_analyze();
  void set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeParam* analyze);
  private:
  const ::maarpc::CustomRecognizerAnalyzeParam& _internal_analyze() const;
  ::maarpc::CustomRecognizerAnalyzeParam* _internal_mutable_analyze();
  public:
  void unsafe_arena_set_allocated_analyze(
      ::maarpc::CustomRecognizerAnalyzeParam* analyze);
  ::maarpc::CustomRecognizerAnalyzeParam* unsafe_arena_release_analyze();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerResponse)
 private:
  class _Internal;
  void set_has_analyze();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Id* reco_;
    ::maarpc::Id* id_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomRecognizerAnalyzeParam* analyze_;
    } command_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomRecognizerAnalyzeResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomRecognizerAnalyzeResult) */ {
 public:
  inline CustomRecognizerAnalyzeResult() : CustomRecognizerAnalyzeResult(nullptr) {}
  ~CustomRecognizerAnalyzeResult() override;
  explicit PROTOBUF_CONSTEXPR CustomRecognizerAnalyzeResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomRecognizerAnalyzeResult(const CustomRecognizerAnalyzeResult& from);
  CustomRecognizerAnalyzeResult(CustomRecognizerAnalyzeResult&& from) noexcept
    : CustomRecognizerAnalyzeResult() {
    *this = ::std::move(from);
  }

  inline CustomRecognizerAnalyzeResult& operator=(const CustomRecognizerAnalyzeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomRecognizerAnalyzeResult& operator=(CustomRecognizerAnalyzeResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomRecognizerAnalyzeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomRecognizerAnalyzeResult* internal_default_instance() {
    return reinterpret_cast<const CustomRecognizerAnalyzeResult*>(
               &_CustomRecognizerAnalyzeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CustomRecognizerAnalyzeResult& a, CustomRecognizerAnalyzeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomRecognizerAnalyzeResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomRecognizerAnalyzeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomRecognizerAnalyzeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomRecognizerAnalyzeResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomRecognizerAnalyzeResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomRecognizerAnalyzeResult& from) {
    CustomRecognizerAnalyzeResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomRecognizerAnalyzeResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomRecognizerAnalyzeResult";
  }
  protected:
  explicit CustomRecognizerAnalyzeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 3,
    kBoxFieldNumber = 2,
    kMatchFieldNumber = 1,
  };
  // optional string detail = 3;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // optional .maarpc.Rect box = 2;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::maarpc::Rect& box() const;
  PROTOBUF_NODISCARD ::maarpc::Rect* release_box();
  ::maarpc::Rect* mutable_box();
  void set_allocated_box(::maarpc::Rect* box);
  private:
  const ::maarpc::Rect& _internal_box() const;
  ::maarpc::Rect* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::maarpc::Rect* box);
  ::maarpc::Rect* unsafe_arena_release_box();

  // optional bool match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  bool match() const;
  void set_match(bool value);
  private:
  bool _internal_match() const;
  void _internal_set_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomRecognizerAnalyzeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::maarpc::Rect* box_;
    bool match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SubmitCustomRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SubmitCustomRecognizerRequest) */ {
 public:
  inline SubmitCustomRecognizerRequest() : SubmitCustomRecognizerRequest(nullptr) {}
  ~SubmitCustomRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR SubmitCustomRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitCustomRecognizerRequest(const SubmitCustomRecognizerRequest& from);
  SubmitCustomRecognizerRequest(SubmitCustomRecognizerRequest&& from) noexcept
    : SubmitCustomRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline SubmitCustomRecognizerRequest& operator=(const SubmitCustomRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitCustomRecognizerRequest& operator=(SubmitCustomRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitCustomRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kAnalyze = 101,
    RESULT_NOT_SET = 0,
  };

  static inline const SubmitCustomRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitCustomRecognizerRequest*>(
               &_SubmitCustomRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SubmitCustomRecognizerRequest& a, SubmitCustomRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitCustomRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitCustomRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitCustomRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitCustomRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitCustomRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmitCustomRecognizerRequest& from) {
    SubmitCustomRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitCustomRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SubmitCustomRecognizerRequest";
  }
  protected:
  explicit SubmitCustomRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kIdFieldNumber = 2,
    kOkFieldNumber = 3,
    kAnalyzeFieldNumber = 101,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // optional bool ok = 3;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // .maarpc.CustomRecognizerAnalyzeResult analyze = 101;
  bool has_analyze() const;
  private:
  bool _internal_has_analyze() const;
  public:
  void clear_analyze();
  const ::maarpc::CustomRecognizerAnalyzeResult& analyze() const;
  PROTOBUF_NODISCARD ::maarpc::CustomRecognizerAnalyzeResult* release_analyze();
  ::maarpc::CustomRecognizerAnalyzeResult* mutable_analyze();
  void set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeResult* analyze);
  private:
  const ::maarpc::CustomRecognizerAnalyzeResult& _internal_analyze() const;
  ::maarpc::CustomRecognizerAnalyzeResult* _internal_mutable_analyze();
  public:
  void unsafe_arena_set_allocated_analyze(
      ::maarpc::CustomRecognizerAnalyzeResult* analyze);
  ::maarpc::CustomRecognizerAnalyzeResult* unsafe_arena_release_analyze();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.SubmitCustomRecognizerRequest)
 private:
  class _Internal;
  void set_has_analyze();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::Id* id_;
    bool ok_;
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomRecognizerAnalyzeResult* analyze_;
    } result_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomActionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionRequest) */ {
 public:
  inline CustomActionRequest() : CustomActionRequest(nullptr) {}
  ~CustomActionRequest() override;
  explicit PROTOBUF_CONSTEXPR CustomActionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionRequest(const CustomActionRequest& from);
  CustomActionRequest(CustomActionRequest&& from) noexcept
    : CustomActionRequest() {
    *this = ::std::move(from);
  }

  inline CustomActionRequest& operator=(const CustomActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionRequest& operator=(CustomActionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomActionRequest* internal_default_instance() {
    return reinterpret_cast<const CustomActionRequest*>(
               &_CustomActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CustomActionRequest& a, CustomActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionRequest& from) {
    CustomActionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionRequest";
  }
  protected:
  explicit CustomActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHandleFieldNumber = 1,
    kActFieldNumber = 3,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Id act = 3;
  bool has_act() const;
  private:
  bool _internal_has_act() const;
  public:
  void clear_act();
  const ::maarpc::Id& act() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_act();
  ::maarpc::Id* mutable_act();
  void set_allocated_act(::maarpc::Id* act);
  private:
  const ::maarpc::Id& _internal_act() const;
  ::maarpc::Id* _internal_mutable_act();
  public:
  void unsafe_arena_set_allocated_act(
      ::maarpc::Id* act);
  ::maarpc::Id* unsafe_arena_release_act();

  // @@protoc_insertion_point(class_scope:maarpc.CustomActionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::maarpc::Handle* handle_;
    ::maarpc::Id* act_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomActionRunParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionRunParam) */ {
 public:
  inline CustomActionRunParam() : CustomActionRunParam(nullptr) {}
  ~CustomActionRunParam() override;
  explicit PROTOBUF_CONSTEXPR CustomActionRunParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionRunParam(const CustomActionRunParam& from);
  CustomActionRunParam(CustomActionRunParam&& from) noexcept
    : CustomActionRunParam() {
    *this = ::std::move(from);
  }

  inline CustomActionRunParam& operator=(const CustomActionRunParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionRunParam& operator=(CustomActionRunParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionRunParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomActionRunParam* internal_default_instance() {
    return reinterpret_cast<const CustomActionRunParam*>(
               &_CustomActionRunParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CustomActionRunParam& a, CustomActionRunParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionRunParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionRunParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionRunParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionRunParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionRunParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionRunParam& from) {
    CustomActionRunParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionRunParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionRunParam";
  }
  protected:
  explicit CustomActionRunParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kParamFieldNumber = 3,
    kDetailFieldNumber = 5,
    kContextFieldNumber = 1,
    kBoxFieldNumber = 4,
  };
  // optional string task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional string detail = 5;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // optional .maarpc.Handle context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::maarpc::Handle& context() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_context();
  ::maarpc::Handle* mutable_context();
  void set_allocated_context(::maarpc::Handle* context);
  private:
  const ::maarpc::Handle& _internal_context() const;
  ::maarpc::Handle* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::maarpc::Handle* context);
  ::maarpc::Handle* unsafe_arena_release_context();

  // optional .maarpc.Rect box = 4;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::maarpc::Rect& box() const;
  PROTOBUF_NODISCARD ::maarpc::Rect* release_box();
  ::maarpc::Rect* mutable_box();
  void set_allocated_box(::maarpc::Rect* box);
  private:
  const ::maarpc::Rect& _internal_box() const;
  ::maarpc::Rect* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::maarpc::Rect* box);
  ::maarpc::Rect* unsafe_arena_release_box();

  // @@protoc_insertion_point(class_scope:maarpc.CustomActionRunParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::maarpc::Handle* context_;
    ::maarpc::Rect* box_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class CustomActionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionResponse) */ {
 public:
  inline CustomActionResponse() : CustomActionResponse(nullptr) {}
  ~CustomActionResponse() override;
  explicit PROTOBUF_CONSTEXPR CustomActionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionResponse(const CustomActionResponse& from);
  CustomActionResponse(CustomActionResponse&& from) noexcept
    : CustomActionResponse() {
    *this = ::std::move(from);
  }

  inline CustomActionResponse& operator=(const CustomActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionResponse& operator=(CustomActionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kRun = 101,
    kStop = 102,
    COMMAND_NOT_SET = 0,
  };

  static inline const CustomActionResponse* internal_default_instance() {
    return reinterpret_cast<const CustomActionResponse*>(
               &_CustomActionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CustomActionResponse& a, CustomActionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionResponse& from) {
    CustomActionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionResponse";
  }
  protected:
  explicit CustomActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActFieldNumber = 1,
    kIdFieldNumber = 2,
    kRunFieldNumber = 101,
    kStopFieldNumber = 102,
  };
  // optional .maarpc.Id act = 1;
  bool has_act() const;
  private:
  bool _internal_has_act() const;
  public:
  void clear_act();
  const ::maarpc::Id& act() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_act();
  ::maarpc::Id* mutable_act();
  void set_allocated_act(::maarpc::Id* act);
  private:
  const ::maarpc::Id& _internal_act() const;
  ::maarpc::Id* _internal_mutable_act();
  public:
  void unsafe_arena_set_allocated_act(
      ::maarpc::Id* act);
  ::maarpc::Id* unsafe_arena_release_act();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // .maarpc.CustomActionRunParam run = 101;
  bool has_run() const;
  private:
  bool _internal_has_run() const;
  public:
  void clear_run();
  const ::maarpc::CustomActionRunParam& run() const;
  PROTOBUF_NODISCARD ::maarpc::CustomActionRunParam* release_run();
  ::maarpc::CustomActionRunParam* mutable_run();
  void set_allocated_run(::maarpc::CustomActionRunParam* run);
  private:
  const ::maarpc::CustomActionRunParam& _internal_run() const;
  ::maarpc::CustomActionRunParam* _internal_mutable_run();
  public:
  void unsafe_arena_set_allocated_run(
      ::maarpc::CustomActionRunParam* run);
  ::maarpc::CustomActionRunParam* unsafe_arena_release_run();

  // bool stop = 102;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  bool stop() const;
  void set_stop(bool value);
  private:
  bool _internal_stop() const;
  void _internal_set_stop(bool value);
  public:

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomActionResponse)
 private:
  class _Internal;
  void set_has_run();
  void set_has_stop();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Id* act_;
    ::maarpc::Id* id_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomActionRunParam* run_;
      bool stop_;
    } command_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SubmitCustomActionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SubmitCustomActionRequest) */ {
 public:
  inline SubmitCustomActionRequest() : SubmitCustomActionRequest(nullptr) {}
  ~SubmitCustomActionRequest() override;
  explicit PROTOBUF_CONSTEXPR SubmitCustomActionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubmitCustomActionRequest(const SubmitCustomActionRequest& from);
  SubmitCustomActionRequest(SubmitCustomActionRequest&& from) noexcept
    : SubmitCustomActionRequest() {
    *this = ::std::move(from);
  }

  inline SubmitCustomActionRequest& operator=(const SubmitCustomActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitCustomActionRequest& operator=(SubmitCustomActionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubmitCustomActionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubmitCustomActionRequest* internal_default_instance() {
    return reinterpret_cast<const SubmitCustomActionRequest*>(
               &_SubmitCustomActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SubmitCustomActionRequest& a, SubmitCustomActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitCustomActionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitCustomActionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubmitCustomActionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubmitCustomActionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubmitCustomActionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubmitCustomActionRequest& from) {
    SubmitCustomActionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitCustomActionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SubmitCustomActionRequest";
  }
  protected:
  explicit SubmitCustomActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kIdFieldNumber = 2,
    kOkFieldNumber = 3,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // optional bool ok = 3;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.SubmitCustomActionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::Id* id_;
    bool ok_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class InstancePostTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.InstancePostTaskRequest) */ {
 public:
  inline InstancePostTaskRequest() : InstancePostTaskRequest(nullptr) {}
  ~InstancePostTaskRequest() override;
  explicit PROTOBUF_CONSTEXPR InstancePostTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstancePostTaskRequest(const InstancePostTaskRequest& from);
  InstancePostTaskRequest(InstancePostTaskRequest&& from) noexcept
    : InstancePostTaskRequest() {
    *this = ::std::move(from);
  }

  inline InstancePostTaskRequest& operator=(const InstancePostTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstancePostTaskRequest& operator=(InstancePostTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstancePostTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstancePostTaskRequest* internal_default_instance() {
    return reinterpret_cast<const InstancePostTaskRequest*>(
               &_InstancePostTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(InstancePostTaskRequest& a, InstancePostTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstancePostTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstancePostTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstancePostTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstancePostTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstancePostTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstancePostTaskRequest& from) {
    InstancePostTaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstancePostTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.InstancePostTaskRequest";
  }
  protected:
  explicit InstancePostTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kParamFieldNumber = 3,
    kHandleFieldNumber = 1,
  };
  // optional string task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:maarpc.InstancePostTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::maarpc::Handle* handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class InstanceSetTaskParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.InstanceSetTaskParamRequest) */ {
 public:
  inline InstanceSetTaskParamRequest() : InstanceSetTaskParamRequest(nullptr) {}
  ~InstanceSetTaskParamRequest() override;
  explicit PROTOBUF_CONSTEXPR InstanceSetTaskParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstanceSetTaskParamRequest(const InstanceSetTaskParamRequest& from);
  InstanceSetTaskParamRequest(InstanceSetTaskParamRequest&& from) noexcept
    : InstanceSetTaskParamRequest() {
    *this = ::std::move(from);
  }

  inline InstanceSetTaskParamRequest& operator=(const InstanceSetTaskParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceSetTaskParamRequest& operator=(InstanceSetTaskParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstanceSetTaskParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstanceSetTaskParamRequest* internal_default_instance() {
    return reinterpret_cast<const InstanceSetTaskParamRequest*>(
               &_InstanceSetTaskParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(InstanceSetTaskParamRequest& a, InstanceSetTaskParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceSetTaskParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceSetTaskParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstanceSetTaskParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstanceSetTaskParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstanceSetTaskParamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstanceSetTaskParamRequest& from) {
    InstanceSetTaskParamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceSetTaskParamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.InstanceSetTaskParamRequest";
  }
  protected:
  explicit InstanceSetTaskParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 3,
    kHandleFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::maarpc::Id& id() const;
  PROTOBUF_NODISCARD ::maarpc::Id* release_id();
  ::maarpc::Id* mutable_id();
  void set_allocated_id(::maarpc::Id* id);
  private:
  const ::maarpc::Id& _internal_id() const;
  ::maarpc::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::maarpc::Id* id);
  ::maarpc::Id* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:maarpc.InstanceSetTaskParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::maarpc::Handle* handle_;
    ::maarpc::Id* id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextRunTaskRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextRunTaskRequest) */ {
 public:
  inline SyncContextRunTaskRequest() : SyncContextRunTaskRequest(nullptr) {}
  ~SyncContextRunTaskRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextRunTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextRunTaskRequest(const SyncContextRunTaskRequest& from);
  SyncContextRunTaskRequest(SyncContextRunTaskRequest&& from) noexcept
    : SyncContextRunTaskRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextRunTaskRequest& operator=(const SyncContextRunTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextRunTaskRequest& operator=(SyncContextRunTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextRunTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextRunTaskRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextRunTaskRequest*>(
               &_SyncContextRunTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SyncContextRunTaskRequest& a, SyncContextRunTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextRunTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextRunTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextRunTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextRunTaskRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextRunTaskRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextRunTaskRequest& from) {
    SyncContextRunTaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextRunTaskRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextRunTaskRequest";
  }
  protected:
  explicit SyncContextRunTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kParamFieldNumber = 3,
    kHandleFieldNumber = 1,
  };
  // optional string task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextRunTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::maarpc::Handle* handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextRunRecognizerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextRunRecognizerRequest) */ {
 public:
  inline SyncContextRunRecognizerRequest() : SyncContextRunRecognizerRequest(nullptr) {}
  ~SyncContextRunRecognizerRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextRunRecognizerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextRunRecognizerRequest(const SyncContextRunRecognizerRequest& from);
  SyncContextRunRecognizerRequest(SyncContextRunRecognizerRequest&& from) noexcept
    : SyncContextRunRecognizerRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextRunRecognizerRequest& operator=(const SyncContextRunRecognizerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextRunRecognizerRequest& operator=(SyncContextRunRecognizerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextRunRecognizerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextRunRecognizerRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextRunRecognizerRequest*>(
               &_SyncContextRunRecognizerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SyncContextRunRecognizerRequest& a, SyncContextRunRecognizerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextRunRecognizerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextRunRecognizerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextRunRecognizerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextRunRecognizerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextRunRecognizerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextRunRecognizerRequest& from) {
    SyncContextRunRecognizerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextRunRecognizerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextRunRecognizerRequest";
  }
  protected:
  explicit SyncContextRunRecognizerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kParamFieldNumber = 3,
    kHandleFieldNumber = 1,
    kImageFieldNumber = 4,
  };
  // optional string task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Handle image = 4;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::maarpc::Handle& image() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_image();
  ::maarpc::Handle* mutable_image();
  void set_allocated_image(::maarpc::Handle* image);
  private:
  const ::maarpc::Handle& _internal_image() const;
  ::maarpc::Handle* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::maarpc::Handle* image);
  ::maarpc::Handle* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextRunRecognizerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::maarpc::Handle* handle_;
    ::maarpc::Handle* image_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextRunRecognizerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextRunRecognizerResponse) */ {
 public:
  inline SyncContextRunRecognizerResponse() : SyncContextRunRecognizerResponse(nullptr) {}
  ~SyncContextRunRecognizerResponse() override;
  explicit PROTOBUF_CONSTEXPR SyncContextRunRecognizerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextRunRecognizerResponse(const SyncContextRunRecognizerResponse& from);
  SyncContextRunRecognizerResponse(SyncContextRunRecognizerResponse&& from) noexcept
    : SyncContextRunRecognizerResponse() {
    *this = ::std::move(from);
  }

  inline SyncContextRunRecognizerResponse& operator=(const SyncContextRunRecognizerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextRunRecognizerResponse& operator=(SyncContextRunRecognizerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextRunRecognizerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextRunRecognizerResponse* internal_default_instance() {
    return reinterpret_cast<const SyncContextRunRecognizerResponse*>(
               &_SyncContextRunRecognizerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SyncContextRunRecognizerResponse& a, SyncContextRunRecognizerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextRunRecognizerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextRunRecognizerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextRunRecognizerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextRunRecognizerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextRunRecognizerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextRunRecognizerResponse& from) {
    SyncContextRunRecognizerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextRunRecognizerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextRunRecognizerResponse";
  }
  protected:
  explicit SyncContextRunRecognizerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 3,
    kBoxFieldNumber = 2,
    kMatchFieldNumber = 1,
    kStatusFieldNumber = 101,
  };
  // optional string detail = 3;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // optional .maarpc.Rect box = 2;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::maarpc::Rect& box() const;
  PROTOBUF_NODISCARD ::maarpc::Rect* release_box();
  ::maarpc::Rect* mutable_box();
  void set_allocated_box(::maarpc::Rect* box);
  private:
  const ::maarpc::Rect& _internal_box() const;
  ::maarpc::Rect* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::maarpc::Rect* box);
  ::maarpc::Rect* unsafe_arena_release_box();

  // optional bool match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  bool match() const;
  void set_match(bool value);
  private:
  bool _internal_match() const;
  void _internal_set_match(bool value);
  public:

  // optional bool status = 101;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextRunRecognizerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::maarpc::Rect* box_;
    bool match_;
    bool status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextRunActionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextRunActionRequest) */ {
 public:
  inline SyncContextRunActionRequest() : SyncContextRunActionRequest(nullptr) {}
  ~SyncContextRunActionRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextRunActionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextRunActionRequest(const SyncContextRunActionRequest& from);
  SyncContextRunActionRequest(SyncContextRunActionRequest&& from) noexcept
    : SyncContextRunActionRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextRunActionRequest& operator=(const SyncContextRunActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextRunActionRequest& operator=(SyncContextRunActionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextRunActionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextRunActionRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextRunActionRequest*>(
               &_SyncContextRunActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SyncContextRunActionRequest& a, SyncContextRunActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextRunActionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextRunActionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextRunActionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextRunActionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextRunActionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextRunActionRequest& from) {
    SyncContextRunActionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextRunActionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextRunActionRequest";
  }
  protected:
  explicit SyncContextRunActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kParamFieldNumber = 3,
    kDetailFieldNumber = 5,
    kHandleFieldNumber = 1,
    kBoxFieldNumber = 4,
  };
  // optional string task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional string detail = 5;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Rect box = 4;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::maarpc::Rect& box() const;
  PROTOBUF_NODISCARD ::maarpc::Rect* release_box();
  ::maarpc::Rect* mutable_box();
  void set_allocated_box(::maarpc::Rect* box);
  private:
  const ::maarpc::Rect& _internal_box() const;
  ::maarpc::Rect* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::maarpc::Rect* box);
  ::maarpc::Rect* unsafe_arena_release_box();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextRunActionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::maarpc::Handle* handle_;
    ::maarpc::Rect* box_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextClickRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextClickRequest) */ {
 public:
  inline SyncContextClickRequest() : SyncContextClickRequest(nullptr) {}
  ~SyncContextClickRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextClickRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextClickRequest(const SyncContextClickRequest& from);
  SyncContextClickRequest(SyncContextClickRequest&& from) noexcept
    : SyncContextClickRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextClickRequest& operator=(const SyncContextClickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextClickRequest& operator=(SyncContextClickRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextClickRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextClickRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextClickRequest*>(
               &_SyncContextClickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SyncContextClickRequest& a, SyncContextClickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextClickRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextClickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextClickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextClickRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextClickRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextClickRequest& from) {
    SyncContextClickRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextClickRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextClickRequest";
  }
  protected:
  explicit SyncContextClickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.ClickParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::ClickParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::ClickParam* release_param();
  ::maarpc::ClickParam* mutable_param();
  void set_allocated_param(::maarpc::ClickParam* param);
  private:
  const ::maarpc::ClickParam& _internal_param() const;
  ::maarpc::ClickParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::ClickParam* param);
  ::maarpc::ClickParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextClickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::ClickParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextSwipeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextSwipeRequest) */ {
 public:
  inline SyncContextSwipeRequest() : SyncContextSwipeRequest(nullptr) {}
  ~SyncContextSwipeRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextSwipeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextSwipeRequest(const SyncContextSwipeRequest& from);
  SyncContextSwipeRequest(SyncContextSwipeRequest&& from) noexcept
    : SyncContextSwipeRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextSwipeRequest& operator=(const SyncContextSwipeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextSwipeRequest& operator=(SyncContextSwipeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextSwipeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextSwipeRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextSwipeRequest*>(
               &_SyncContextSwipeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SyncContextSwipeRequest& a, SyncContextSwipeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextSwipeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextSwipeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextSwipeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextSwipeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextSwipeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextSwipeRequest& from) {
    SyncContextSwipeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextSwipeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextSwipeRequest";
  }
  protected:
  explicit SyncContextSwipeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.SwipeParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::SwipeParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::SwipeParam* release_param();
  ::maarpc::SwipeParam* mutable_param();
  void set_allocated_param(::maarpc::SwipeParam* param);
  private:
  const ::maarpc::SwipeParam& _internal_param() const;
  ::maarpc::SwipeParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::SwipeParam* param);
  ::maarpc::SwipeParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextSwipeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::SwipeParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextKeyRequest) */ {
 public:
  inline SyncContextKeyRequest() : SyncContextKeyRequest(nullptr) {}
  ~SyncContextKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextKeyRequest(const SyncContextKeyRequest& from);
  SyncContextKeyRequest(SyncContextKeyRequest&& from) noexcept
    : SyncContextKeyRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextKeyRequest& operator=(const SyncContextKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextKeyRequest& operator=(SyncContextKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextKeyRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextKeyRequest*>(
               &_SyncContextKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SyncContextKeyRequest& a, SyncContextKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextKeyRequest& from) {
    SyncContextKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextKeyRequest";
  }
  protected:
  explicit SyncContextKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.KeyParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::KeyParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::KeyParam* release_param();
  ::maarpc::KeyParam* mutable_param();
  void set_allocated_param(::maarpc::KeyParam* param);
  private:
  const ::maarpc::KeyParam& _internal_param() const;
  ::maarpc::KeyParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::KeyParam* param);
  ::maarpc::KeyParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::KeyParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextTouchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextTouchRequest) */ {
 public:
  inline SyncContextTouchRequest() : SyncContextTouchRequest(nullptr) {}
  ~SyncContextTouchRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextTouchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextTouchRequest(const SyncContextTouchRequest& from);
  SyncContextTouchRequest(SyncContextTouchRequest&& from) noexcept
    : SyncContextTouchRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextTouchRequest& operator=(const SyncContextTouchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextTouchRequest& operator=(SyncContextTouchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextTouchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextTouchRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextTouchRequest*>(
               &_SyncContextTouchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SyncContextTouchRequest& a, SyncContextTouchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextTouchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextTouchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextTouchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextTouchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextTouchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextTouchRequest& from) {
    SyncContextTouchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextTouchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextTouchRequest";
  }
  protected:
  explicit SyncContextTouchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.TouchParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::maarpc::TouchParam& param() const;
  PROTOBUF_NODISCARD ::maarpc::TouchParam* release_param();
  ::maarpc::TouchParam* mutable_param();
  void set_allocated_param(::maarpc::TouchParam* param);
  private:
  const ::maarpc::TouchParam& _internal_param() const;
  ::maarpc::TouchParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::maarpc::TouchParam* param);
  ::maarpc::TouchParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextTouchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::TouchParam* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// -------------------------------------------------------------------

class SyncContextScreencapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.SyncContextScreencapRequest) */ {
 public:
  inline SyncContextScreencapRequest() : SyncContextScreencapRequest(nullptr) {}
  ~SyncContextScreencapRequest() override;
  explicit PROTOBUF_CONSTEXPR SyncContextScreencapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncContextScreencapRequest(const SyncContextScreencapRequest& from);
  SyncContextScreencapRequest(SyncContextScreencapRequest&& from) noexcept
    : SyncContextScreencapRequest() {
    *this = ::std::move(from);
  }

  inline SyncContextScreencapRequest& operator=(const SyncContextScreencapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncContextScreencapRequest& operator=(SyncContextScreencapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncContextScreencapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncContextScreencapRequest* internal_default_instance() {
    return reinterpret_cast<const SyncContextScreencapRequest*>(
               &_SyncContextScreencapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SyncContextScreencapRequest& a, SyncContextScreencapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncContextScreencapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncContextScreencapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncContextScreencapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncContextScreencapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncContextScreencapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncContextScreencapRequest& from) {
    SyncContextScreencapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncContextScreencapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.SyncContextScreencapRequest";
  }
  protected:
  explicit SyncContextScreencapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // optional .maarpc.Handle handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const ::maarpc::Handle& handle() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_handle();
  ::maarpc::Handle* mutable_handle();
  void set_allocated_handle(::maarpc::Handle* handle);
  private:
  const ::maarpc::Handle& _internal_handle() const;
  ::maarpc::Handle* _internal_mutable_handle();
  public:
  void unsafe_arena_set_allocated_handle(
      ::maarpc::Handle* handle);
  ::maarpc::Handle* unsafe_arena_release_handle();

  // optional .maarpc.Handle image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::maarpc::Handle& image() const;
  PROTOBUF_NODISCARD ::maarpc::Handle* release_image();
  ::maarpc::Handle* mutable_image();
  void set_allocated_image(::maarpc::Handle* image);
  private:
  const ::maarpc::Handle& _internal_image() const;
  ::maarpc::Handle* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::maarpc::Handle* image);
  ::maarpc::Handle* unsafe_arena_release_image();

  // @@protoc_insertion_point(class_scope:maarpc.SyncContextScreencapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::maarpc::Handle* handle_;
    ::maarpc::Handle* image_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Framework_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetGlobalOptionRequest

// string logging = 1;
inline bool SetGlobalOptionRequest::_internal_has_logging() const {
  return option_case() == kLogging;
}
inline bool SetGlobalOptionRequest::has_logging() const {
  return _internal_has_logging();
}
inline void SetGlobalOptionRequest::set_has_logging() {
  _impl_._oneof_case_[0] = kLogging;
}
inline void SetGlobalOptionRequest::clear_logging() {
  if (_internal_has_logging()) {
    _impl_.option_.logging_.Destroy();
    clear_has_option();
  }
}
inline const std::string& SetGlobalOptionRequest::logging() const {
  // @@protoc_insertion_point(field_get:maarpc.SetGlobalOptionRequest.logging)
  return _internal_logging();
}
template <typename ArgT0, typename... ArgT>
inline void SetGlobalOptionRequest::set_logging(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_logging()) {
    clear_option();
    set_has_logging();
    _impl_.option_.logging_.InitDefault();
  }
  _impl_.option_.logging_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SetGlobalOptionRequest.logging)
}
inline std::string* SetGlobalOptionRequest::mutable_logging() {
  std::string* _s = _internal_mutable_logging();
  // @@protoc_insertion_point(field_mutable:maarpc.SetGlobalOptionRequest.logging)
  return _s;
}
inline const std::string& SetGlobalOptionRequest::_internal_logging() const {
  if (_internal_has_logging()) {
    return _impl_.option_.logging_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SetGlobalOptionRequest::_internal_set_logging(const std::string& value) {
  if (!_internal_has_logging()) {
    clear_option();
    set_has_logging();
    _impl_.option_.logging_.InitDefault();
  }
  _impl_.option_.logging_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGlobalOptionRequest::_internal_mutable_logging() {
  if (!_internal_has_logging()) {
    clear_option();
    set_has_logging();
    _impl_.option_.logging_.InitDefault();
  }
  return _impl_.option_.logging_.Mutable(      GetArenaForAllocation());
}
inline std::string* SetGlobalOptionRequest::release_logging() {
  // @@protoc_insertion_point(field_release:maarpc.SetGlobalOptionRequest.logging)
  if (_internal_has_logging()) {
    clear_has_option();
    return _impl_.option_.logging_.Release();
  } else {
    return nullptr;
  }
}
inline void SetGlobalOptionRequest::set_allocated_logging(std::string* logging) {
  if (has_option()) {
    clear_option();
  }
  if (logging != nullptr) {
    set_has_logging();
    _impl_.option_.logging_.InitAllocated(logging, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.SetGlobalOptionRequest.logging)
}

// bool debug_mode = 2;
inline bool SetGlobalOptionRequest::_internal_has_debug_mode() const {
  return option_case() == kDebugMode;
}
inline bool SetGlobalOptionRequest::has_debug_mode() const {
  return _internal_has_debug_mode();
}
inline void SetGlobalOptionRequest::set_has_debug_mode() {
  _impl_._oneof_case_[0] = kDebugMode;
}
inline void SetGlobalOptionRequest::clear_debug_mode() {
  if (_internal_has_debug_mode()) {
    _impl_.option_.debug_mode_ = false;
    clear_has_option();
  }
}
inline bool SetGlobalOptionRequest::_internal_debug_mode() const {
  if (_internal_has_debug_mode()) {
    return _impl_.option_.debug_mode_;
  }
  return false;
}
inline void SetGlobalOptionRequest::_internal_set_debug_mode(bool value) {
  if (!_internal_has_debug_mode()) {
    clear_option();
    set_has_debug_mode();
  }
  _impl_.option_.debug_mode_ = value;
}
inline bool SetGlobalOptionRequest::debug_mode() const {
  // @@protoc_insertion_point(field_get:maarpc.SetGlobalOptionRequest.debug_mode)
  return _internal_debug_mode();
}
inline void SetGlobalOptionRequest::set_debug_mode(bool value) {
  _internal_set_debug_mode(value);
  // @@protoc_insertion_point(field_set:maarpc.SetGlobalOptionRequest.debug_mode)
}

inline bool SetGlobalOptionRequest::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
inline void SetGlobalOptionRequest::clear_has_option() {
  _impl_._oneof_case_[0] = OPTION_NOT_SET;
}
inline SetGlobalOptionRequest::OptionCase SetGlobalOptionRequest::option_case() const {
  return SetGlobalOptionRequest::OptionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImageInfoResponse

// optional int32 type = 1;
inline bool ImageInfoResponse::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageInfoResponse::has_type() const {
  return _internal_has_type();
}
inline void ImageInfoResponse::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ImageInfoResponse::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ImageInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:maarpc.ImageInfoResponse.type)
  return _internal_type();
}
inline void ImageInfoResponse::_internal_set_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void ImageInfoResponse::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:maarpc.ImageInfoResponse.type)
}

// optional .maarpc.Size size = 2;
inline bool ImageInfoResponse::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool ImageInfoResponse::has_size() const {
  return _internal_has_size();
}
inline const ::maarpc::Size& ImageInfoResponse::_internal_size() const {
  const ::maarpc::Size* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Size&>(
      ::maarpc::_Size_default_instance_);
}
inline const ::maarpc::Size& ImageInfoResponse::size() const {
  // @@protoc_insertion_point(field_get:maarpc.ImageInfoResponse.size)
  return _internal_size();
}
inline void ImageInfoResponse::unsafe_arena_set_allocated_size(
    ::maarpc::Size* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ImageInfoResponse.size)
}
inline ::maarpc::Size* ImageInfoResponse::release_size() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Size* ImageInfoResponse::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:maarpc.ImageInfoResponse.size)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Size* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::maarpc::Size* ImageInfoResponse::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Size>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::maarpc::Size* ImageInfoResponse::mutable_size() {
  ::maarpc::Size* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:maarpc.ImageInfoResponse.size)
  return _msg;
}
inline void ImageInfoResponse::set_allocated_size(::maarpc::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ImageInfoResponse.size)
}

// -------------------------------------------------------------------

// AdbControllerRequest

// optional .maarpc.Id callback = 1;
inline bool AdbControllerRequest::_internal_has_callback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.callback_ != nullptr);
  return value;
}
inline bool AdbControllerRequest::has_callback() const {
  return _internal_has_callback();
}
inline const ::maarpc::Id& AdbControllerRequest::_internal_callback() const {
  const ::maarpc::Id* p = _impl_.callback_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& AdbControllerRequest::callback() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.callback)
  return _internal_callback();
}
inline void AdbControllerRequest::unsafe_arena_set_allocated_callback(
    ::maarpc::Id* callback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callback_);
  }
  _impl_.callback_ = callback;
  if (callback) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.AdbControllerRequest.callback)
}
inline ::maarpc::Id* AdbControllerRequest::release_callback() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Id* temp = _impl_.callback_;
  _impl_.callback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* AdbControllerRequest::unsafe_arena_release_callback() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.callback)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Id* temp = _impl_.callback_;
  _impl_.callback_ = nullptr;
  return temp;
}
inline ::maarpc::Id* AdbControllerRequest::_internal_mutable_callback() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.callback_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.callback_ = p;
  }
  return _impl_.callback_;
}
inline ::maarpc::Id* AdbControllerRequest::mutable_callback() {
  ::maarpc::Id* _msg = _internal_mutable_callback();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.callback)
  return _msg;
}
inline void AdbControllerRequest::set_allocated_callback(::maarpc::Id* callback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callback_);
  }
  if (callback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(callback));
    if (message_arena != submessage_arena) {
      callback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.callback_ = callback;
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.callback)
}

// optional string adb_path = 2;
inline bool AdbControllerRequest::_internal_has_adb_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_path() const {
  return _internal_has_adb_path();
}
inline void AdbControllerRequest::clear_adb_path() {
  _impl_.adb_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdbControllerRequest::adb_path() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_path)
  return _internal_adb_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_adb_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.adb_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_path)
}
inline std::string* AdbControllerRequest::mutable_adb_path() {
  std::string* _s = _internal_mutable_adb_path();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.adb_path)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_adb_path() const {
  return _impl_.adb_path_.Get();
}
inline void AdbControllerRequest::_internal_set_adb_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adb_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_adb_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.adb_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_adb_path() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.adb_path)
  if (!_internal_has_adb_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.adb_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_path_.IsDefault()) {
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_adb_path(std::string* adb_path) {
  if (adb_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.adb_path_.SetAllocated(adb_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_path_.IsDefault()) {
    _impl_.adb_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.adb_path)
}

// optional string adb_serial = 3;
inline bool AdbControllerRequest::_internal_has_adb_serial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_serial() const {
  return _internal_has_adb_serial();
}
inline void AdbControllerRequest::clear_adb_serial() {
  _impl_.adb_serial_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AdbControllerRequest::adb_serial() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_serial)
  return _internal_adb_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_adb_serial(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.adb_serial_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_serial)
}
inline std::string* AdbControllerRequest::mutable_adb_serial() {
  std::string* _s = _internal_mutable_adb_serial();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.adb_serial)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_adb_serial() const {
  return _impl_.adb_serial_.Get();
}
inline void AdbControllerRequest::_internal_set_adb_serial(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.adb_serial_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_adb_serial() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.adb_serial_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_adb_serial() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.adb_serial)
  if (!_internal_has_adb_serial()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.adb_serial_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_serial_.IsDefault()) {
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_adb_serial(std::string* adb_serial) {
  if (adb_serial != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.adb_serial_.SetAllocated(adb_serial, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_serial_.IsDefault()) {
    _impl_.adb_serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.adb_serial)
}

// optional uint32 adb_type = 4;
inline bool AdbControllerRequest::_internal_has_adb_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_type() const {
  return _internal_has_adb_type();
}
inline void AdbControllerRequest::clear_adb_type() {
  _impl_.adb_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t AdbControllerRequest::_internal_adb_type() const {
  return _impl_.adb_type_;
}
inline uint32_t AdbControllerRequest::adb_type() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_type)
  return _internal_adb_type();
}
inline void AdbControllerRequest::_internal_set_adb_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.adb_type_ = value;
}
inline void AdbControllerRequest::set_adb_type(uint32_t value) {
  _internal_set_adb_type(value);
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_type)
}

// optional string adb_config = 5;
inline bool AdbControllerRequest::_internal_has_adb_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdbControllerRequest::has_adb_config() const {
  return _internal_has_adb_config();
}
inline void AdbControllerRequest::clear_adb_config() {
  _impl_.adb_config_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AdbControllerRequest::adb_config() const {
  // @@protoc_insertion_point(field_get:maarpc.AdbControllerRequest.adb_config)
  return _internal_adb_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbControllerRequest::set_adb_config(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.adb_config_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.AdbControllerRequest.adb_config)
}
inline std::string* AdbControllerRequest::mutable_adb_config() {
  std::string* _s = _internal_mutable_adb_config();
  // @@protoc_insertion_point(field_mutable:maarpc.AdbControllerRequest.adb_config)
  return _s;
}
inline const std::string& AdbControllerRequest::_internal_adb_config() const {
  return _impl_.adb_config_.Get();
}
inline void AdbControllerRequest::_internal_set_adb_config(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.adb_config_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::_internal_mutable_adb_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.adb_config_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbControllerRequest::release_adb_config() {
  // @@protoc_insertion_point(field_release:maarpc.AdbControllerRequest.adb_config)
  if (!_internal_has_adb_config()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.adb_config_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_config_.IsDefault()) {
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AdbControllerRequest::set_allocated_adb_config(std::string* adb_config) {
  if (adb_config != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.adb_config_.SetAllocated(adb_config, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.adb_config_.IsDefault()) {
    _impl_.adb_config_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.AdbControllerRequest.adb_config)
}

// -------------------------------------------------------------------

// CustomControllerRequest

// optional .maarpc.Id callback = 1;
inline bool CustomControllerRequest::_internal_has_callback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.callback_ != nullptr);
  return value;
}
inline bool CustomControllerRequest::has_callback() const {
  return _internal_has_callback();
}
inline const ::maarpc::Id& CustomControllerRequest::_internal_callback() const {
  const ::maarpc::Id* p = _impl_.callback_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomControllerRequest::callback() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerRequest.callback)
  return _internal_callback();
}
inline void CustomControllerRequest::unsafe_arena_set_allocated_callback(
    ::maarpc::Id* callback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callback_);
  }
  _impl_.callback_ = callback;
  if (callback) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerRequest.callback)
}
inline ::maarpc::Id* CustomControllerRequest::release_callback() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.callback_;
  _impl_.callback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomControllerRequest::unsafe_arena_release_callback() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerRequest.callback)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.callback_;
  _impl_.callback_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomControllerRequest::_internal_mutable_callback() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.callback_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.callback_ = p;
  }
  return _impl_.callback_;
}
inline ::maarpc::Id* CustomControllerRequest::mutable_callback() {
  ::maarpc::Id* _msg = _internal_mutable_callback();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerRequest.callback)
  return _msg;
}
inline void CustomControllerRequest::set_allocated_callback(::maarpc::Id* callback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callback_);
  }
  if (callback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(callback));
    if (message_arena != submessage_arena) {
      callback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.callback_ = callback;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerRequest.callback)
}

// optional .maarpc.Id ctrl = 2;
inline bool CustomControllerRequest::_internal_has_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ctrl_ != nullptr);
  return value;
}
inline bool CustomControllerRequest::has_ctrl() const {
  return _internal_has_ctrl();
}
inline const ::maarpc::Id& CustomControllerRequest::_internal_ctrl() const {
  const ::maarpc::Id* p = _impl_.ctrl_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomControllerRequest::ctrl() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerRequest.ctrl)
  return _internal_ctrl();
}
inline void CustomControllerRequest::unsafe_arena_set_allocated_ctrl(
    ::maarpc::Id* ctrl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctrl_);
  }
  _impl_.ctrl_ = ctrl;
  if (ctrl) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerRequest.ctrl)
}
inline ::maarpc::Id* CustomControllerRequest::release_ctrl() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.ctrl_;
  _impl_.ctrl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomControllerRequest::unsafe_arena_release_ctrl() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerRequest.ctrl)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.ctrl_;
  _impl_.ctrl_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomControllerRequest::_internal_mutable_ctrl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ctrl_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.ctrl_ = p;
  }
  return _impl_.ctrl_;
}
inline ::maarpc::Id* CustomControllerRequest::mutable_ctrl() {
  ::maarpc::Id* _msg = _internal_mutable_ctrl();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerRequest.ctrl)
  return _msg;
}
inline void CustomControllerRequest::set_allocated_ctrl(::maarpc::Id* ctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctrl_);
  }
  if (ctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctrl));
    if (message_arena != submessage_arena) {
      ctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctrl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ctrl_ = ctrl;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerRequest.ctrl)
}

// -------------------------------------------------------------------

// CustomControllerSetOptionParam

// optional int32 key = 1;
inline bool CustomControllerSetOptionParam::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomControllerSetOptionParam::has_key() const {
  return _internal_has_key();
}
inline void CustomControllerSetOptionParam::clear_key() {
  _impl_.key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CustomControllerSetOptionParam::_internal_key() const {
  return _impl_.key_;
}
inline int32_t CustomControllerSetOptionParam::key() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerSetOptionParam.key)
  return _internal_key();
}
inline void CustomControllerSetOptionParam::_internal_set_key(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_ = value;
}
inline void CustomControllerSetOptionParam::set_key(int32_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerSetOptionParam.key)
}

// optional string value = 2;
inline bool CustomControllerSetOptionParam::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomControllerSetOptionParam::has_value() const {
  return _internal_has_value();
}
inline void CustomControllerSetOptionParam::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomControllerSetOptionParam::value() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerSetOptionParam.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomControllerSetOptionParam::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerSetOptionParam.value)
}
inline std::string* CustomControllerSetOptionParam::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerSetOptionParam.value)
  return _s;
}
inline const std::string& CustomControllerSetOptionParam::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CustomControllerSetOptionParam::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomControllerSetOptionParam::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomControllerSetOptionParam::release_value() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerSetOptionParam.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomControllerSetOptionParam::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerSetOptionParam.value)
}

// -------------------------------------------------------------------

// CustomControllerResponse

// optional .maarpc.Id ctrl = 1;
inline bool CustomControllerResponse::_internal_has_ctrl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ctrl_ != nullptr);
  return value;
}
inline bool CustomControllerResponse::has_ctrl() const {
  return _internal_has_ctrl();
}
inline const ::maarpc::Id& CustomControllerResponse::_internal_ctrl() const {
  const ::maarpc::Id* p = _impl_.ctrl_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomControllerResponse::ctrl() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.ctrl)
  return _internal_ctrl();
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_ctrl(
    ::maarpc::Id* ctrl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctrl_);
  }
  _impl_.ctrl_ = ctrl;
  if (ctrl) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.ctrl)
}
inline ::maarpc::Id* CustomControllerResponse::release_ctrl() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.ctrl_;
  _impl_.ctrl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomControllerResponse::unsafe_arena_release_ctrl() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.ctrl)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.ctrl_;
  _impl_.ctrl_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomControllerResponse::_internal_mutable_ctrl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ctrl_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.ctrl_ = p;
  }
  return _impl_.ctrl_;
}
inline ::maarpc::Id* CustomControllerResponse::mutable_ctrl() {
  ::maarpc::Id* _msg = _internal_mutable_ctrl();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.ctrl)
  return _msg;
}
inline void CustomControllerResponse::set_allocated_ctrl(::maarpc::Id* ctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ctrl_);
  }
  if (ctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ctrl));
    if (message_arena != submessage_arena) {
      ctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctrl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ctrl_ = ctrl;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.ctrl)
}

// optional .maarpc.Id id = 2;
inline bool CustomControllerResponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool CustomControllerResponse::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& CustomControllerResponse::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomControllerResponse::id() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.id)
  return _internal_id();
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.id)
}
inline ::maarpc::Id* CustomControllerResponse::release_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomControllerResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomControllerResponse::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* CustomControllerResponse::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.id)
  return _msg;
}
inline void CustomControllerResponse::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.id)
}

// bool connect = 101;
inline bool CustomControllerResponse::_internal_has_connect() const {
  return command_case() == kConnect;
}
inline bool CustomControllerResponse::has_connect() const {
  return _internal_has_connect();
}
inline void CustomControllerResponse::set_has_connect() {
  _impl_._oneof_case_[0] = kConnect;
}
inline void CustomControllerResponse::clear_connect() {
  if (_internal_has_connect()) {
    _impl_.command_.connect_ = false;
    clear_has_command();
  }
}
inline bool CustomControllerResponse::_internal_connect() const {
  if (_internal_has_connect()) {
    return _impl_.command_.connect_;
  }
  return false;
}
inline void CustomControllerResponse::_internal_set_connect(bool value) {
  if (!_internal_has_connect()) {
    clear_command();
    set_has_connect();
  }
  _impl_.command_.connect_ = value;
}
inline bool CustomControllerResponse::connect() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.connect)
  return _internal_connect();
}
inline void CustomControllerResponse::set_connect(bool value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerResponse.connect)
}

// .maarpc.ClickParam click = 102;
inline bool CustomControllerResponse::_internal_has_click() const {
  return command_case() == kClick;
}
inline bool CustomControllerResponse::has_click() const {
  return _internal_has_click();
}
inline void CustomControllerResponse::set_has_click() {
  _impl_._oneof_case_[0] = kClick;
}
inline ::maarpc::ClickParam* CustomControllerResponse::release_click() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.click)
  if (_internal_has_click()) {
    clear_has_command();
    ::maarpc::ClickParam* temp = _impl_.command_.click_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.click_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::ClickParam& CustomControllerResponse::_internal_click() const {
  return _internal_has_click()
      ? *_impl_.command_.click_
      : reinterpret_cast< ::maarpc::ClickParam&>(::maarpc::_ClickParam_default_instance_);
}
inline const ::maarpc::ClickParam& CustomControllerResponse::click() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.click)
  return _internal_click();
}
inline ::maarpc::ClickParam* CustomControllerResponse::unsafe_arena_release_click() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.click)
  if (_internal_has_click()) {
    clear_has_command();
    ::maarpc::ClickParam* temp = _impl_.command_.click_;
    _impl_.command_.click_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_click(::maarpc::ClickParam* click) {
  clear_command();
  if (click) {
    set_has_click();
    _impl_.command_.click_ = click;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.click)
}
inline ::maarpc::ClickParam* CustomControllerResponse::_internal_mutable_click() {
  if (!_internal_has_click()) {
    clear_command();
    set_has_click();
    _impl_.command_.click_ = CreateMaybeMessage< ::maarpc::ClickParam >(GetArenaForAllocation());
  }
  return _impl_.command_.click_;
}
inline ::maarpc::ClickParam* CustomControllerResponse::mutable_click() {
  ::maarpc::ClickParam* _msg = _internal_mutable_click();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.click)
  return _msg;
}

// .maarpc.SwipeParam swipe = 103;
inline bool CustomControllerResponse::_internal_has_swipe() const {
  return command_case() == kSwipe;
}
inline bool CustomControllerResponse::has_swipe() const {
  return _internal_has_swipe();
}
inline void CustomControllerResponse::set_has_swipe() {
  _impl_._oneof_case_[0] = kSwipe;
}
inline ::maarpc::SwipeParam* CustomControllerResponse::release_swipe() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.swipe)
  if (_internal_has_swipe()) {
    clear_has_command();
    ::maarpc::SwipeParam* temp = _impl_.command_.swipe_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.swipe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::SwipeParam& CustomControllerResponse::_internal_swipe() const {
  return _internal_has_swipe()
      ? *_impl_.command_.swipe_
      : reinterpret_cast< ::maarpc::SwipeParam&>(::maarpc::_SwipeParam_default_instance_);
}
inline const ::maarpc::SwipeParam& CustomControllerResponse::swipe() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.swipe)
  return _internal_swipe();
}
inline ::maarpc::SwipeParam* CustomControllerResponse::unsafe_arena_release_swipe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.swipe)
  if (_internal_has_swipe()) {
    clear_has_command();
    ::maarpc::SwipeParam* temp = _impl_.command_.swipe_;
    _impl_.command_.swipe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_swipe(::maarpc::SwipeParam* swipe) {
  clear_command();
  if (swipe) {
    set_has_swipe();
    _impl_.command_.swipe_ = swipe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.swipe)
}
inline ::maarpc::SwipeParam* CustomControllerResponse::_internal_mutable_swipe() {
  if (!_internal_has_swipe()) {
    clear_command();
    set_has_swipe();
    _impl_.command_.swipe_ = CreateMaybeMessage< ::maarpc::SwipeParam >(GetArenaForAllocation());
  }
  return _impl_.command_.swipe_;
}
inline ::maarpc::SwipeParam* CustomControllerResponse::mutable_swipe() {
  ::maarpc::SwipeParam* _msg = _internal_mutable_swipe();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.swipe)
  return _msg;
}

// .maarpc.KeyParam key = 104;
inline bool CustomControllerResponse::_internal_has_key() const {
  return command_case() == kKey;
}
inline bool CustomControllerResponse::has_key() const {
  return _internal_has_key();
}
inline void CustomControllerResponse::set_has_key() {
  _impl_._oneof_case_[0] = kKey;
}
inline ::maarpc::KeyParam* CustomControllerResponse::release_key() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.key)
  if (_internal_has_key()) {
    clear_has_command();
    ::maarpc::KeyParam* temp = _impl_.command_.key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::KeyParam& CustomControllerResponse::_internal_key() const {
  return _internal_has_key()
      ? *_impl_.command_.key_
      : reinterpret_cast< ::maarpc::KeyParam&>(::maarpc::_KeyParam_default_instance_);
}
inline const ::maarpc::KeyParam& CustomControllerResponse::key() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.key)
  return _internal_key();
}
inline ::maarpc::KeyParam* CustomControllerResponse::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.key)
  if (_internal_has_key()) {
    clear_has_command();
    ::maarpc::KeyParam* temp = _impl_.command_.key_;
    _impl_.command_.key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_key(::maarpc::KeyParam* key) {
  clear_command();
  if (key) {
    set_has_key();
    _impl_.command_.key_ = key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.key)
}
inline ::maarpc::KeyParam* CustomControllerResponse::_internal_mutable_key() {
  if (!_internal_has_key()) {
    clear_command();
    set_has_key();
    _impl_.command_.key_ = CreateMaybeMessage< ::maarpc::KeyParam >(GetArenaForAllocation());
  }
  return _impl_.command_.key_;
}
inline ::maarpc::KeyParam* CustomControllerResponse::mutable_key() {
  ::maarpc::KeyParam* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.key)
  return _msg;
}

// .maarpc.TouchParam touch_down = 105;
inline bool CustomControllerResponse::_internal_has_touch_down() const {
  return command_case() == kTouchDown;
}
inline bool CustomControllerResponse::has_touch_down() const {
  return _internal_has_touch_down();
}
inline void CustomControllerResponse::set_has_touch_down() {
  _impl_._oneof_case_[0] = kTouchDown;
}
inline ::maarpc::TouchParam* CustomControllerResponse::release_touch_down() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.touch_down)
  if (_internal_has_touch_down()) {
    clear_has_command();
    ::maarpc::TouchParam* temp = _impl_.command_.touch_down_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.touch_down_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::TouchParam& CustomControllerResponse::_internal_touch_down() const {
  return _internal_has_touch_down()
      ? *_impl_.command_.touch_down_
      : reinterpret_cast< ::maarpc::TouchParam&>(::maarpc::_TouchParam_default_instance_);
}
inline const ::maarpc::TouchParam& CustomControllerResponse::touch_down() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.touch_down)
  return _internal_touch_down();
}
inline ::maarpc::TouchParam* CustomControllerResponse::unsafe_arena_release_touch_down() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.touch_down)
  if (_internal_has_touch_down()) {
    clear_has_command();
    ::maarpc::TouchParam* temp = _impl_.command_.touch_down_;
    _impl_.command_.touch_down_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_touch_down(::maarpc::TouchParam* touch_down) {
  clear_command();
  if (touch_down) {
    set_has_touch_down();
    _impl_.command_.touch_down_ = touch_down;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.touch_down)
}
inline ::maarpc::TouchParam* CustomControllerResponse::_internal_mutable_touch_down() {
  if (!_internal_has_touch_down()) {
    clear_command();
    set_has_touch_down();
    _impl_.command_.touch_down_ = CreateMaybeMessage< ::maarpc::TouchParam >(GetArenaForAllocation());
  }
  return _impl_.command_.touch_down_;
}
inline ::maarpc::TouchParam* CustomControllerResponse::mutable_touch_down() {
  ::maarpc::TouchParam* _msg = _internal_mutable_touch_down();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.touch_down)
  return _msg;
}

// .maarpc.TouchParam touch_move = 106;
inline bool CustomControllerResponse::_internal_has_touch_move() const {
  return command_case() == kTouchMove;
}
inline bool CustomControllerResponse::has_touch_move() const {
  return _internal_has_touch_move();
}
inline void CustomControllerResponse::set_has_touch_move() {
  _impl_._oneof_case_[0] = kTouchMove;
}
inline ::maarpc::TouchParam* CustomControllerResponse::release_touch_move() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.touch_move)
  if (_internal_has_touch_move()) {
    clear_has_command();
    ::maarpc::TouchParam* temp = _impl_.command_.touch_move_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.touch_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::TouchParam& CustomControllerResponse::_internal_touch_move() const {
  return _internal_has_touch_move()
      ? *_impl_.command_.touch_move_
      : reinterpret_cast< ::maarpc::TouchParam&>(::maarpc::_TouchParam_default_instance_);
}
inline const ::maarpc::TouchParam& CustomControllerResponse::touch_move() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.touch_move)
  return _internal_touch_move();
}
inline ::maarpc::TouchParam* CustomControllerResponse::unsafe_arena_release_touch_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.touch_move)
  if (_internal_has_touch_move()) {
    clear_has_command();
    ::maarpc::TouchParam* temp = _impl_.command_.touch_move_;
    _impl_.command_.touch_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_touch_move(::maarpc::TouchParam* touch_move) {
  clear_command();
  if (touch_move) {
    set_has_touch_move();
    _impl_.command_.touch_move_ = touch_move;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.touch_move)
}
inline ::maarpc::TouchParam* CustomControllerResponse::_internal_mutable_touch_move() {
  if (!_internal_has_touch_move()) {
    clear_command();
    set_has_touch_move();
    _impl_.command_.touch_move_ = CreateMaybeMessage< ::maarpc::TouchParam >(GetArenaForAllocation());
  }
  return _impl_.command_.touch_move_;
}
inline ::maarpc::TouchParam* CustomControllerResponse::mutable_touch_move() {
  ::maarpc::TouchParam* _msg = _internal_mutable_touch_move();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.touch_move)
  return _msg;
}

// .maarpc.TouchParam touch_up = 107;
inline bool CustomControllerResponse::_internal_has_touch_up() const {
  return command_case() == kTouchUp;
}
inline bool CustomControllerResponse::has_touch_up() const {
  return _internal_has_touch_up();
}
inline void CustomControllerResponse::set_has_touch_up() {
  _impl_._oneof_case_[0] = kTouchUp;
}
inline ::maarpc::TouchParam* CustomControllerResponse::release_touch_up() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.touch_up)
  if (_internal_has_touch_up()) {
    clear_has_command();
    ::maarpc::TouchParam* temp = _impl_.command_.touch_up_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.touch_up_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::TouchParam& CustomControllerResponse::_internal_touch_up() const {
  return _internal_has_touch_up()
      ? *_impl_.command_.touch_up_
      : reinterpret_cast< ::maarpc::TouchParam&>(::maarpc::_TouchParam_default_instance_);
}
inline const ::maarpc::TouchParam& CustomControllerResponse::touch_up() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.touch_up)
  return _internal_touch_up();
}
inline ::maarpc::TouchParam* CustomControllerResponse::unsafe_arena_release_touch_up() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.touch_up)
  if (_internal_has_touch_up()) {
    clear_has_command();
    ::maarpc::TouchParam* temp = _impl_.command_.touch_up_;
    _impl_.command_.touch_up_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_touch_up(::maarpc::TouchParam* touch_up) {
  clear_command();
  if (touch_up) {
    set_has_touch_up();
    _impl_.command_.touch_up_ = touch_up;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.touch_up)
}
inline ::maarpc::TouchParam* CustomControllerResponse::_internal_mutable_touch_up() {
  if (!_internal_has_touch_up()) {
    clear_command();
    set_has_touch_up();
    _impl_.command_.touch_up_ = CreateMaybeMessage< ::maarpc::TouchParam >(GetArenaForAllocation());
  }
  return _impl_.command_.touch_up_;
}
inline ::maarpc::TouchParam* CustomControllerResponse::mutable_touch_up() {
  ::maarpc::TouchParam* _msg = _internal_mutable_touch_up();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.touch_up)
  return _msg;
}

// string start = 108;
inline bool CustomControllerResponse::_internal_has_start() const {
  return command_case() == kStart;
}
inline bool CustomControllerResponse::has_start() const {
  return _internal_has_start();
}
inline void CustomControllerResponse::set_has_start() {
  _impl_._oneof_case_[0] = kStart;
}
inline void CustomControllerResponse::clear_start() {
  if (_internal_has_start()) {
    _impl_.command_.start_.Destroy();
    clear_has_command();
  }
}
inline const std::string& CustomControllerResponse::start() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline void CustomControllerResponse::set_start(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_start()) {
    clear_command();
    set_has_start();
    _impl_.command_.start_.InitDefault();
  }
  _impl_.command_.start_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerResponse.start)
}
inline std::string* CustomControllerResponse::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.start)
  return _s;
}
inline const std::string& CustomControllerResponse::_internal_start() const {
  if (_internal_has_start()) {
    return _impl_.command_.start_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CustomControllerResponse::_internal_set_start(const std::string& value) {
  if (!_internal_has_start()) {
    clear_command();
    set_has_start();
    _impl_.command_.start_.InitDefault();
  }
  _impl_.command_.start_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomControllerResponse::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_command();
    set_has_start();
    _impl_.command_.start_.InitDefault();
  }
  return _impl_.command_.start_.Mutable(      GetArenaForAllocation());
}
inline std::string* CustomControllerResponse::release_start() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.start)
  if (_internal_has_start()) {
    clear_has_command();
    return _impl_.command_.start_.Release();
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::set_allocated_start(std::string* start) {
  if (has_command()) {
    clear_command();
  }
  if (start != nullptr) {
    set_has_start();
    _impl_.command_.start_.InitAllocated(start, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.start)
}

// string stop = 109;
inline bool CustomControllerResponse::_internal_has_stop() const {
  return command_case() == kStop;
}
inline bool CustomControllerResponse::has_stop() const {
  return _internal_has_stop();
}
inline void CustomControllerResponse::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void CustomControllerResponse::clear_stop() {
  if (_internal_has_stop()) {
    _impl_.command_.stop_.Destroy();
    clear_has_command();
  }
}
inline const std::string& CustomControllerResponse::stop() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.stop)
  return _internal_stop();
}
template <typename ArgT0, typename... ArgT>
inline void CustomControllerResponse::set_stop(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_stop()) {
    clear_command();
    set_has_stop();
    _impl_.command_.stop_.InitDefault();
  }
  _impl_.command_.stop_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerResponse.stop)
}
inline std::string* CustomControllerResponse::mutable_stop() {
  std::string* _s = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.stop)
  return _s;
}
inline const std::string& CustomControllerResponse::_internal_stop() const {
  if (_internal_has_stop()) {
    return _impl_.command_.stop_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CustomControllerResponse::_internal_set_stop(const std::string& value) {
  if (!_internal_has_stop()) {
    clear_command();
    set_has_stop();
    _impl_.command_.stop_.InitDefault();
  }
  _impl_.command_.stop_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomControllerResponse::_internal_mutable_stop() {
  if (!_internal_has_stop()) {
    clear_command();
    set_has_stop();
    _impl_.command_.stop_.InitDefault();
  }
  return _impl_.command_.stop_.Mutable(      GetArenaForAllocation());
}
inline std::string* CustomControllerResponse::release_stop() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.stop)
  if (_internal_has_stop()) {
    clear_has_command();
    return _impl_.command_.stop_.Release();
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::set_allocated_stop(std::string* stop) {
  if (has_command()) {
    clear_command();
  }
  if (stop != nullptr) {
    set_has_stop();
    _impl_.command_.stop_.InitAllocated(stop, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomControllerResponse.stop)
}

// bool resolution = 110;
inline bool CustomControllerResponse::_internal_has_resolution() const {
  return command_case() == kResolution;
}
inline bool CustomControllerResponse::has_resolution() const {
  return _internal_has_resolution();
}
inline void CustomControllerResponse::set_has_resolution() {
  _impl_._oneof_case_[0] = kResolution;
}
inline void CustomControllerResponse::clear_resolution() {
  if (_internal_has_resolution()) {
    _impl_.command_.resolution_ = false;
    clear_has_command();
  }
}
inline bool CustomControllerResponse::_internal_resolution() const {
  if (_internal_has_resolution()) {
    return _impl_.command_.resolution_;
  }
  return false;
}
inline void CustomControllerResponse::_internal_set_resolution(bool value) {
  if (!_internal_has_resolution()) {
    clear_command();
    set_has_resolution();
  }
  _impl_.command_.resolution_ = value;
}
inline bool CustomControllerResponse::resolution() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.resolution)
  return _internal_resolution();
}
inline void CustomControllerResponse::set_resolution(bool value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerResponse.resolution)
}

// .maarpc.Handle image = 111;
inline bool CustomControllerResponse::_internal_has_image() const {
  return command_case() == kImage;
}
inline bool CustomControllerResponse::has_image() const {
  return _internal_has_image();
}
inline void CustomControllerResponse::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline ::maarpc::Handle* CustomControllerResponse::release_image() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.image)
  if (_internal_has_image()) {
    clear_has_command();
    ::maarpc::Handle* temp = _impl_.command_.image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::Handle& CustomControllerResponse::_internal_image() const {
  return _internal_has_image()
      ? *_impl_.command_.image_
      : reinterpret_cast< ::maarpc::Handle&>(::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& CustomControllerResponse::image() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.image)
  return _internal_image();
}
inline ::maarpc::Handle* CustomControllerResponse::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.image)
  if (_internal_has_image()) {
    clear_has_command();
    ::maarpc::Handle* temp = _impl_.command_.image_;
    _impl_.command_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_image(::maarpc::Handle* image) {
  clear_command();
  if (image) {
    set_has_image();
    _impl_.command_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.image)
}
inline ::maarpc::Handle* CustomControllerResponse::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_command();
    set_has_image();
    _impl_.command_.image_ = CreateMaybeMessage< ::maarpc::Handle >(GetArenaForAllocation());
  }
  return _impl_.command_.image_;
}
inline ::maarpc::Handle* CustomControllerResponse::mutable_image() {
  ::maarpc::Handle* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.image)
  return _msg;
}

// bool uuid = 112;
inline bool CustomControllerResponse::_internal_has_uuid() const {
  return command_case() == kUuid;
}
inline bool CustomControllerResponse::has_uuid() const {
  return _internal_has_uuid();
}
inline void CustomControllerResponse::set_has_uuid() {
  _impl_._oneof_case_[0] = kUuid;
}
inline void CustomControllerResponse::clear_uuid() {
  if (_internal_has_uuid()) {
    _impl_.command_.uuid_ = false;
    clear_has_command();
  }
}
inline bool CustomControllerResponse::_internal_uuid() const {
  if (_internal_has_uuid()) {
    return _impl_.command_.uuid_;
  }
  return false;
}
inline void CustomControllerResponse::_internal_set_uuid(bool value) {
  if (!_internal_has_uuid()) {
    clear_command();
    set_has_uuid();
  }
  _impl_.command_.uuid_ = value;
}
inline bool CustomControllerResponse::uuid() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.uuid)
  return _internal_uuid();
}
inline void CustomControllerResponse::set_uuid(bool value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomControllerResponse.uuid)
}

// .maarpc.CustomControllerSetOptionParam set_option = 200;
inline bool CustomControllerResponse::_internal_has_set_option() const {
  return command_case() == kSetOption;
}
inline bool CustomControllerResponse::has_set_option() const {
  return _internal_has_set_option();
}
inline void CustomControllerResponse::set_has_set_option() {
  _impl_._oneof_case_[0] = kSetOption;
}
inline void CustomControllerResponse::clear_set_option() {
  if (_internal_has_set_option()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.set_option_;
    }
    clear_has_command();
  }
}
inline ::maarpc::CustomControllerSetOptionParam* CustomControllerResponse::release_set_option() {
  // @@protoc_insertion_point(field_release:maarpc.CustomControllerResponse.set_option)
  if (_internal_has_set_option()) {
    clear_has_command();
    ::maarpc::CustomControllerSetOptionParam* temp = _impl_.command_.set_option_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.set_option_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomControllerSetOptionParam& CustomControllerResponse::_internal_set_option() const {
  return _internal_has_set_option()
      ? *_impl_.command_.set_option_
      : reinterpret_cast< ::maarpc::CustomControllerSetOptionParam&>(::maarpc::_CustomControllerSetOptionParam_default_instance_);
}
inline const ::maarpc::CustomControllerSetOptionParam& CustomControllerResponse::set_option() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomControllerResponse.set_option)
  return _internal_set_option();
}
inline ::maarpc::CustomControllerSetOptionParam* CustomControllerResponse::unsafe_arena_release_set_option() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomControllerResponse.set_option)
  if (_internal_has_set_option()) {
    clear_has_command();
    ::maarpc::CustomControllerSetOptionParam* temp = _impl_.command_.set_option_;
    _impl_.command_.set_option_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomControllerResponse::unsafe_arena_set_allocated_set_option(::maarpc::CustomControllerSetOptionParam* set_option) {
  clear_command();
  if (set_option) {
    set_has_set_option();
    _impl_.command_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomControllerResponse.set_option)
}
inline ::maarpc::CustomControllerSetOptionParam* CustomControllerResponse::_internal_mutable_set_option() {
  if (!_internal_has_set_option()) {
    clear_command();
    set_has_set_option();
    _impl_.command_.set_option_ = CreateMaybeMessage< ::maarpc::CustomControllerSetOptionParam >(GetArenaForAllocation());
  }
  return _impl_.command_.set_option_;
}
inline ::maarpc::CustomControllerSetOptionParam* CustomControllerResponse::mutable_set_option() {
  ::maarpc::CustomControllerSetOptionParam* _msg = _internal_mutable_set_option();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomControllerResponse.set_option)
  return _msg;
}

inline bool CustomControllerResponse::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CustomControllerResponse::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CustomControllerResponse::CommandCase CustomControllerResponse::command_case() const {
  return CustomControllerResponse::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubmitCustomControllerRequest

// optional .maarpc.Handle handle = 1;
inline bool SubmitCustomControllerRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SubmitCustomControllerRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SubmitCustomControllerRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SubmitCustomControllerRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomControllerRequest.handle)
  return _internal_handle();
}
inline void SubmitCustomControllerRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomControllerRequest.handle)
}
inline ::maarpc::Handle* SubmitCustomControllerRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SubmitCustomControllerRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomControllerRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SubmitCustomControllerRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SubmitCustomControllerRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomControllerRequest.handle)
  return _msg;
}
inline void SubmitCustomControllerRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomControllerRequest.handle)
}

// optional .maarpc.Id id = 2;
inline bool SubmitCustomControllerRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool SubmitCustomControllerRequest::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& SubmitCustomControllerRequest::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& SubmitCustomControllerRequest::id() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomControllerRequest.id)
  return _internal_id();
}
inline void SubmitCustomControllerRequest::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomControllerRequest.id)
}
inline ::maarpc::Id* SubmitCustomControllerRequest::release_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* SubmitCustomControllerRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomControllerRequest.id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* SubmitCustomControllerRequest::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* SubmitCustomControllerRequest::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomControllerRequest.id)
  return _msg;
}
inline void SubmitCustomControllerRequest::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomControllerRequest.id)
}

// optional bool ok = 3;
inline bool SubmitCustomControllerRequest::_internal_has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubmitCustomControllerRequest::has_ok() const {
  return _internal_has_ok();
}
inline void SubmitCustomControllerRequest::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SubmitCustomControllerRequest::_internal_ok() const {
  return _impl_.ok_;
}
inline bool SubmitCustomControllerRequest::ok() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomControllerRequest.ok)
  return _internal_ok();
}
inline void SubmitCustomControllerRequest::_internal_set_ok(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ok_ = value;
}
inline void SubmitCustomControllerRequest::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:maarpc.SubmitCustomControllerRequest.ok)
}

// .maarpc.Size resolution = 101;
inline bool SubmitCustomControllerRequest::_internal_has_resolution() const {
  return result_case() == kResolution;
}
inline bool SubmitCustomControllerRequest::has_resolution() const {
  return _internal_has_resolution();
}
inline void SubmitCustomControllerRequest::set_has_resolution() {
  _impl_._oneof_case_[0] = kResolution;
}
inline ::maarpc::Size* SubmitCustomControllerRequest::release_resolution() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomControllerRequest.resolution)
  if (_internal_has_resolution()) {
    clear_has_result();
    ::maarpc::Size* temp = _impl_.result_.resolution_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.resolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::Size& SubmitCustomControllerRequest::_internal_resolution() const {
  return _internal_has_resolution()
      ? *_impl_.result_.resolution_
      : reinterpret_cast< ::maarpc::Size&>(::maarpc::_Size_default_instance_);
}
inline const ::maarpc::Size& SubmitCustomControllerRequest::resolution() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomControllerRequest.resolution)
  return _internal_resolution();
}
inline ::maarpc::Size* SubmitCustomControllerRequest::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.SubmitCustomControllerRequest.resolution)
  if (_internal_has_resolution()) {
    clear_has_result();
    ::maarpc::Size* temp = _impl_.result_.resolution_;
    _impl_.result_.resolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitCustomControllerRequest::unsafe_arena_set_allocated_resolution(::maarpc::Size* resolution) {
  clear_result();
  if (resolution) {
    set_has_resolution();
    _impl_.result_.resolution_ = resolution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomControllerRequest.resolution)
}
inline ::maarpc::Size* SubmitCustomControllerRequest::_internal_mutable_resolution() {
  if (!_internal_has_resolution()) {
    clear_result();
    set_has_resolution();
    _impl_.result_.resolution_ = CreateMaybeMessage< ::maarpc::Size >(GetArenaForAllocation());
  }
  return _impl_.result_.resolution_;
}
inline ::maarpc::Size* SubmitCustomControllerRequest::mutable_resolution() {
  ::maarpc::Size* _msg = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomControllerRequest.resolution)
  return _msg;
}

// string uuid = 102;
inline bool SubmitCustomControllerRequest::_internal_has_uuid() const {
  return result_case() == kUuid;
}
inline bool SubmitCustomControllerRequest::has_uuid() const {
  return _internal_has_uuid();
}
inline void SubmitCustomControllerRequest::set_has_uuid() {
  _impl_._oneof_case_[0] = kUuid;
}
inline void SubmitCustomControllerRequest::clear_uuid() {
  if (_internal_has_uuid()) {
    _impl_.result_.uuid_.Destroy();
    clear_has_result();
  }
}
inline const std::string& SubmitCustomControllerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomControllerRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline void SubmitCustomControllerRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_uuid()) {
    clear_result();
    set_has_uuid();
    _impl_.result_.uuid_.InitDefault();
  }
  _impl_.result_.uuid_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SubmitCustomControllerRequest.uuid)
}
inline std::string* SubmitCustomControllerRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomControllerRequest.uuid)
  return _s;
}
inline const std::string& SubmitCustomControllerRequest::_internal_uuid() const {
  if (_internal_has_uuid()) {
    return _impl_.result_.uuid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SubmitCustomControllerRequest::_internal_set_uuid(const std::string& value) {
  if (!_internal_has_uuid()) {
    clear_result();
    set_has_uuid();
    _impl_.result_.uuid_.InitDefault();
  }
  _impl_.result_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SubmitCustomControllerRequest::_internal_mutable_uuid() {
  if (!_internal_has_uuid()) {
    clear_result();
    set_has_uuid();
    _impl_.result_.uuid_.InitDefault();
  }
  return _impl_.result_.uuid_.Mutable(      GetArenaForAllocation());
}
inline std::string* SubmitCustomControllerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomControllerRequest.uuid)
  if (_internal_has_uuid()) {
    clear_has_result();
    return _impl_.result_.uuid_.Release();
  } else {
    return nullptr;
  }
}
inline void SubmitCustomControllerRequest::set_allocated_uuid(std::string* uuid) {
  if (has_result()) {
    clear_result();
  }
  if (uuid != nullptr) {
    set_has_uuid();
    _impl_.result_.uuid_.InitAllocated(uuid, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomControllerRequest.uuid)
}

inline bool SubmitCustomControllerRequest::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void SubmitCustomControllerRequest::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline SubmitCustomControllerRequest::ResultCase SubmitCustomControllerRequest::result_case() const {
  return SubmitCustomControllerRequest::ResultCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerSetOptionRequest

// int32 long_side = 1;
inline bool ControllerSetOptionRequest::_internal_has_long_side() const {
  return option_case() == kLongSide;
}
inline bool ControllerSetOptionRequest::has_long_side() const {
  return _internal_has_long_side();
}
inline void ControllerSetOptionRequest::set_has_long_side() {
  _impl_._oneof_case_[0] = kLongSide;
}
inline void ControllerSetOptionRequest::clear_long_side() {
  if (_internal_has_long_side()) {
    _impl_.option_.long_side_ = 0;
    clear_has_option();
  }
}
inline int32_t ControllerSetOptionRequest::_internal_long_side() const {
  if (_internal_has_long_side()) {
    return _impl_.option_.long_side_;
  }
  return 0;
}
inline void ControllerSetOptionRequest::_internal_set_long_side(int32_t value) {
  if (!_internal_has_long_side()) {
    clear_option();
    set_has_long_side();
  }
  _impl_.option_.long_side_ = value;
}
inline int32_t ControllerSetOptionRequest::long_side() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.long_side)
  return _internal_long_side();
}
inline void ControllerSetOptionRequest::set_long_side(int32_t value) {
  _internal_set_long_side(value);
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.long_side)
}

// int32 short_side = 2;
inline bool ControllerSetOptionRequest::_internal_has_short_side() const {
  return option_case() == kShortSide;
}
inline bool ControllerSetOptionRequest::has_short_side() const {
  return _internal_has_short_side();
}
inline void ControllerSetOptionRequest::set_has_short_side() {
  _impl_._oneof_case_[0] = kShortSide;
}
inline void ControllerSetOptionRequest::clear_short_side() {
  if (_internal_has_short_side()) {
    _impl_.option_.short_side_ = 0;
    clear_has_option();
  }
}
inline int32_t ControllerSetOptionRequest::_internal_short_side() const {
  if (_internal_has_short_side()) {
    return _impl_.option_.short_side_;
  }
  return 0;
}
inline void ControllerSetOptionRequest::_internal_set_short_side(int32_t value) {
  if (!_internal_has_short_side()) {
    clear_option();
    set_has_short_side();
  }
  _impl_.option_.short_side_ = value;
}
inline int32_t ControllerSetOptionRequest::short_side() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.short_side)
  return _internal_short_side();
}
inline void ControllerSetOptionRequest::set_short_side(int32_t value) {
  _internal_set_short_side(value);
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.short_side)
}

// string def_package_entry = 3;
inline bool ControllerSetOptionRequest::_internal_has_def_package_entry() const {
  return option_case() == kDefPackageEntry;
}
inline bool ControllerSetOptionRequest::has_def_package_entry() const {
  return _internal_has_def_package_entry();
}
inline void ControllerSetOptionRequest::set_has_def_package_entry() {
  _impl_._oneof_case_[0] = kDefPackageEntry;
}
inline void ControllerSetOptionRequest::clear_def_package_entry() {
  if (_internal_has_def_package_entry()) {
    _impl_.option_.def_package_entry_.Destroy();
    clear_has_option();
  }
}
inline const std::string& ControllerSetOptionRequest::def_package_entry() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.def_package_entry)
  return _internal_def_package_entry();
}
template <typename ArgT0, typename... ArgT>
inline void ControllerSetOptionRequest::set_def_package_entry(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_def_package_entry()) {
    clear_option();
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitDefault();
  }
  _impl_.option_.def_package_entry_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.def_package_entry)
}
inline std::string* ControllerSetOptionRequest::mutable_def_package_entry() {
  std::string* _s = _internal_mutable_def_package_entry();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerSetOptionRequest.def_package_entry)
  return _s;
}
inline const std::string& ControllerSetOptionRequest::_internal_def_package_entry() const {
  if (_internal_has_def_package_entry()) {
    return _impl_.option_.def_package_entry_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ControllerSetOptionRequest::_internal_set_def_package_entry(const std::string& value) {
  if (!_internal_has_def_package_entry()) {
    clear_option();
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitDefault();
  }
  _impl_.option_.def_package_entry_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::_internal_mutable_def_package_entry() {
  if (!_internal_has_def_package_entry()) {
    clear_option();
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitDefault();
  }
  return _impl_.option_.def_package_entry_.Mutable(      GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::release_def_package_entry() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerSetOptionRequest.def_package_entry)
  if (_internal_has_def_package_entry()) {
    clear_has_option();
    return _impl_.option_.def_package_entry_.Release();
  } else {
    return nullptr;
  }
}
inline void ControllerSetOptionRequest::set_allocated_def_package_entry(std::string* def_package_entry) {
  if (has_option()) {
    clear_option();
  }
  if (def_package_entry != nullptr) {
    set_has_def_package_entry();
    _impl_.option_.def_package_entry_.InitAllocated(def_package_entry, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerSetOptionRequest.def_package_entry)
}

// string def_package = 4;
inline bool ControllerSetOptionRequest::_internal_has_def_package() const {
  return option_case() == kDefPackage;
}
inline bool ControllerSetOptionRequest::has_def_package() const {
  return _internal_has_def_package();
}
inline void ControllerSetOptionRequest::set_has_def_package() {
  _impl_._oneof_case_[0] = kDefPackage;
}
inline void ControllerSetOptionRequest::clear_def_package() {
  if (_internal_has_def_package()) {
    _impl_.option_.def_package_.Destroy();
    clear_has_option();
  }
}
inline const std::string& ControllerSetOptionRequest::def_package() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerSetOptionRequest.def_package)
  return _internal_def_package();
}
template <typename ArgT0, typename... ArgT>
inline void ControllerSetOptionRequest::set_def_package(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_def_package()) {
    clear_option();
    set_has_def_package();
    _impl_.option_.def_package_.InitDefault();
  }
  _impl_.option_.def_package_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.ControllerSetOptionRequest.def_package)
}
inline std::string* ControllerSetOptionRequest::mutable_def_package() {
  std::string* _s = _internal_mutable_def_package();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerSetOptionRequest.def_package)
  return _s;
}
inline const std::string& ControllerSetOptionRequest::_internal_def_package() const {
  if (_internal_has_def_package()) {
    return _impl_.option_.def_package_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ControllerSetOptionRequest::_internal_set_def_package(const std::string& value) {
  if (!_internal_has_def_package()) {
    clear_option();
    set_has_def_package();
    _impl_.option_.def_package_.InitDefault();
  }
  _impl_.option_.def_package_.Set(value, GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::_internal_mutable_def_package() {
  if (!_internal_has_def_package()) {
    clear_option();
    set_has_def_package();
    _impl_.option_.def_package_.InitDefault();
  }
  return _impl_.option_.def_package_.Mutable(      GetArenaForAllocation());
}
inline std::string* ControllerSetOptionRequest::release_def_package() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerSetOptionRequest.def_package)
  if (_internal_has_def_package()) {
    clear_has_option();
    return _impl_.option_.def_package_.Release();
  } else {
    return nullptr;
  }
}
inline void ControllerSetOptionRequest::set_allocated_def_package(std::string* def_package) {
  if (has_option()) {
    clear_option();
  }
  if (def_package != nullptr) {
    set_has_def_package();
    _impl_.option_.def_package_.InitAllocated(def_package, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerSetOptionRequest.def_package)
}

inline bool ControllerSetOptionRequest::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
inline void ControllerSetOptionRequest::clear_has_option() {
  _impl_._oneof_case_[0] = OPTION_NOT_SET;
}
inline ControllerSetOptionRequest::OptionCase ControllerSetOptionRequest::option_case() const {
  return ControllerSetOptionRequest::OptionCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerPostClickRequest

// optional .maarpc.Handle handle = 1;
inline bool ControllerPostClickRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool ControllerPostClickRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& ControllerPostClickRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& ControllerPostClickRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostClickRequest.handle)
  return _internal_handle();
}
inline void ControllerPostClickRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostClickRequest.handle)
}
inline ::maarpc::Handle* ControllerPostClickRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* ControllerPostClickRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostClickRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* ControllerPostClickRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* ControllerPostClickRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostClickRequest.handle)
  return _msg;
}
inline void ControllerPostClickRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostClickRequest.handle)
}

// optional .maarpc.ClickParam param = 2;
inline bool ControllerPostClickRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostClickRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::ClickParam& ControllerPostClickRequest::_internal_param() const {
  const ::maarpc::ClickParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::ClickParam&>(
      ::maarpc::_ClickParam_default_instance_);
}
inline const ::maarpc::ClickParam& ControllerPostClickRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostClickRequest.param)
  return _internal_param();
}
inline void ControllerPostClickRequest::unsafe_arena_set_allocated_param(
    ::maarpc::ClickParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostClickRequest.param)
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::ClickParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostClickRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::ClickParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::ClickParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::ClickParam* ControllerPostClickRequest::mutable_param() {
  ::maarpc::ClickParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostClickRequest.param)
  return _msg;
}
inline void ControllerPostClickRequest::set_allocated_param(::maarpc::ClickParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostClickRequest.param)
}

// -------------------------------------------------------------------

// ControllerPostSwipeRequest

// optional .maarpc.Handle handle = 1;
inline bool ControllerPostSwipeRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool ControllerPostSwipeRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& ControllerPostSwipeRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& ControllerPostSwipeRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostSwipeRequest.handle)
  return _internal_handle();
}
inline void ControllerPostSwipeRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostSwipeRequest.handle)
}
inline ::maarpc::Handle* ControllerPostSwipeRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* ControllerPostSwipeRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostSwipeRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* ControllerPostSwipeRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* ControllerPostSwipeRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostSwipeRequest.handle)
  return _msg;
}
inline void ControllerPostSwipeRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostSwipeRequest.handle)
}

// optional .maarpc.SwipeParam param = 2;
inline bool ControllerPostSwipeRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostSwipeRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::SwipeParam& ControllerPostSwipeRequest::_internal_param() const {
  const ::maarpc::SwipeParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::SwipeParam&>(
      ::maarpc::_SwipeParam_default_instance_);
}
inline const ::maarpc::SwipeParam& ControllerPostSwipeRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostSwipeRequest.param)
  return _internal_param();
}
inline void ControllerPostSwipeRequest::unsafe_arena_set_allocated_param(
    ::maarpc::SwipeParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostSwipeRequest.param)
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::SwipeParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostSwipeRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::SwipeParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::SwipeParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::SwipeParam* ControllerPostSwipeRequest::mutable_param() {
  ::maarpc::SwipeParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostSwipeRequest.param)
  return _msg;
}
inline void ControllerPostSwipeRequest::set_allocated_param(::maarpc::SwipeParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostSwipeRequest.param)
}

// -------------------------------------------------------------------

// ControllerPostKeyRequest

// optional .maarpc.Handle handle = 1;
inline bool ControllerPostKeyRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool ControllerPostKeyRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& ControllerPostKeyRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& ControllerPostKeyRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostKeyRequest.handle)
  return _internal_handle();
}
inline void ControllerPostKeyRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostKeyRequest.handle)
}
inline ::maarpc::Handle* ControllerPostKeyRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* ControllerPostKeyRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostKeyRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* ControllerPostKeyRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* ControllerPostKeyRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostKeyRequest.handle)
  return _msg;
}
inline void ControllerPostKeyRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostKeyRequest.handle)
}

// optional .maarpc.KeyParam param = 2;
inline bool ControllerPostKeyRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostKeyRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::KeyParam& ControllerPostKeyRequest::_internal_param() const {
  const ::maarpc::KeyParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::KeyParam&>(
      ::maarpc::_KeyParam_default_instance_);
}
inline const ::maarpc::KeyParam& ControllerPostKeyRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostKeyRequest.param)
  return _internal_param();
}
inline void ControllerPostKeyRequest::unsafe_arena_set_allocated_param(
    ::maarpc::KeyParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostKeyRequest.param)
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::KeyParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostKeyRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::KeyParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::KeyParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::KeyParam* ControllerPostKeyRequest::mutable_param() {
  ::maarpc::KeyParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostKeyRequest.param)
  return _msg;
}
inline void ControllerPostKeyRequest::set_allocated_param(::maarpc::KeyParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostKeyRequest.param)
}

// -------------------------------------------------------------------

// ControllerPostTouchRequest

// optional .maarpc.Handle handle = 1;
inline bool ControllerPostTouchRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool ControllerPostTouchRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& ControllerPostTouchRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& ControllerPostTouchRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostTouchRequest.handle)
  return _internal_handle();
}
inline void ControllerPostTouchRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostTouchRequest.handle)
}
inline ::maarpc::Handle* ControllerPostTouchRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* ControllerPostTouchRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostTouchRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* ControllerPostTouchRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* ControllerPostTouchRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostTouchRequest.handle)
  return _msg;
}
inline void ControllerPostTouchRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostTouchRequest.handle)
}

// optional .maarpc.TouchParam param = 2;
inline bool ControllerPostTouchRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool ControllerPostTouchRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::TouchParam& ControllerPostTouchRequest::_internal_param() const {
  const ::maarpc::TouchParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::TouchParam&>(
      ::maarpc::_TouchParam_default_instance_);
}
inline const ::maarpc::TouchParam& ControllerPostTouchRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerPostTouchRequest.param)
  return _internal_param();
}
inline void ControllerPostTouchRequest::unsafe_arena_set_allocated_param(
    ::maarpc::TouchParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerPostTouchRequest.param)
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::TouchParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerPostTouchRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::TouchParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::TouchParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::TouchParam* ControllerPostTouchRequest::mutable_param() {
  ::maarpc::TouchParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerPostTouchRequest.param)
  return _msg;
}
inline void ControllerPostTouchRequest::set_allocated_param(::maarpc::TouchParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerPostTouchRequest.param)
}

// -------------------------------------------------------------------

// ControllerGetImageRequest

// optional .maarpc.Handle handle = 1;
inline bool ControllerGetImageRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool ControllerGetImageRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& ControllerGetImageRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& ControllerGetImageRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerGetImageRequest.handle)
  return _internal_handle();
}
inline void ControllerGetImageRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerGetImageRequest.handle)
}
inline ::maarpc::Handle* ControllerGetImageRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* ControllerGetImageRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerGetImageRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* ControllerGetImageRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* ControllerGetImageRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerGetImageRequest.handle)
  return _msg;
}
inline void ControllerGetImageRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerGetImageRequest.handle)
}

// optional .maarpc.Handle image = 2;
inline bool ControllerGetImageRequest::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool ControllerGetImageRequest::has_image() const {
  return _internal_has_image();
}
inline const ::maarpc::Handle& ControllerGetImageRequest::_internal_image() const {
  const ::maarpc::Handle* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& ControllerGetImageRequest::image() const {
  // @@protoc_insertion_point(field_get:maarpc.ControllerGetImageRequest.image)
  return _internal_image();
}
inline void ControllerGetImageRequest::unsafe_arena_set_allocated_image(
    ::maarpc::Handle* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.ControllerGetImageRequest.image)
}
inline ::maarpc::Handle* ControllerGetImageRequest::release_image() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* ControllerGetImageRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:maarpc.ControllerGetImageRequest.image)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* ControllerGetImageRequest::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::maarpc::Handle* ControllerGetImageRequest::mutable_image() {
  ::maarpc::Handle* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:maarpc.ControllerGetImageRequest.image)
  return _msg;
}
inline void ControllerGetImageRequest::set_allocated_image(::maarpc::Handle* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:maarpc.ControllerGetImageRequest.image)
}

// -------------------------------------------------------------------

// CustomRecognizerRequest

// optional .maarpc.Handle handle = 1;
inline bool CustomRecognizerRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool CustomRecognizerRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& CustomRecognizerRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& CustomRecognizerRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerRequest.handle)
  return _internal_handle();
}
inline void CustomRecognizerRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerRequest.handle)
}
inline ::maarpc::Handle* CustomRecognizerRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* CustomRecognizerRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* CustomRecognizerRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* CustomRecognizerRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerRequest.handle)
  return _msg;
}
inline void CustomRecognizerRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerRequest.handle)
}

// optional string name = 2;
inline bool CustomRecognizerRequest::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerRequest::has_name() const {
  return _internal_has_name();
}
inline void CustomRecognizerRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRecognizerRequest::name() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerRequest.name)
}
inline std::string* CustomRecognizerRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerRequest.name)
  return _s;
}
inline const std::string& CustomRecognizerRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CustomRecognizerRequest::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerRequest::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerRequest::release_name() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerRequest.name)
}

// optional .maarpc.Id reco = 3;
inline bool CustomRecognizerRequest::_internal_has_reco() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reco_ != nullptr);
  return value;
}
inline bool CustomRecognizerRequest::has_reco() const {
  return _internal_has_reco();
}
inline const ::maarpc::Id& CustomRecognizerRequest::_internal_reco() const {
  const ::maarpc::Id* p = _impl_.reco_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomRecognizerRequest::reco() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerRequest.reco)
  return _internal_reco();
}
inline void CustomRecognizerRequest::unsafe_arena_set_allocated_reco(
    ::maarpc::Id* reco) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reco_);
  }
  _impl_.reco_ = reco;
  if (reco) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerRequest.reco)
}
inline ::maarpc::Id* CustomRecognizerRequest::release_reco() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Id* temp = _impl_.reco_;
  _impl_.reco_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomRecognizerRequest::unsafe_arena_release_reco() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerRequest.reco)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Id* temp = _impl_.reco_;
  _impl_.reco_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomRecognizerRequest::_internal_mutable_reco() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.reco_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.reco_ = p;
  }
  return _impl_.reco_;
}
inline ::maarpc::Id* CustomRecognizerRequest::mutable_reco() {
  ::maarpc::Id* _msg = _internal_mutable_reco();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerRequest.reco)
  return _msg;
}
inline void CustomRecognizerRequest::set_allocated_reco(::maarpc::Id* reco) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reco_);
  }
  if (reco) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reco));
    if (message_arena != submessage_arena) {
      reco = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reco, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.reco_ = reco;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerRequest.reco)
}

// -------------------------------------------------------------------

// CustomRecognizerAnalyzeParam

// optional .maarpc.Handle context = 1;
inline bool CustomRecognizerAnalyzeParam::_internal_has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.context_ != nullptr);
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_context() const {
  return _internal_has_context();
}
inline const ::maarpc::Handle& CustomRecognizerAnalyzeParam::_internal_context() const {
  const ::maarpc::Handle* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& CustomRecognizerAnalyzeParam::context() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.context)
  return _internal_context();
}
inline void CustomRecognizerAnalyzeParam::unsafe_arena_set_allocated_context(
    ::maarpc::Handle* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerAnalyzeParam.context)
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::release_context() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.context)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::_internal_mutable_context() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::mutable_context() {
  ::maarpc::Handle* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.context)
  return _msg;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_context(::maarpc::Handle* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.context)
}

// optional .maarpc.Handle image = 2;
inline bool CustomRecognizerAnalyzeParam::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_image() const {
  return _internal_has_image();
}
inline const ::maarpc::Handle& CustomRecognizerAnalyzeParam::_internal_image() const {
  const ::maarpc::Handle* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& CustomRecognizerAnalyzeParam::image() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.image)
  return _internal_image();
}
inline void CustomRecognizerAnalyzeParam::unsafe_arena_set_allocated_image(
    ::maarpc::Handle* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerAnalyzeParam.image)
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::release_image() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.image)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::maarpc::Handle* CustomRecognizerAnalyzeParam::mutable_image() {
  ::maarpc::Handle* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.image)
  return _msg;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_image(::maarpc::Handle* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.image)
}

// optional string task = 3;
inline bool CustomRecognizerAnalyzeParam::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_task() const {
  return _internal_has_task();
}
inline void CustomRecognizerAnalyzeParam::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRecognizerAnalyzeParam::task() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeParam::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeParam.task)
}
inline std::string* CustomRecognizerAnalyzeParam::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.task)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeParam::_internal_task() const {
  return _impl_.task_.Get();
}
inline void CustomRecognizerAnalyzeParam::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.task)
}

// optional string param = 4;
inline bool CustomRecognizerAnalyzeParam::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeParam::has_param() const {
  return _internal_has_param();
}
inline void CustomRecognizerAnalyzeParam::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomRecognizerAnalyzeParam::param() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeParam.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeParam::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeParam.param)
}
inline std::string* CustomRecognizerAnalyzeParam::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeParam.param)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeParam::_internal_param() const {
  return _impl_.param_.Get();
}
inline void CustomRecognizerAnalyzeParam::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeParam::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeParam.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeParam::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeParam.param)
}

// -------------------------------------------------------------------

// CustomRecognizerResponse

// optional .maarpc.Id reco = 1;
inline bool CustomRecognizerResponse::_internal_has_reco() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reco_ != nullptr);
  return value;
}
inline bool CustomRecognizerResponse::has_reco() const {
  return _internal_has_reco();
}
inline const ::maarpc::Id& CustomRecognizerResponse::_internal_reco() const {
  const ::maarpc::Id* p = _impl_.reco_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomRecognizerResponse::reco() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerResponse.reco)
  return _internal_reco();
}
inline void CustomRecognizerResponse::unsafe_arena_set_allocated_reco(
    ::maarpc::Id* reco) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reco_);
  }
  _impl_.reco_ = reco;
  if (reco) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerResponse.reco)
}
inline ::maarpc::Id* CustomRecognizerResponse::release_reco() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.reco_;
  _impl_.reco_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomRecognizerResponse::unsafe_arena_release_reco() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerResponse.reco)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.reco_;
  _impl_.reco_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomRecognizerResponse::_internal_mutable_reco() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.reco_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.reco_ = p;
  }
  return _impl_.reco_;
}
inline ::maarpc::Id* CustomRecognizerResponse::mutable_reco() {
  ::maarpc::Id* _msg = _internal_mutable_reco();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerResponse.reco)
  return _msg;
}
inline void CustomRecognizerResponse::set_allocated_reco(::maarpc::Id* reco) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reco_);
  }
  if (reco) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reco));
    if (message_arena != submessage_arena) {
      reco = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reco, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reco_ = reco;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerResponse.reco)
}

// optional .maarpc.Id id = 2;
inline bool CustomRecognizerResponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool CustomRecognizerResponse::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& CustomRecognizerResponse::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomRecognizerResponse::id() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerResponse.id)
  return _internal_id();
}
inline void CustomRecognizerResponse::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerResponse.id)
}
inline ::maarpc::Id* CustomRecognizerResponse::release_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomRecognizerResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerResponse.id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomRecognizerResponse::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* CustomRecognizerResponse::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerResponse.id)
  return _msg;
}
inline void CustomRecognizerResponse::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerResponse.id)
}

// .maarpc.CustomRecognizerAnalyzeParam analyze = 101;
inline bool CustomRecognizerResponse::_internal_has_analyze() const {
  return command_case() == kAnalyze;
}
inline bool CustomRecognizerResponse::has_analyze() const {
  return _internal_has_analyze();
}
inline void CustomRecognizerResponse::set_has_analyze() {
  _impl_._oneof_case_[0] = kAnalyze;
}
inline void CustomRecognizerResponse::clear_analyze() {
  if (_internal_has_analyze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.analyze_;
    }
    clear_has_command();
  }
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::release_analyze() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerResponse.analyze)
  if (_internal_has_analyze()) {
    clear_has_command();
    ::maarpc::CustomRecognizerAnalyzeParam* temp = _impl_.command_.analyze_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomRecognizerAnalyzeParam& CustomRecognizerResponse::_internal_analyze() const {
  return _internal_has_analyze()
      ? *_impl_.command_.analyze_
      : reinterpret_cast< ::maarpc::CustomRecognizerAnalyzeParam&>(::maarpc::_CustomRecognizerAnalyzeParam_default_instance_);
}
inline const ::maarpc::CustomRecognizerAnalyzeParam& CustomRecognizerResponse::analyze() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerResponse.analyze)
  return _internal_analyze();
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::unsafe_arena_release_analyze() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomRecognizerResponse.analyze)
  if (_internal_has_analyze()) {
    clear_has_command();
    ::maarpc::CustomRecognizerAnalyzeParam* temp = _impl_.command_.analyze_;
    _impl_.command_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomRecognizerResponse::unsafe_arena_set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeParam* analyze) {
  clear_command();
  if (analyze) {
    set_has_analyze();
    _impl_.command_.analyze_ = analyze;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerResponse.analyze)
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::_internal_mutable_analyze() {
  if (!_internal_has_analyze()) {
    clear_command();
    set_has_analyze();
    _impl_.command_.analyze_ = CreateMaybeMessage< ::maarpc::CustomRecognizerAnalyzeParam >(GetArenaForAllocation());
  }
  return _impl_.command_.analyze_;
}
inline ::maarpc::CustomRecognizerAnalyzeParam* CustomRecognizerResponse::mutable_analyze() {
  ::maarpc::CustomRecognizerAnalyzeParam* _msg = _internal_mutable_analyze();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerResponse.analyze)
  return _msg;
}

inline bool CustomRecognizerResponse::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CustomRecognizerResponse::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CustomRecognizerResponse::CommandCase CustomRecognizerResponse::command_case() const {
  return CustomRecognizerResponse::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomRecognizerAnalyzeResult

// optional bool match = 1;
inline bool CustomRecognizerAnalyzeResult::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeResult::has_match() const {
  return _internal_has_match();
}
inline void CustomRecognizerAnalyzeResult::clear_match() {
  _impl_.match_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CustomRecognizerAnalyzeResult::_internal_match() const {
  return _impl_.match_;
}
inline bool CustomRecognizerAnalyzeResult::match() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeResult.match)
  return _internal_match();
}
inline void CustomRecognizerAnalyzeResult::_internal_set_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_ = value;
}
inline void CustomRecognizerAnalyzeResult::set_match(bool value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeResult.match)
}

// optional .maarpc.Rect box = 2;
inline bool CustomRecognizerAnalyzeResult::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box_ != nullptr);
  return value;
}
inline bool CustomRecognizerAnalyzeResult::has_box() const {
  return _internal_has_box();
}
inline const ::maarpc::Rect& CustomRecognizerAnalyzeResult::_internal_box() const {
  const ::maarpc::Rect* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Rect&>(
      ::maarpc::_Rect_default_instance_);
}
inline const ::maarpc::Rect& CustomRecognizerAnalyzeResult::box() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeResult.box)
  return _internal_box();
}
inline void CustomRecognizerAnalyzeResult::unsafe_arena_set_allocated_box(
    ::maarpc::Rect* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomRecognizerAnalyzeResult.box)
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::release_box() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeResult.box)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Rect>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::maarpc::Rect* CustomRecognizerAnalyzeResult::mutable_box() {
  ::maarpc::Rect* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeResult.box)
  return _msg;
}
inline void CustomRecognizerAnalyzeResult::set_allocated_box(::maarpc::Rect* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box));
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeResult.box)
}

// optional string detail = 3;
inline bool CustomRecognizerAnalyzeResult::_internal_has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomRecognizerAnalyzeResult::has_detail() const {
  return _internal_has_detail();
}
inline void CustomRecognizerAnalyzeResult::clear_detail() {
  _impl_.detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomRecognizerAnalyzeResult::detail() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomRecognizerAnalyzeResult.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomRecognizerAnalyzeResult::set_detail(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomRecognizerAnalyzeResult.detail)
}
inline std::string* CustomRecognizerAnalyzeResult::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomRecognizerAnalyzeResult.detail)
  return _s;
}
inline const std::string& CustomRecognizerAnalyzeResult::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void CustomRecognizerAnalyzeResult::_internal_set_detail(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeResult::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomRecognizerAnalyzeResult::release_detail() {
  // @@protoc_insertion_point(field_release:maarpc.CustomRecognizerAnalyzeResult.detail)
  if (!_internal_has_detail()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.detail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomRecognizerAnalyzeResult::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomRecognizerAnalyzeResult.detail)
}

// -------------------------------------------------------------------

// SubmitCustomRecognizerRequest

// optional .maarpc.Handle handle = 1;
inline bool SubmitCustomRecognizerRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SubmitCustomRecognizerRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SubmitCustomRecognizerRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SubmitCustomRecognizerRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomRecognizerRequest.handle)
  return _internal_handle();
}
inline void SubmitCustomRecognizerRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomRecognizerRequest.handle)
}
inline ::maarpc::Handle* SubmitCustomRecognizerRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SubmitCustomRecognizerRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomRecognizerRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SubmitCustomRecognizerRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SubmitCustomRecognizerRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomRecognizerRequest.handle)
  return _msg;
}
inline void SubmitCustomRecognizerRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomRecognizerRequest.handle)
}

// optional .maarpc.Id id = 2;
inline bool SubmitCustomRecognizerRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool SubmitCustomRecognizerRequest::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& SubmitCustomRecognizerRequest::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& SubmitCustomRecognizerRequest::id() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomRecognizerRequest.id)
  return _internal_id();
}
inline void SubmitCustomRecognizerRequest::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomRecognizerRequest.id)
}
inline ::maarpc::Id* SubmitCustomRecognizerRequest::release_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* SubmitCustomRecognizerRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomRecognizerRequest.id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* SubmitCustomRecognizerRequest::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* SubmitCustomRecognizerRequest::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomRecognizerRequest.id)
  return _msg;
}
inline void SubmitCustomRecognizerRequest::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomRecognizerRequest.id)
}

// optional bool ok = 3;
inline bool SubmitCustomRecognizerRequest::_internal_has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubmitCustomRecognizerRequest::has_ok() const {
  return _internal_has_ok();
}
inline void SubmitCustomRecognizerRequest::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SubmitCustomRecognizerRequest::_internal_ok() const {
  return _impl_.ok_;
}
inline bool SubmitCustomRecognizerRequest::ok() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomRecognizerRequest.ok)
  return _internal_ok();
}
inline void SubmitCustomRecognizerRequest::_internal_set_ok(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ok_ = value;
}
inline void SubmitCustomRecognizerRequest::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:maarpc.SubmitCustomRecognizerRequest.ok)
}

// .maarpc.CustomRecognizerAnalyzeResult analyze = 101;
inline bool SubmitCustomRecognizerRequest::_internal_has_analyze() const {
  return result_case() == kAnalyze;
}
inline bool SubmitCustomRecognizerRequest::has_analyze() const {
  return _internal_has_analyze();
}
inline void SubmitCustomRecognizerRequest::set_has_analyze() {
  _impl_._oneof_case_[0] = kAnalyze;
}
inline void SubmitCustomRecognizerRequest::clear_analyze() {
  if (_internal_has_analyze()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.analyze_;
    }
    clear_has_result();
  }
}
inline ::maarpc::CustomRecognizerAnalyzeResult* SubmitCustomRecognizerRequest::release_analyze() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomRecognizerRequest.analyze)
  if (_internal_has_analyze()) {
    clear_has_result();
    ::maarpc::CustomRecognizerAnalyzeResult* temp = _impl_.result_.analyze_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomRecognizerAnalyzeResult& SubmitCustomRecognizerRequest::_internal_analyze() const {
  return _internal_has_analyze()
      ? *_impl_.result_.analyze_
      : reinterpret_cast< ::maarpc::CustomRecognizerAnalyzeResult&>(::maarpc::_CustomRecognizerAnalyzeResult_default_instance_);
}
inline const ::maarpc::CustomRecognizerAnalyzeResult& SubmitCustomRecognizerRequest::analyze() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomRecognizerRequest.analyze)
  return _internal_analyze();
}
inline ::maarpc::CustomRecognizerAnalyzeResult* SubmitCustomRecognizerRequest::unsafe_arena_release_analyze() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.SubmitCustomRecognizerRequest.analyze)
  if (_internal_has_analyze()) {
    clear_has_result();
    ::maarpc::CustomRecognizerAnalyzeResult* temp = _impl_.result_.analyze_;
    _impl_.result_.analyze_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubmitCustomRecognizerRequest::unsafe_arena_set_allocated_analyze(::maarpc::CustomRecognizerAnalyzeResult* analyze) {
  clear_result();
  if (analyze) {
    set_has_analyze();
    _impl_.result_.analyze_ = analyze;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomRecognizerRequest.analyze)
}
inline ::maarpc::CustomRecognizerAnalyzeResult* SubmitCustomRecognizerRequest::_internal_mutable_analyze() {
  if (!_internal_has_analyze()) {
    clear_result();
    set_has_analyze();
    _impl_.result_.analyze_ = CreateMaybeMessage< ::maarpc::CustomRecognizerAnalyzeResult >(GetArenaForAllocation());
  }
  return _impl_.result_.analyze_;
}
inline ::maarpc::CustomRecognizerAnalyzeResult* SubmitCustomRecognizerRequest::mutable_analyze() {
  ::maarpc::CustomRecognizerAnalyzeResult* _msg = _internal_mutable_analyze();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomRecognizerRequest.analyze)
  return _msg;
}

inline bool SubmitCustomRecognizerRequest::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void SubmitCustomRecognizerRequest::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline SubmitCustomRecognizerRequest::ResultCase SubmitCustomRecognizerRequest::result_case() const {
  return SubmitCustomRecognizerRequest::ResultCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomActionRequest

// optional .maarpc.Handle handle = 1;
inline bool CustomActionRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool CustomActionRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& CustomActionRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& CustomActionRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRequest.handle)
  return _internal_handle();
}
inline void CustomActionRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionRequest.handle)
}
inline ::maarpc::Handle* CustomActionRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* CustomActionRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* CustomActionRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* CustomActionRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRequest.handle)
  return _msg;
}
inline void CustomActionRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRequest.handle)
}

// optional string name = 2;
inline bool CustomActionRequest::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomActionRequest::has_name() const {
  return _internal_has_name();
}
inline void CustomActionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomActionRequest::name() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRequest.name)
}
inline std::string* CustomActionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRequest.name)
  return _s;
}
inline const std::string& CustomActionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CustomActionRequest::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRequest::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRequest::release_name() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRequest.name)
}

// optional .maarpc.Id act = 3;
inline bool CustomActionRequest::_internal_has_act() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.act_ != nullptr);
  return value;
}
inline bool CustomActionRequest::has_act() const {
  return _internal_has_act();
}
inline const ::maarpc::Id& CustomActionRequest::_internal_act() const {
  const ::maarpc::Id* p = _impl_.act_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomActionRequest::act() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRequest.act)
  return _internal_act();
}
inline void CustomActionRequest::unsafe_arena_set_allocated_act(
    ::maarpc::Id* act) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.act_);
  }
  _impl_.act_ = act;
  if (act) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionRequest.act)
}
inline ::maarpc::Id* CustomActionRequest::release_act() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Id* temp = _impl_.act_;
  _impl_.act_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomActionRequest::unsafe_arena_release_act() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRequest.act)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Id* temp = _impl_.act_;
  _impl_.act_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomActionRequest::_internal_mutable_act() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.act_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.act_ = p;
  }
  return _impl_.act_;
}
inline ::maarpc::Id* CustomActionRequest::mutable_act() {
  ::maarpc::Id* _msg = _internal_mutable_act();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRequest.act)
  return _msg;
}
inline void CustomActionRequest::set_allocated_act(::maarpc::Id* act) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.act_);
  }
  if (act) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(act));
    if (message_arena != submessage_arena) {
      act = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.act_ = act;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRequest.act)
}

// -------------------------------------------------------------------

// CustomActionRunParam

// optional .maarpc.Handle context = 1;
inline bool CustomActionRunParam::_internal_has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.context_ != nullptr);
  return value;
}
inline bool CustomActionRunParam::has_context() const {
  return _internal_has_context();
}
inline const ::maarpc::Handle& CustomActionRunParam::_internal_context() const {
  const ::maarpc::Handle* p = _impl_.context_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& CustomActionRunParam::context() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.context)
  return _internal_context();
}
inline void CustomActionRunParam::unsafe_arena_set_allocated_context(
    ::maarpc::Handle* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  _impl_.context_ = context;
  if (context) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionRunParam.context)
}
inline ::maarpc::Handle* CustomActionRunParam::release_context() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.context_;
  _impl_.context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* CustomActionRunParam::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.context)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.context_;
  _impl_.context_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* CustomActionRunParam::_internal_mutable_context() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.context_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.context_ = p;
  }
  return _impl_.context_;
}
inline ::maarpc::Handle* CustomActionRunParam::mutable_context() {
  ::maarpc::Handle* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.context)
  return _msg;
}
inline void CustomActionRunParam::set_allocated_context(::maarpc::Handle* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.context_ = context;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.context)
}

// optional string task = 2;
inline bool CustomActionRunParam::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_task() const {
  return _internal_has_task();
}
inline void CustomActionRunParam::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomActionRunParam::task() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.task)
}
inline std::string* CustomActionRunParam::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.task)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_task() const {
  return _impl_.task_.Get();
}
inline void CustomActionRunParam::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.task)
}

// optional string param = 3;
inline bool CustomActionRunParam::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_param() const {
  return _internal_has_param();
}
inline void CustomActionRunParam::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomActionRunParam::param() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.param)
}
inline std::string* CustomActionRunParam::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.param)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_param() const {
  return _impl_.param_.Get();
}
inline void CustomActionRunParam::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.param)
}

// optional .maarpc.Rect box = 4;
inline bool CustomActionRunParam::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box_ != nullptr);
  return value;
}
inline bool CustomActionRunParam::has_box() const {
  return _internal_has_box();
}
inline const ::maarpc::Rect& CustomActionRunParam::_internal_box() const {
  const ::maarpc::Rect* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Rect&>(
      ::maarpc::_Rect_default_instance_);
}
inline const ::maarpc::Rect& CustomActionRunParam::box() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.box)
  return _internal_box();
}
inline void CustomActionRunParam::unsafe_arena_set_allocated_box(
    ::maarpc::Rect* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionRunParam.box)
}
inline ::maarpc::Rect* CustomActionRunParam::release_box() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Rect* CustomActionRunParam::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.box)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::maarpc::Rect* CustomActionRunParam::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Rect>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::maarpc::Rect* CustomActionRunParam::mutable_box() {
  ::maarpc::Rect* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.box)
  return _msg;
}
inline void CustomActionRunParam::set_allocated_box(::maarpc::Rect* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box));
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.box)
}

// optional string detail = 5;
inline bool CustomActionRunParam::_internal_has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_detail() const {
  return _internal_has_detail();
}
inline void CustomActionRunParam::clear_detail() {
  _impl_.detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CustomActionRunParam::detail() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_detail(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.detail)
}
inline std::string* CustomActionRunParam::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.detail)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void CustomActionRunParam::_internal_set_detail(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_detail() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.detail)
  if (!_internal_has_detail()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.detail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.detail)
}

// -------------------------------------------------------------------

// CustomActionResponse

// optional .maarpc.Id act = 1;
inline bool CustomActionResponse::_internal_has_act() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.act_ != nullptr);
  return value;
}
inline bool CustomActionResponse::has_act() const {
  return _internal_has_act();
}
inline const ::maarpc::Id& CustomActionResponse::_internal_act() const {
  const ::maarpc::Id* p = _impl_.act_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomActionResponse::act() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionResponse.act)
  return _internal_act();
}
inline void CustomActionResponse::unsafe_arena_set_allocated_act(
    ::maarpc::Id* act) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.act_);
  }
  _impl_.act_ = act;
  if (act) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionResponse.act)
}
inline ::maarpc::Id* CustomActionResponse::release_act() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.act_;
  _impl_.act_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomActionResponse::unsafe_arena_release_act() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionResponse.act)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Id* temp = _impl_.act_;
  _impl_.act_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomActionResponse::_internal_mutable_act() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.act_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.act_ = p;
  }
  return _impl_.act_;
}
inline ::maarpc::Id* CustomActionResponse::mutable_act() {
  ::maarpc::Id* _msg = _internal_mutable_act();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionResponse.act)
  return _msg;
}
inline void CustomActionResponse::set_allocated_act(::maarpc::Id* act) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.act_);
  }
  if (act) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(act));
    if (message_arena != submessage_arena) {
      act = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.act_ = act;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionResponse.act)
}

// optional .maarpc.Id id = 2;
inline bool CustomActionResponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool CustomActionResponse::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& CustomActionResponse::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& CustomActionResponse::id() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionResponse.id)
  return _internal_id();
}
inline void CustomActionResponse::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionResponse.id)
}
inline ::maarpc::Id* CustomActionResponse::release_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* CustomActionResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionResponse.id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* CustomActionResponse::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* CustomActionResponse::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionResponse.id)
  return _msg;
}
inline void CustomActionResponse::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionResponse.id)
}

// .maarpc.CustomActionRunParam run = 101;
inline bool CustomActionResponse::_internal_has_run() const {
  return command_case() == kRun;
}
inline bool CustomActionResponse::has_run() const {
  return _internal_has_run();
}
inline void CustomActionResponse::set_has_run() {
  _impl_._oneof_case_[0] = kRun;
}
inline void CustomActionResponse::clear_run() {
  if (_internal_has_run()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.run_;
    }
    clear_has_command();
  }
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::release_run() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionResponse.run)
  if (_internal_has_run()) {
    clear_has_command();
    ::maarpc::CustomActionRunParam* temp = _impl_.command_.run_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomActionRunParam& CustomActionResponse::_internal_run() const {
  return _internal_has_run()
      ? *_impl_.command_.run_
      : reinterpret_cast< ::maarpc::CustomActionRunParam&>(::maarpc::_CustomActionRunParam_default_instance_);
}
inline const ::maarpc::CustomActionRunParam& CustomActionResponse::run() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionResponse.run)
  return _internal_run();
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::unsafe_arena_release_run() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomActionResponse.run)
  if (_internal_has_run()) {
    clear_has_command();
    ::maarpc::CustomActionRunParam* temp = _impl_.command_.run_;
    _impl_.command_.run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomActionResponse::unsafe_arena_set_allocated_run(::maarpc::CustomActionRunParam* run) {
  clear_command();
  if (run) {
    set_has_run();
    _impl_.command_.run_ = run;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionResponse.run)
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::_internal_mutable_run() {
  if (!_internal_has_run()) {
    clear_command();
    set_has_run();
    _impl_.command_.run_ = CreateMaybeMessage< ::maarpc::CustomActionRunParam >(GetArenaForAllocation());
  }
  return _impl_.command_.run_;
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::mutable_run() {
  ::maarpc::CustomActionRunParam* _msg = _internal_mutable_run();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionResponse.run)
  return _msg;
}

// bool stop = 102;
inline bool CustomActionResponse::_internal_has_stop() const {
  return command_case() == kStop;
}
inline bool CustomActionResponse::has_stop() const {
  return _internal_has_stop();
}
inline void CustomActionResponse::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void CustomActionResponse::clear_stop() {
  if (_internal_has_stop()) {
    _impl_.command_.stop_ = false;
    clear_has_command();
  }
}
inline bool CustomActionResponse::_internal_stop() const {
  if (_internal_has_stop()) {
    return _impl_.command_.stop_;
  }
  return false;
}
inline void CustomActionResponse::_internal_set_stop(bool value) {
  if (!_internal_has_stop()) {
    clear_command();
    set_has_stop();
  }
  _impl_.command_.stop_ = value;
}
inline bool CustomActionResponse::stop() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionResponse.stop)
  return _internal_stop();
}
inline void CustomActionResponse::set_stop(bool value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomActionResponse.stop)
}

inline bool CustomActionResponse::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CustomActionResponse::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CustomActionResponse::CommandCase CustomActionResponse::command_case() const {
  return CustomActionResponse::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubmitCustomActionRequest

// optional .maarpc.Handle handle = 1;
inline bool SubmitCustomActionRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SubmitCustomActionRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SubmitCustomActionRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SubmitCustomActionRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomActionRequest.handle)
  return _internal_handle();
}
inline void SubmitCustomActionRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomActionRequest.handle)
}
inline ::maarpc::Handle* SubmitCustomActionRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SubmitCustomActionRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomActionRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SubmitCustomActionRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SubmitCustomActionRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomActionRequest.handle)
  return _msg;
}
inline void SubmitCustomActionRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomActionRequest.handle)
}

// optional .maarpc.Id id = 2;
inline bool SubmitCustomActionRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool SubmitCustomActionRequest::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& SubmitCustomActionRequest::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& SubmitCustomActionRequest::id() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomActionRequest.id)
  return _internal_id();
}
inline void SubmitCustomActionRequest::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SubmitCustomActionRequest.id)
}
inline ::maarpc::Id* SubmitCustomActionRequest::release_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* SubmitCustomActionRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.SubmitCustomActionRequest.id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* SubmitCustomActionRequest::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* SubmitCustomActionRequest::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.SubmitCustomActionRequest.id)
  return _msg;
}
inline void SubmitCustomActionRequest::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SubmitCustomActionRequest.id)
}

// optional bool ok = 3;
inline bool SubmitCustomActionRequest::_internal_has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubmitCustomActionRequest::has_ok() const {
  return _internal_has_ok();
}
inline void SubmitCustomActionRequest::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SubmitCustomActionRequest::_internal_ok() const {
  return _impl_.ok_;
}
inline bool SubmitCustomActionRequest::ok() const {
  // @@protoc_insertion_point(field_get:maarpc.SubmitCustomActionRequest.ok)
  return _internal_ok();
}
inline void SubmitCustomActionRequest::_internal_set_ok(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ok_ = value;
}
inline void SubmitCustomActionRequest::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:maarpc.SubmitCustomActionRequest.ok)
}

// -------------------------------------------------------------------

// InstancePostTaskRequest

// optional .maarpc.Handle handle = 1;
inline bool InstancePostTaskRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool InstancePostTaskRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& InstancePostTaskRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& InstancePostTaskRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.InstancePostTaskRequest.handle)
  return _internal_handle();
}
inline void InstancePostTaskRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.InstancePostTaskRequest.handle)
}
inline ::maarpc::Handle* InstancePostTaskRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* InstancePostTaskRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.InstancePostTaskRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* InstancePostTaskRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* InstancePostTaskRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.InstancePostTaskRequest.handle)
  return _msg;
}
inline void InstancePostTaskRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.InstancePostTaskRequest.handle)
}

// optional string task = 2;
inline bool InstancePostTaskRequest::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstancePostTaskRequest::has_task() const {
  return _internal_has_task();
}
inline void InstancePostTaskRequest::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstancePostTaskRequest::task() const {
  // @@protoc_insertion_point(field_get:maarpc.InstancePostTaskRequest.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstancePostTaskRequest::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.InstancePostTaskRequest.task)
}
inline std::string* InstancePostTaskRequest::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.InstancePostTaskRequest.task)
  return _s;
}
inline const std::string& InstancePostTaskRequest::_internal_task() const {
  return _impl_.task_.Get();
}
inline void InstancePostTaskRequest::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* InstancePostTaskRequest::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* InstancePostTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.InstancePostTaskRequest.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InstancePostTaskRequest::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.InstancePostTaskRequest.task)
}

// optional string param = 3;
inline bool InstancePostTaskRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstancePostTaskRequest::has_param() const {
  return _internal_has_param();
}
inline void InstancePostTaskRequest::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InstancePostTaskRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.InstancePostTaskRequest.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstancePostTaskRequest::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.InstancePostTaskRequest.param)
}
inline std::string* InstancePostTaskRequest::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.InstancePostTaskRequest.param)
  return _s;
}
inline const std::string& InstancePostTaskRequest::_internal_param() const {
  return _impl_.param_.Get();
}
inline void InstancePostTaskRequest::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* InstancePostTaskRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* InstancePostTaskRequest::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.InstancePostTaskRequest.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InstancePostTaskRequest::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.InstancePostTaskRequest.param)
}

// -------------------------------------------------------------------

// InstanceSetTaskParamRequest

// optional .maarpc.Handle handle = 1;
inline bool InstanceSetTaskParamRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool InstanceSetTaskParamRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& InstanceSetTaskParamRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& InstanceSetTaskParamRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.InstanceSetTaskParamRequest.handle)
  return _internal_handle();
}
inline void InstanceSetTaskParamRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.InstanceSetTaskParamRequest.handle)
}
inline ::maarpc::Handle* InstanceSetTaskParamRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* InstanceSetTaskParamRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.InstanceSetTaskParamRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* InstanceSetTaskParamRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* InstanceSetTaskParamRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.InstanceSetTaskParamRequest.handle)
  return _msg;
}
inline void InstanceSetTaskParamRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.InstanceSetTaskParamRequest.handle)
}

// optional .maarpc.Id id = 2;
inline bool InstanceSetTaskParamRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool InstanceSetTaskParamRequest::has_id() const {
  return _internal_has_id();
}
inline const ::maarpc::Id& InstanceSetTaskParamRequest::_internal_id() const {
  const ::maarpc::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Id&>(
      ::maarpc::_Id_default_instance_);
}
inline const ::maarpc::Id& InstanceSetTaskParamRequest::id() const {
  // @@protoc_insertion_point(field_get:maarpc.InstanceSetTaskParamRequest.id)
  return _internal_id();
}
inline void InstanceSetTaskParamRequest::unsafe_arena_set_allocated_id(
    ::maarpc::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.InstanceSetTaskParamRequest.id)
}
inline ::maarpc::Id* InstanceSetTaskParamRequest::release_id() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Id* InstanceSetTaskParamRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:maarpc.InstanceSetTaskParamRequest.id)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::maarpc::Id* InstanceSetTaskParamRequest::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::maarpc::Id* InstanceSetTaskParamRequest::mutable_id() {
  ::maarpc::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:maarpc.InstanceSetTaskParamRequest.id)
  return _msg;
}
inline void InstanceSetTaskParamRequest::set_allocated_id(::maarpc::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:maarpc.InstanceSetTaskParamRequest.id)
}

// optional string param = 3;
inline bool InstanceSetTaskParamRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstanceSetTaskParamRequest::has_param() const {
  return _internal_has_param();
}
inline void InstanceSetTaskParamRequest::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstanceSetTaskParamRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.InstanceSetTaskParamRequest.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstanceSetTaskParamRequest::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.InstanceSetTaskParamRequest.param)
}
inline std::string* InstanceSetTaskParamRequest::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.InstanceSetTaskParamRequest.param)
  return _s;
}
inline const std::string& InstanceSetTaskParamRequest::_internal_param() const {
  return _impl_.param_.Get();
}
inline void InstanceSetTaskParamRequest::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* InstanceSetTaskParamRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* InstanceSetTaskParamRequest::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.InstanceSetTaskParamRequest.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InstanceSetTaskParamRequest::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.InstanceSetTaskParamRequest.param)
}

// -------------------------------------------------------------------

// SyncContextRunTaskRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextRunTaskRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextRunTaskRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextRunTaskRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextRunTaskRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunTaskRequest.handle)
  return _internal_handle();
}
inline void SyncContextRunTaskRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextRunTaskRequest.handle)
}
inline ::maarpc::Handle* SyncContextRunTaskRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextRunTaskRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunTaskRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextRunTaskRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextRunTaskRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunTaskRequest.handle)
  return _msg;
}
inline void SyncContextRunTaskRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunTaskRequest.handle)
}

// optional string task = 2;
inline bool SyncContextRunTaskRequest::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncContextRunTaskRequest::has_task() const {
  return _internal_has_task();
}
inline void SyncContextRunTaskRequest::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncContextRunTaskRequest::task() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunTaskRequest.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunTaskRequest::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunTaskRequest.task)
}
inline std::string* SyncContextRunTaskRequest::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunTaskRequest.task)
  return _s;
}
inline const std::string& SyncContextRunTaskRequest::_internal_task() const {
  return _impl_.task_.Get();
}
inline void SyncContextRunTaskRequest::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunTaskRequest::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunTaskRequest.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunTaskRequest::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunTaskRequest.task)
}

// optional string param = 3;
inline bool SyncContextRunTaskRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncContextRunTaskRequest::has_param() const {
  return _internal_has_param();
}
inline void SyncContextRunTaskRequest::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncContextRunTaskRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunTaskRequest.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunTaskRequest::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunTaskRequest.param)
}
inline std::string* SyncContextRunTaskRequest::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunTaskRequest.param)
  return _s;
}
inline const std::string& SyncContextRunTaskRequest::_internal_param() const {
  return _impl_.param_.Get();
}
inline void SyncContextRunTaskRequest::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunTaskRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunTaskRequest::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunTaskRequest.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunTaskRequest::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunTaskRequest.param)
}

// -------------------------------------------------------------------

// SyncContextRunRecognizerRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextRunRecognizerRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextRunRecognizerRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextRunRecognizerRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextRunRecognizerRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerRequest.handle)
  return _internal_handle();
}
inline void SyncContextRunRecognizerRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextRunRecognizerRequest.handle)
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunRecognizerRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunRecognizerRequest.handle)
  return _msg;
}
inline void SyncContextRunRecognizerRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunRecognizerRequest.handle)
}

// optional string task = 2;
inline bool SyncContextRunRecognizerRequest::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncContextRunRecognizerRequest::has_task() const {
  return _internal_has_task();
}
inline void SyncContextRunRecognizerRequest::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncContextRunRecognizerRequest::task() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerRequest.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunRecognizerRequest::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunRecognizerRequest.task)
}
inline std::string* SyncContextRunRecognizerRequest::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunRecognizerRequest.task)
  return _s;
}
inline const std::string& SyncContextRunRecognizerRequest::_internal_task() const {
  return _impl_.task_.Get();
}
inline void SyncContextRunRecognizerRequest::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunRecognizerRequest::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunRecognizerRequest::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunRecognizerRequest.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunRecognizerRequest::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunRecognizerRequest.task)
}

// optional string param = 3;
inline bool SyncContextRunRecognizerRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncContextRunRecognizerRequest::has_param() const {
  return _internal_has_param();
}
inline void SyncContextRunRecognizerRequest::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncContextRunRecognizerRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerRequest.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunRecognizerRequest::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunRecognizerRequest.param)
}
inline std::string* SyncContextRunRecognizerRequest::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunRecognizerRequest.param)
  return _s;
}
inline const std::string& SyncContextRunRecognizerRequest::_internal_param() const {
  return _impl_.param_.Get();
}
inline void SyncContextRunRecognizerRequest::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunRecognizerRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunRecognizerRequest::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunRecognizerRequest.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunRecognizerRequest::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunRecognizerRequest.param)
}

// optional .maarpc.Handle image = 4;
inline bool SyncContextRunRecognizerRequest::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool SyncContextRunRecognizerRequest::has_image() const {
  return _internal_has_image();
}
inline const ::maarpc::Handle& SyncContextRunRecognizerRequest::_internal_image() const {
  const ::maarpc::Handle* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextRunRecognizerRequest::image() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerRequest.image)
  return _internal_image();
}
inline void SyncContextRunRecognizerRequest::unsafe_arena_set_allocated_image(
    ::maarpc::Handle* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextRunRecognizerRequest.image)
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::release_image() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunRecognizerRequest.image)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::maarpc::Handle* SyncContextRunRecognizerRequest::mutable_image() {
  ::maarpc::Handle* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunRecognizerRequest.image)
  return _msg;
}
inline void SyncContextRunRecognizerRequest::set_allocated_image(::maarpc::Handle* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunRecognizerRequest.image)
}

// -------------------------------------------------------------------

// SyncContextRunRecognizerResponse

// optional bool match = 1;
inline bool SyncContextRunRecognizerResponse::_internal_has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SyncContextRunRecognizerResponse::has_match() const {
  return _internal_has_match();
}
inline void SyncContextRunRecognizerResponse::clear_match() {
  _impl_.match_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SyncContextRunRecognizerResponse::_internal_match() const {
  return _impl_.match_;
}
inline bool SyncContextRunRecognizerResponse::match() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerResponse.match)
  return _internal_match();
}
inline void SyncContextRunRecognizerResponse::_internal_set_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_ = value;
}
inline void SyncContextRunRecognizerResponse::set_match(bool value) {
  _internal_set_match(value);
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunRecognizerResponse.match)
}

// optional .maarpc.Rect box = 2;
inline bool SyncContextRunRecognizerResponse::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box_ != nullptr);
  return value;
}
inline bool SyncContextRunRecognizerResponse::has_box() const {
  return _internal_has_box();
}
inline const ::maarpc::Rect& SyncContextRunRecognizerResponse::_internal_box() const {
  const ::maarpc::Rect* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Rect&>(
      ::maarpc::_Rect_default_instance_);
}
inline const ::maarpc::Rect& SyncContextRunRecognizerResponse::box() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerResponse.box)
  return _internal_box();
}
inline void SyncContextRunRecognizerResponse::unsafe_arena_set_allocated_box(
    ::maarpc::Rect* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextRunRecognizerResponse.box)
}
inline ::maarpc::Rect* SyncContextRunRecognizerResponse::release_box() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Rect* SyncContextRunRecognizerResponse::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunRecognizerResponse.box)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::maarpc::Rect* SyncContextRunRecognizerResponse::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Rect>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::maarpc::Rect* SyncContextRunRecognizerResponse::mutable_box() {
  ::maarpc::Rect* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunRecognizerResponse.box)
  return _msg;
}
inline void SyncContextRunRecognizerResponse::set_allocated_box(::maarpc::Rect* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box));
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunRecognizerResponse.box)
}

// optional string detail = 3;
inline bool SyncContextRunRecognizerResponse::_internal_has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncContextRunRecognizerResponse::has_detail() const {
  return _internal_has_detail();
}
inline void SyncContextRunRecognizerResponse::clear_detail() {
  _impl_.detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncContextRunRecognizerResponse::detail() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerResponse.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunRecognizerResponse::set_detail(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunRecognizerResponse.detail)
}
inline std::string* SyncContextRunRecognizerResponse::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunRecognizerResponse.detail)
  return _s;
}
inline const std::string& SyncContextRunRecognizerResponse::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void SyncContextRunRecognizerResponse::_internal_set_detail(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunRecognizerResponse::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunRecognizerResponse::release_detail() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunRecognizerResponse.detail)
  if (!_internal_has_detail()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.detail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunRecognizerResponse::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunRecognizerResponse.detail)
}

// optional bool status = 101;
inline bool SyncContextRunRecognizerResponse::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SyncContextRunRecognizerResponse::has_status() const {
  return _internal_has_status();
}
inline void SyncContextRunRecognizerResponse::clear_status() {
  _impl_.status_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool SyncContextRunRecognizerResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool SyncContextRunRecognizerResponse::status() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunRecognizerResponse.status)
  return _internal_status();
}
inline void SyncContextRunRecognizerResponse::_internal_set_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.status_ = value;
}
inline void SyncContextRunRecognizerResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunRecognizerResponse.status)
}

// -------------------------------------------------------------------

// SyncContextRunActionRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextRunActionRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextRunActionRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextRunActionRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextRunActionRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunActionRequest.handle)
  return _internal_handle();
}
inline void SyncContextRunActionRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextRunActionRequest.handle)
}
inline ::maarpc::Handle* SyncContextRunActionRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextRunActionRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunActionRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextRunActionRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextRunActionRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunActionRequest.handle)
  return _msg;
}
inline void SyncContextRunActionRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunActionRequest.handle)
}

// optional string task = 2;
inline bool SyncContextRunActionRequest::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncContextRunActionRequest::has_task() const {
  return _internal_has_task();
}
inline void SyncContextRunActionRequest::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncContextRunActionRequest::task() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunActionRequest.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunActionRequest::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunActionRequest.task)
}
inline std::string* SyncContextRunActionRequest::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunActionRequest.task)
  return _s;
}
inline const std::string& SyncContextRunActionRequest::_internal_task() const {
  return _impl_.task_.Get();
}
inline void SyncContextRunActionRequest::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunActionRequest::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunActionRequest::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunActionRequest.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunActionRequest::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunActionRequest.task)
}

// optional string param = 3;
inline bool SyncContextRunActionRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SyncContextRunActionRequest::has_param() const {
  return _internal_has_param();
}
inline void SyncContextRunActionRequest::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SyncContextRunActionRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunActionRequest.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunActionRequest::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunActionRequest.param)
}
inline std::string* SyncContextRunActionRequest::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunActionRequest.param)
  return _s;
}
inline const std::string& SyncContextRunActionRequest::_internal_param() const {
  return _impl_.param_.Get();
}
inline void SyncContextRunActionRequest::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunActionRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunActionRequest::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunActionRequest.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunActionRequest::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunActionRequest.param)
}

// optional .maarpc.Rect box = 4;
inline bool SyncContextRunActionRequest::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box_ != nullptr);
  return value;
}
inline bool SyncContextRunActionRequest::has_box() const {
  return _internal_has_box();
}
inline const ::maarpc::Rect& SyncContextRunActionRequest::_internal_box() const {
  const ::maarpc::Rect* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Rect&>(
      ::maarpc::_Rect_default_instance_);
}
inline const ::maarpc::Rect& SyncContextRunActionRequest::box() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunActionRequest.box)
  return _internal_box();
}
inline void SyncContextRunActionRequest::unsafe_arena_set_allocated_box(
    ::maarpc::Rect* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextRunActionRequest.box)
}
inline ::maarpc::Rect* SyncContextRunActionRequest::release_box() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Rect* SyncContextRunActionRequest::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunActionRequest.box)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::maarpc::Rect* SyncContextRunActionRequest::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Rect>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::maarpc::Rect* SyncContextRunActionRequest::mutable_box() {
  ::maarpc::Rect* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunActionRequest.box)
  return _msg;
}
inline void SyncContextRunActionRequest::set_allocated_box(::maarpc::Rect* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box));
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunActionRequest.box)
}

// optional string detail = 5;
inline bool SyncContextRunActionRequest::_internal_has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SyncContextRunActionRequest::has_detail() const {
  return _internal_has_detail();
}
inline void SyncContextRunActionRequest::clear_detail() {
  _impl_.detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SyncContextRunActionRequest::detail() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextRunActionRequest.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncContextRunActionRequest::set_detail(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.SyncContextRunActionRequest.detail)
}
inline std::string* SyncContextRunActionRequest::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextRunActionRequest.detail)
  return _s;
}
inline const std::string& SyncContextRunActionRequest::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void SyncContextRunActionRequest::_internal_set_detail(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncContextRunActionRequest::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncContextRunActionRequest::release_detail() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextRunActionRequest.detail)
  if (!_internal_has_detail()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.detail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncContextRunActionRequest::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextRunActionRequest.detail)
}

// -------------------------------------------------------------------

// SyncContextClickRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextClickRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextClickRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextClickRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextClickRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextClickRequest.handle)
  return _internal_handle();
}
inline void SyncContextClickRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextClickRequest.handle)
}
inline ::maarpc::Handle* SyncContextClickRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextClickRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextClickRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextClickRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextClickRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextClickRequest.handle)
  return _msg;
}
inline void SyncContextClickRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextClickRequest.handle)
}

// optional .maarpc.ClickParam param = 2;
inline bool SyncContextClickRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool SyncContextClickRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::ClickParam& SyncContextClickRequest::_internal_param() const {
  const ::maarpc::ClickParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::ClickParam&>(
      ::maarpc::_ClickParam_default_instance_);
}
inline const ::maarpc::ClickParam& SyncContextClickRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextClickRequest.param)
  return _internal_param();
}
inline void SyncContextClickRequest::unsafe_arena_set_allocated_param(
    ::maarpc::ClickParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextClickRequest.param)
}
inline ::maarpc::ClickParam* SyncContextClickRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::ClickParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::ClickParam* SyncContextClickRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextClickRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::ClickParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::ClickParam* SyncContextClickRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::ClickParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::ClickParam* SyncContextClickRequest::mutable_param() {
  ::maarpc::ClickParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextClickRequest.param)
  return _msg;
}
inline void SyncContextClickRequest::set_allocated_param(::maarpc::ClickParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextClickRequest.param)
}

// -------------------------------------------------------------------

// SyncContextSwipeRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextSwipeRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextSwipeRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextSwipeRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextSwipeRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextSwipeRequest.handle)
  return _internal_handle();
}
inline void SyncContextSwipeRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextSwipeRequest.handle)
}
inline ::maarpc::Handle* SyncContextSwipeRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextSwipeRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextSwipeRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextSwipeRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextSwipeRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextSwipeRequest.handle)
  return _msg;
}
inline void SyncContextSwipeRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextSwipeRequest.handle)
}

// optional .maarpc.SwipeParam param = 2;
inline bool SyncContextSwipeRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool SyncContextSwipeRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::SwipeParam& SyncContextSwipeRequest::_internal_param() const {
  const ::maarpc::SwipeParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::SwipeParam&>(
      ::maarpc::_SwipeParam_default_instance_);
}
inline const ::maarpc::SwipeParam& SyncContextSwipeRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextSwipeRequest.param)
  return _internal_param();
}
inline void SyncContextSwipeRequest::unsafe_arena_set_allocated_param(
    ::maarpc::SwipeParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextSwipeRequest.param)
}
inline ::maarpc::SwipeParam* SyncContextSwipeRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::SwipeParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::SwipeParam* SyncContextSwipeRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextSwipeRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::SwipeParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::SwipeParam* SyncContextSwipeRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::SwipeParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::SwipeParam* SyncContextSwipeRequest::mutable_param() {
  ::maarpc::SwipeParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextSwipeRequest.param)
  return _msg;
}
inline void SyncContextSwipeRequest::set_allocated_param(::maarpc::SwipeParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextSwipeRequest.param)
}

// -------------------------------------------------------------------

// SyncContextKeyRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextKeyRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextKeyRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextKeyRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextKeyRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextKeyRequest.handle)
  return _internal_handle();
}
inline void SyncContextKeyRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextKeyRequest.handle)
}
inline ::maarpc::Handle* SyncContextKeyRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextKeyRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextKeyRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextKeyRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextKeyRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextKeyRequest.handle)
  return _msg;
}
inline void SyncContextKeyRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextKeyRequest.handle)
}

// optional .maarpc.KeyParam param = 2;
inline bool SyncContextKeyRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool SyncContextKeyRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::KeyParam& SyncContextKeyRequest::_internal_param() const {
  const ::maarpc::KeyParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::KeyParam&>(
      ::maarpc::_KeyParam_default_instance_);
}
inline const ::maarpc::KeyParam& SyncContextKeyRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextKeyRequest.param)
  return _internal_param();
}
inline void SyncContextKeyRequest::unsafe_arena_set_allocated_param(
    ::maarpc::KeyParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextKeyRequest.param)
}
inline ::maarpc::KeyParam* SyncContextKeyRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::KeyParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::KeyParam* SyncContextKeyRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextKeyRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::KeyParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::KeyParam* SyncContextKeyRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::KeyParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::KeyParam* SyncContextKeyRequest::mutable_param() {
  ::maarpc::KeyParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextKeyRequest.param)
  return _msg;
}
inline void SyncContextKeyRequest::set_allocated_param(::maarpc::KeyParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextKeyRequest.param)
}

// -------------------------------------------------------------------

// SyncContextTouchRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextTouchRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextTouchRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextTouchRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextTouchRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextTouchRequest.handle)
  return _internal_handle();
}
inline void SyncContextTouchRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextTouchRequest.handle)
}
inline ::maarpc::Handle* SyncContextTouchRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextTouchRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextTouchRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextTouchRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextTouchRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextTouchRequest.handle)
  return _msg;
}
inline void SyncContextTouchRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextTouchRequest.handle)
}

// optional .maarpc.TouchParam param = 2;
inline bool SyncContextTouchRequest::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline bool SyncContextTouchRequest::has_param() const {
  return _internal_has_param();
}
inline const ::maarpc::TouchParam& SyncContextTouchRequest::_internal_param() const {
  const ::maarpc::TouchParam* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::TouchParam&>(
      ::maarpc::_TouchParam_default_instance_);
}
inline const ::maarpc::TouchParam& SyncContextTouchRequest::param() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextTouchRequest.param)
  return _internal_param();
}
inline void SyncContextTouchRequest::unsafe_arena_set_allocated_param(
    ::maarpc::TouchParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextTouchRequest.param)
}
inline ::maarpc::TouchParam* SyncContextTouchRequest::release_param() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::TouchParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::TouchParam* SyncContextTouchRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextTouchRequest.param)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::TouchParam* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::maarpc::TouchParam* SyncContextTouchRequest::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::TouchParam>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::maarpc::TouchParam* SyncContextTouchRequest::mutable_param() {
  ::maarpc::TouchParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextTouchRequest.param)
  return _msg;
}
inline void SyncContextTouchRequest::set_allocated_param(::maarpc::TouchParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextTouchRequest.param)
}

// -------------------------------------------------------------------

// SyncContextScreencapRequest

// optional .maarpc.Handle handle = 1;
inline bool SyncContextScreencapRequest::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.handle_ != nullptr);
  return value;
}
inline bool SyncContextScreencapRequest::has_handle() const {
  return _internal_has_handle();
}
inline const ::maarpc::Handle& SyncContextScreencapRequest::_internal_handle() const {
  const ::maarpc::Handle* p = _impl_.handle_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextScreencapRequest::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextScreencapRequest.handle)
  return _internal_handle();
}
inline void SyncContextScreencapRequest::unsafe_arena_set_allocated_handle(
    ::maarpc::Handle* handle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  _impl_.handle_ = handle;
  if (handle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextScreencapRequest.handle)
}
inline ::maarpc::Handle* SyncContextScreencapRequest::release_handle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextScreencapRequest::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextScreencapRequest.handle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::maarpc::Handle* temp = _impl_.handle_;
  _impl_.handle_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextScreencapRequest::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.handle_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.handle_ = p;
  }
  return _impl_.handle_;
}
inline ::maarpc::Handle* SyncContextScreencapRequest::mutable_handle() {
  ::maarpc::Handle* _msg = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextScreencapRequest.handle)
  return _msg;
}
inline void SyncContextScreencapRequest::set_allocated_handle(::maarpc::Handle* handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.handle_);
  }
  if (handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle));
    if (message_arena != submessage_arena) {
      handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_ = handle;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextScreencapRequest.handle)
}

// optional .maarpc.Handle image = 2;
inline bool SyncContextScreencapRequest::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_ != nullptr);
  return value;
}
inline bool SyncContextScreencapRequest::has_image() const {
  return _internal_has_image();
}
inline const ::maarpc::Handle& SyncContextScreencapRequest::_internal_image() const {
  const ::maarpc::Handle* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Handle&>(
      ::maarpc::_Handle_default_instance_);
}
inline const ::maarpc::Handle& SyncContextScreencapRequest::image() const {
  // @@protoc_insertion_point(field_get:maarpc.SyncContextScreencapRequest.image)
  return _internal_image();
}
inline void SyncContextScreencapRequest::unsafe_arena_set_allocated_image(
    ::maarpc::Handle* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.SyncContextScreencapRequest.image)
}
inline ::maarpc::Handle* SyncContextScreencapRequest::release_image() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Handle* SyncContextScreencapRequest::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:maarpc.SyncContextScreencapRequest.image)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::maarpc::Handle* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::maarpc::Handle* SyncContextScreencapRequest::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Handle>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::maarpc::Handle* SyncContextScreencapRequest::mutable_image() {
  ::maarpc::Handle* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:maarpc.SyncContextScreencapRequest.image)
  return _msg;
}
inline void SyncContextScreencapRequest::set_allocated_image(::maarpc::Handle* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:maarpc.SyncContextScreencapRequest.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace maarpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Framework_2eproto
