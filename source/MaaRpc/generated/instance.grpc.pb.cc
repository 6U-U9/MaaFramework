// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: instance.proto

#include "instance.pb.h"
#include "instance.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace maarpc {

static const char* Instance_method_names[] = {
  "/maarpc.Instance/create",
  "/maarpc.Instance/destroy",
  "/maarpc.Instance/register_custom_recognizer",
  "/maarpc.Instance/unregister_custom_recognizer",
  "/maarpc.Instance/clear_custom_recognizer",
  "/maarpc.Instance/register_custom_action",
  "/maarpc.Instance/unregister_custom_action",
  "/maarpc.Instance/clear_custom_action",
  "/maarpc.Instance/bind_resource",
  "/maarpc.Instance/bind_controller",
  "/maarpc.Instance/inited",
  "/maarpc.Instance/post_task",
  "/maarpc.Instance/set_task_param",
  "/maarpc.Instance/status",
  "/maarpc.Instance/wait",
  "/maarpc.Instance/all_finished",
  "/maarpc.Instance/stop",
  "/maarpc.Instance/resource",
  "/maarpc.Instance/controller",
};

std::unique_ptr< Instance::Stub> Instance::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Instance::Stub> stub(new Instance::Stub(channel, options));
  return stub;
}

Instance::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_create_(Instance_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_destroy_(Instance_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_register_custom_recognizer_(Instance_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_unregister_custom_recognizer_(Instance_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_custom_recognizer_(Instance_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_register_custom_action_(Instance_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_unregister_custom_action_(Instance_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clear_custom_action_(Instance_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bind_resource_(Instance_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bind_controller_(Instance_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_inited_(Instance_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_post_task_(Instance_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_task_param_(Instance_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_status_(Instance_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_wait_(Instance_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_all_finished_(Instance_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(Instance_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_resource_(Instance_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_controller_(Instance_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Instance::Stub::create(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::maarpc::HandleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::IdRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_, context, request, response);
}

void Instance::Stub::async::create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::IdRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, std::move(f));
}

void Instance::Stub::async::create(::grpc::ClientContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* Instance::Stub::PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::HandleResponse, ::maarpc::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleResponse>* Instance::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::maarpc::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_destroy_, context, request, response);
}

void Instance::Stub::async::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, std::move(f));
}

void Instance::Stub::async::destroy(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::AsyncdestroyRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* Instance::Stub::register_custom_recognizerRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>::Create(channel_.get(), rpcmethod_register_custom_recognizer_, context);
}

void Instance::Stub::async::register_custom_recognizer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomRecognizerRequest,::maarpc::CustomRecognizerResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::maarpc::CustomRecognizerRequest,::maarpc::CustomRecognizerResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_register_custom_recognizer_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* Instance::Stub::Asyncregister_custom_recognizerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>::Create(channel_.get(), cq, rpcmethod_register_custom_recognizer_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>* Instance::Stub::PrepareAsyncregister_custom_recognizerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>::Create(channel_.get(), cq, rpcmethod_register_custom_recognizer_, context, false, nullptr);
}

::grpc::Status Instance::Stub::unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregister_custom_recognizer_, context, request, response);
}

void Instance::Stub::async::unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregister_custom_recognizer_, context, request, response, std::move(f));
}

void Instance::Stub::async::unregister_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregister_custom_recognizer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncunregister_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregister_custom_recognizer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncunregister_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregister_custom_recognizerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_custom_recognizer_, context, request, response);
}

void Instance::Stub::async::clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_custom_recognizer_, context, request, response, std::move(f));
}

void Instance::Stub::async::clear_custom_recognizer(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_custom_recognizer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncclear_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_custom_recognizer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncclear_custom_recognizerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclear_custom_recognizerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* Instance::Stub::register_custom_actionRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>::Create(channel_.get(), rpcmethod_register_custom_action_, context);
}

void Instance::Stub::async::register_custom_action(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::maarpc::CustomActionRequest,::maarpc::CustomActionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::maarpc::CustomActionRequest,::maarpc::CustomActionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_register_custom_action_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* Instance::Stub::Asyncregister_custom_actionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>::Create(channel_.get(), cq, rpcmethod_register_custom_action_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>* Instance::Stub::PrepareAsyncregister_custom_actionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>::Create(channel_.get(), cq, rpcmethod_register_custom_action_, context, false, nullptr);
}

::grpc::Status Instance::Stub::unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregister_custom_action_, context, request, response);
}

void Instance::Stub::async::unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregister_custom_action_, context, request, response, std::move(f));
}

void Instance::Stub::async::unregister_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregister_custom_action_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncunregister_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregister_custom_action_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncunregister_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregister_custom_actionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clear_custom_action_, context, request, response);
}

void Instance::Stub::async::clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_custom_action_, context, request, response, std::move(f));
}

void Instance::Stub::async::clear_custom_action(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clear_custom_action_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncclear_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clear_custom_action_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncclear_custom_actionRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclear_custom_actionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bind_resource_, context, request, response);
}

void Instance::Stub::async::bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bind_resource_, context, request, response, std::move(f));
}

void Instance::Stub::async::bind_resource(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bind_resource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncbind_resourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bind_resource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncbind_resourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbind_resourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bind_controller_, context, request, response);
}

void Instance::Stub::async::bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bind_controller_, context, request, response, std::move(f));
}

void Instance::Stub::async::bind_controller(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bind_controller_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncbind_controllerRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleHandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bind_controller_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncbind_controllerRaw(::grpc::ClientContext* context, const ::maarpc::HandleHandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbind_controllerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_inited_, context, request, response);
}

void Instance::Stub::async::inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_inited_, context, request, response, std::move(f));
}

void Instance::Stub::async::inited(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_inited_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Instance::Stub::PrepareAsyncinitedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::BoolResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_inited_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Instance::Stub::AsyncinitedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::maarpc::IIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_post_task_, context, request, response);
}

void Instance::Stub::async::post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_task_, context, request, response, std::move(f));
}

void Instance::Stub::async::post_task(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_post_task_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Instance::Stub::PrepareAsyncpost_taskRaw(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::IIdResponse, ::maarpc::InstancePostTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_post_task_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::IIdResponse>* Instance::Stub::Asyncpost_taskRaw(::grpc::ClientContext* context, const ::maarpc::InstancePostTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpost_taskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_task_param_, context, request, response);
}

void Instance::Stub::async::set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_task_param_, context, request, response, std::move(f));
}

void Instance::Stub::async::set_task_param(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_task_param_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncset_task_paramRaw(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::InstanceSetTaskParamRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_task_param_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::Asyncset_task_paramRaw(::grpc::ClientContext* context, const ::maarpc::InstanceSetTaskParamRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_task_paramRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_status_, context, request, response);
}

void Instance::Stub::async::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, std::move(f));
}

void Instance::Stub::async::status(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Instance::Stub::PrepareAsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StatusResponse, ::maarpc::HandleIIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Instance::Stub::AsyncstatusRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::maarpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_wait_, context, request, response);
}

void Instance::Stub::async::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_, context, request, response, std::move(f));
}

void Instance::Stub::async::wait(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_wait_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Instance::Stub::PrepareAsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::StatusResponse, ::maarpc::HandleIIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_wait_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::StatusResponse>* Instance::Stub::AsyncwaitRaw(::grpc::ClientContext* context, const ::maarpc::HandleIIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncwaitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_all_finished_, context, request, response);
}

void Instance::Stub::async::all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_all_finished_, context, request, response, std::move(f));
}

void Instance::Stub::async::all_finished(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_all_finished_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Instance::Stub::PrepareAsyncall_finishedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::BoolResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_all_finished_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::BoolResponse>* Instance::Stub::Asyncall_finishedRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncall_finishedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void Instance::Stub::async::stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void Instance::Stub::async::stop(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::EmptyResponse, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::EmptyResponse>* Instance::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::HandleRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_resource_, context, request, response);
}

void Instance::Stub::async::resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resource_, context, request, response, std::move(f));
}

void Instance::Stub::async::resource(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_resource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* Instance::Stub::PrepareAsyncresourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_resource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* Instance::Stub::AsyncresourceRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncresourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Instance::Stub::controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::maarpc::HandleRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_controller_, context, request, response);
}

void Instance::Stub::async::controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_controller_, context, request, response, std::move(f));
}

void Instance::Stub::async::controller(::grpc::ClientContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_controller_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* Instance::Stub::PrepareAsynccontrollerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_controller_, context, request);
}

::grpc::ClientAsyncResponseReader< ::maarpc::HandleRequest>* Instance::Stub::AsynccontrollerRaw(::grpc::ClientContext* context, const ::maarpc::HandleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccontrollerRaw(context, request, cq);
  result->StartCall();
  return result;
}

Instance::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::IdRequest, ::maarpc::HandleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::IdRequest* req,
             ::maarpc::HandleResponse* resp) {
               return service->create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Instance::Service, ::maarpc::CustomRecognizerRequest, ::maarpc::CustomRecognizerResponse>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::maarpc::CustomRecognizerResponse,
             ::maarpc::CustomRecognizerRequest>* stream) {
               return service->register_custom_recognizer(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleStringRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->unregister_custom_recognizer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->clear_custom_recognizer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Instance::Service, ::maarpc::CustomActionRequest, ::maarpc::CustomActionResponse>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::maarpc::CustomActionResponse,
             ::maarpc::CustomActionRequest>* stream) {
               return service->register_custom_action(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleStringRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleStringRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->unregister_custom_action(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->clear_custom_action(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleHandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->bind_resource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleHandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleHandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->bind_controller(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::BoolResponse* resp) {
               return service->inited(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::InstancePostTaskRequest, ::maarpc::IIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::InstancePostTaskRequest* req,
             ::maarpc::IIdResponse* resp) {
               return service->post_task(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::InstanceSetTaskParamRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::InstanceSetTaskParamRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->set_task_param(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleIIdRequest* req,
             ::maarpc::StatusResponse* resp) {
               return service->status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleIIdRequest, ::maarpc::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleIIdRequest* req,
             ::maarpc::StatusResponse* resp) {
               return service->wait(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::BoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::BoolResponse* resp) {
               return service->all_finished(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::EmptyResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::HandleRequest* resp) {
               return service->resource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Instance_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Instance::Service, ::maarpc::HandleRequest, ::maarpc::HandleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Instance::Service* service,
             ::grpc::ServerContext* ctx,
             const ::maarpc::HandleRequest* req,
             ::maarpc::HandleRequest* resp) {
               return service->controller(ctx, req, resp);
             }, this)));
}

Instance::Service::~Service() {
}

::grpc::Status Instance::Service::create(::grpc::ServerContext* context, const ::maarpc::IdRequest* request, ::maarpc::HandleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::destroy(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::register_custom_recognizer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::maarpc::CustomRecognizerResponse, ::maarpc::CustomRecognizerRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::unregister_custom_recognizer(::grpc::ServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::clear_custom_recognizer(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::register_custom_action(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::maarpc::CustomActionResponse, ::maarpc::CustomActionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::unregister_custom_action(::grpc::ServerContext* context, const ::maarpc::HandleStringRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::clear_custom_action(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::bind_resource(::grpc::ServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::bind_controller(::grpc::ServerContext* context, const ::maarpc::HandleHandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::inited(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::post_task(::grpc::ServerContext* context, const ::maarpc::InstancePostTaskRequest* request, ::maarpc::IIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::set_task_param(::grpc::ServerContext* context, const ::maarpc::InstanceSetTaskParamRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::status(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::wait(::grpc::ServerContext* context, const ::maarpc::HandleIIdRequest* request, ::maarpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::all_finished(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::stop(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::resource(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Instance::Service::controller(::grpc::ServerContext* context, const ::maarpc::HandleRequest* request, ::maarpc::HandleRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace maarpc

