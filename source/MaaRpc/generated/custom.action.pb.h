// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom.action.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_custom_2eaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_custom_2eaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_custom_2eaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_custom_2eaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custom_2eaction_2eproto;
namespace maarpc {
class CustomActionInit;
struct CustomActionInitDefaultTypeInternal;
extern CustomActionInitDefaultTypeInternal _CustomActionInit_default_instance_;
class CustomActionRequest;
struct CustomActionRequestDefaultTypeInternal;
extern CustomActionRequestDefaultTypeInternal _CustomActionRequest_default_instance_;
class CustomActionResponse;
struct CustomActionResponseDefaultTypeInternal;
extern CustomActionResponseDefaultTypeInternal _CustomActionResponse_default_instance_;
class CustomActionRunParam;
struct CustomActionRunParamDefaultTypeInternal;
extern CustomActionRunParamDefaultTypeInternal _CustomActionRunParam_default_instance_;
class CustomActionSubmit;
struct CustomActionSubmitDefaultTypeInternal;
extern CustomActionSubmitDefaultTypeInternal _CustomActionSubmit_default_instance_;
}  // namespace maarpc
PROTOBUF_NAMESPACE_OPEN
template<> ::maarpc::CustomActionInit* Arena::CreateMaybeMessage<::maarpc::CustomActionInit>(Arena*);
template<> ::maarpc::CustomActionRequest* Arena::CreateMaybeMessage<::maarpc::CustomActionRequest>(Arena*);
template<> ::maarpc::CustomActionResponse* Arena::CreateMaybeMessage<::maarpc::CustomActionResponse>(Arena*);
template<> ::maarpc::CustomActionRunParam* Arena::CreateMaybeMessage<::maarpc::CustomActionRunParam>(Arena*);
template<> ::maarpc::CustomActionSubmit* Arena::CreateMaybeMessage<::maarpc::CustomActionSubmit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace maarpc {

// ===================================================================

class CustomActionInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionInit) */ {
 public:
  inline CustomActionInit() : CustomActionInit(nullptr) {}
  ~CustomActionInit() override;
  explicit PROTOBUF_CONSTEXPR CustomActionInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionInit(const CustomActionInit& from);
  CustomActionInit(CustomActionInit&& from) noexcept
    : CustomActionInit() {
    *this = ::std::move(from);
  }

  inline CustomActionInit& operator=(const CustomActionInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionInit& operator=(CustomActionInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomActionInit* internal_default_instance() {
    return reinterpret_cast<const CustomActionInit*>(
               &_CustomActionInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomActionInit& a, CustomActionInit& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionInit& from) {
    CustomActionInit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionInit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionInit";
  }
  protected:
  explicit CustomActionInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomActionInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2eaction_2eproto;
};
// -------------------------------------------------------------------

class CustomActionSubmit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionSubmit) */ {
 public:
  inline CustomActionSubmit() : CustomActionSubmit(nullptr) {}
  ~CustomActionSubmit() override;
  explicit PROTOBUF_CONSTEXPR CustomActionSubmit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionSubmit(const CustomActionSubmit& from);
  CustomActionSubmit(CustomActionSubmit&& from) noexcept
    : CustomActionSubmit() {
    *this = ::std::move(from);
  }

  inline CustomActionSubmit& operator=(const CustomActionSubmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionSubmit& operator=(CustomActionSubmit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionSubmit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomActionSubmit* internal_default_instance() {
    return reinterpret_cast<const CustomActionSubmit*>(
               &_CustomActionSubmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomActionSubmit& a, CustomActionSubmit& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionSubmit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionSubmit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionSubmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionSubmit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionSubmit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionSubmit& from) {
    CustomActionSubmit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionSubmit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionSubmit";
  }
  protected:
  explicit CustomActionSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kCmdIdFieldNumber = 2,
    kOkFieldNumber = 3,
  };
  // optional string handle = 1;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_handle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_handle();
  PROTOBUF_NODISCARD std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // optional string cmd_id = 2;
  bool has_cmd_id() const;
  private:
  bool _internal_has_cmd_id() const;
  public:
  void clear_cmd_id();
  const std::string& cmd_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd_id();
  PROTOBUF_NODISCARD std::string* release_cmd_id();
  void set_allocated_cmd_id(std::string* cmd_id);
  private:
  const std::string& _internal_cmd_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd_id(const std::string& value);
  std::string* _internal_mutable_cmd_id();
  public:

  // optional bool ok = 3;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:maarpc.CustomActionSubmit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_id_;
    bool ok_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2eaction_2eproto;
};
// -------------------------------------------------------------------

class CustomActionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionRequest) */ {
 public:
  inline CustomActionRequest() : CustomActionRequest(nullptr) {}
  ~CustomActionRequest() override;
  explicit PROTOBUF_CONSTEXPR CustomActionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionRequest(const CustomActionRequest& from);
  CustomActionRequest(CustomActionRequest&& from) noexcept
    : CustomActionRequest() {
    *this = ::std::move(from);
  }

  inline CustomActionRequest& operator=(const CustomActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionRequest& operator=(CustomActionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kInit = 101,
    RESULT_NOT_SET = 0,
  };

  static inline const CustomActionRequest* internal_default_instance() {
    return reinterpret_cast<const CustomActionRequest*>(
               &_CustomActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CustomActionRequest& a, CustomActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionRequest& from) {
    CustomActionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionRequest";
  }
  protected:
  explicit CustomActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kInitFieldNumber = 101,
  };
  // optional bool ok = 1;
  bool has_ok() const;
  private:
  bool _internal_has_ok() const;
  public:
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // .maarpc.CustomActionInit init = 101;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::maarpc::CustomActionInit& init() const;
  PROTOBUF_NODISCARD ::maarpc::CustomActionInit* release_init();
  ::maarpc::CustomActionInit* mutable_init();
  void set_allocated_init(::maarpc::CustomActionInit* init);
  private:
  const ::maarpc::CustomActionInit& _internal_init() const;
  ::maarpc::CustomActionInit* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::maarpc::CustomActionInit* init);
  ::maarpc::CustomActionInit* unsafe_arena_release_init();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomActionRequest)
 private:
  class _Internal;
  void set_has_init();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool ok_;
    union ResultUnion {
      constexpr ResultUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomActionInit* init_;
    } result_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2eaction_2eproto;
};
// -------------------------------------------------------------------

class CustomActionRunParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionRunParam) */ {
 public:
  inline CustomActionRunParam() : CustomActionRunParam(nullptr) {}
  ~CustomActionRunParam() override;
  explicit PROTOBUF_CONSTEXPR CustomActionRunParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionRunParam(const CustomActionRunParam& from);
  CustomActionRunParam(CustomActionRunParam&& from) noexcept
    : CustomActionRunParam() {
    *this = ::std::move(from);
  }

  inline CustomActionRunParam& operator=(const CustomActionRunParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionRunParam& operator=(CustomActionRunParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionRunParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomActionRunParam* internal_default_instance() {
    return reinterpret_cast<const CustomActionRunParam*>(
               &_CustomActionRunParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomActionRunParam& a, CustomActionRunParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionRunParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionRunParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionRunParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionRunParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionRunParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionRunParam& from) {
    CustomActionRunParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionRunParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionRunParam";
  }
  protected:
  explicit CustomActionRunParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 1,
    kTaskFieldNumber = 2,
    kParamFieldNumber = 3,
    kDetailFieldNumber = 5,
    kBoxFieldNumber = 4,
  };
  // optional string context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_NODISCARD std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // optional string task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const std::string& task() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* task);
  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(const std::string& value);
  std::string* _internal_mutable_task();
  public:

  // optional string param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const std::string& param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param();
  PROTOBUF_NODISCARD std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // optional string detail = 5;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // optional .maarpc.Rect box = 4;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::maarpc::Rect& box() const;
  PROTOBUF_NODISCARD ::maarpc::Rect* release_box();
  ::maarpc::Rect* mutable_box();
  void set_allocated_box(::maarpc::Rect* box);
  private:
  const ::maarpc::Rect& _internal_box() const;
  ::maarpc::Rect* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::maarpc::Rect* box);
  ::maarpc::Rect* unsafe_arena_release_box();

  // @@protoc_insertion_point(class_scope:maarpc.CustomActionRunParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
    ::maarpc::Rect* box_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2eaction_2eproto;
};
// -------------------------------------------------------------------

class CustomActionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:maarpc.CustomActionResponse) */ {
 public:
  inline CustomActionResponse() : CustomActionResponse(nullptr) {}
  ~CustomActionResponse() override;
  explicit PROTOBUF_CONSTEXPR CustomActionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomActionResponse(const CustomActionResponse& from);
  CustomActionResponse(CustomActionResponse&& from) noexcept
    : CustomActionResponse() {
    *this = ::std::move(from);
  }

  inline CustomActionResponse& operator=(const CustomActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomActionResponse& operator=(CustomActionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomActionResponse& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kRun = 101,
    kStop = 102,
    COMMAND_NOT_SET = 0,
  };

  static inline const CustomActionResponse* internal_default_instance() {
    return reinterpret_cast<const CustomActionResponse*>(
               &_CustomActionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CustomActionResponse& a, CustomActionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomActionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomActionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomActionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomActionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CustomActionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CustomActionResponse& from) {
    CustomActionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomActionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "maarpc.CustomActionResponse";
  }
  protected:
  explicit CustomActionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunFieldNumber = 101,
    kStopFieldNumber = 102,
  };
  // .maarpc.CustomActionRunParam run = 101;
  bool has_run() const;
  private:
  bool _internal_has_run() const;
  public:
  void clear_run();
  const ::maarpc::CustomActionRunParam& run() const;
  PROTOBUF_NODISCARD ::maarpc::CustomActionRunParam* release_run();
  ::maarpc::CustomActionRunParam* mutable_run();
  void set_allocated_run(::maarpc::CustomActionRunParam* run);
  private:
  const ::maarpc::CustomActionRunParam& _internal_run() const;
  ::maarpc::CustomActionRunParam* _internal_mutable_run();
  public:
  void unsafe_arena_set_allocated_run(
      ::maarpc::CustomActionRunParam* run);
  ::maarpc::CustomActionRunParam* unsafe_arena_release_run();

  // bool stop = 102;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  bool stop() const;
  void set_stop(bool value);
  private:
  bool _internal_stop() const;
  void _internal_set_stop(bool value);
  public:

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:maarpc.CustomActionResponse)
 private:
  class _Internal;
  void set_has_run();
  void set_has_stop();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::maarpc::CustomActionRunParam* run_;
      bool stop_;
    } command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_custom_2eaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomActionInit

// optional string handle = 1;
inline bool CustomActionInit::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomActionInit::has_handle() const {
  return _internal_has_handle();
}
inline void CustomActionInit::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomActionInit::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionInit.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionInit::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionInit.handle)
}
inline std::string* CustomActionInit::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionInit.handle)
  return _s;
}
inline const std::string& CustomActionInit::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void CustomActionInit::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionInit::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionInit::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionInit.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionInit::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionInit.handle)
}

// optional string name = 2;
inline bool CustomActionInit::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomActionInit::has_name() const {
  return _internal_has_name();
}
inline void CustomActionInit::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomActionInit::name() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionInit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionInit::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionInit.name)
}
inline std::string* CustomActionInit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionInit.name)
  return _s;
}
inline const std::string& CustomActionInit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CustomActionInit::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionInit::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionInit::release_name() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionInit.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionInit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionInit.name)
}

// -------------------------------------------------------------------

// CustomActionSubmit

// optional string handle = 1;
inline bool CustomActionSubmit::_internal_has_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomActionSubmit::has_handle() const {
  return _internal_has_handle();
}
inline void CustomActionSubmit::clear_handle() {
  _impl_.handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomActionSubmit::handle() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionSubmit.handle)
  return _internal_handle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionSubmit::set_handle(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.handle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionSubmit.handle)
}
inline std::string* CustomActionSubmit::mutable_handle() {
  std::string* _s = _internal_mutable_handle();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionSubmit.handle)
  return _s;
}
inline const std::string& CustomActionSubmit::_internal_handle() const {
  return _impl_.handle_.Get();
}
inline void CustomActionSubmit::_internal_set_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.handle_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionSubmit::_internal_mutable_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.handle_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionSubmit::release_handle() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionSubmit.handle)
  if (!_internal_has_handle()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.handle_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionSubmit::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.handle_.SetAllocated(handle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.handle_.IsDefault()) {
    _impl_.handle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionSubmit.handle)
}

// optional string cmd_id = 2;
inline bool CustomActionSubmit::_internal_has_cmd_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomActionSubmit::has_cmd_id() const {
  return _internal_has_cmd_id();
}
inline void CustomActionSubmit::clear_cmd_id() {
  _impl_.cmd_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomActionSubmit::cmd_id() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionSubmit.cmd_id)
  return _internal_cmd_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionSubmit::set_cmd_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.cmd_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionSubmit.cmd_id)
}
inline std::string* CustomActionSubmit::mutable_cmd_id() {
  std::string* _s = _internal_mutable_cmd_id();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionSubmit.cmd_id)
  return _s;
}
inline const std::string& CustomActionSubmit::_internal_cmd_id() const {
  return _impl_.cmd_id_.Get();
}
inline void CustomActionSubmit::_internal_set_cmd_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionSubmit::_internal_mutable_cmd_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cmd_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionSubmit::release_cmd_id() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionSubmit.cmd_id)
  if (!_internal_has_cmd_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.cmd_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cmd_id_.IsDefault()) {
    _impl_.cmd_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionSubmit::set_allocated_cmd_id(std::string* cmd_id) {
  if (cmd_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cmd_id_.SetAllocated(cmd_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cmd_id_.IsDefault()) {
    _impl_.cmd_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionSubmit.cmd_id)
}

// optional bool ok = 3;
inline bool CustomActionSubmit::_internal_has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomActionSubmit::has_ok() const {
  return _internal_has_ok();
}
inline void CustomActionSubmit::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CustomActionSubmit::_internal_ok() const {
  return _impl_.ok_;
}
inline bool CustomActionSubmit::ok() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionSubmit.ok)
  return _internal_ok();
}
inline void CustomActionSubmit::_internal_set_ok(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ok_ = value;
}
inline void CustomActionSubmit::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomActionSubmit.ok)
}

// -------------------------------------------------------------------

// CustomActionRequest

// optional bool ok = 1;
inline bool CustomActionRequest::_internal_has_ok() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomActionRequest::has_ok() const {
  return _internal_has_ok();
}
inline void CustomActionRequest::clear_ok() {
  _impl_.ok_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CustomActionRequest::_internal_ok() const {
  return _impl_.ok_;
}
inline bool CustomActionRequest::ok() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRequest.ok)
  return _internal_ok();
}
inline void CustomActionRequest::_internal_set_ok(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ok_ = value;
}
inline void CustomActionRequest::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRequest.ok)
}

// .maarpc.CustomActionInit init = 101;
inline bool CustomActionRequest::_internal_has_init() const {
  return result_case() == kInit;
}
inline bool CustomActionRequest::has_init() const {
  return _internal_has_init();
}
inline void CustomActionRequest::set_has_init() {
  _impl_._oneof_case_[0] = kInit;
}
inline void CustomActionRequest::clear_init() {
  if (_internal_has_init()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.result_.init_;
    }
    clear_has_result();
  }
}
inline ::maarpc::CustomActionInit* CustomActionRequest::release_init() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRequest.init)
  if (_internal_has_init()) {
    clear_has_result();
    ::maarpc::CustomActionInit* temp = _impl_.result_.init_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.result_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomActionInit& CustomActionRequest::_internal_init() const {
  return _internal_has_init()
      ? *_impl_.result_.init_
      : reinterpret_cast< ::maarpc::CustomActionInit&>(::maarpc::_CustomActionInit_default_instance_);
}
inline const ::maarpc::CustomActionInit& CustomActionRequest::init() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRequest.init)
  return _internal_init();
}
inline ::maarpc::CustomActionInit* CustomActionRequest::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomActionRequest.init)
  if (_internal_has_init()) {
    clear_has_result();
    ::maarpc::CustomActionInit* temp = _impl_.result_.init_;
    _impl_.result_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomActionRequest::unsafe_arena_set_allocated_init(::maarpc::CustomActionInit* init) {
  clear_result();
  if (init) {
    set_has_init();
    _impl_.result_.init_ = init;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionRequest.init)
}
inline ::maarpc::CustomActionInit* CustomActionRequest::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_result();
    set_has_init();
    _impl_.result_.init_ = CreateMaybeMessage< ::maarpc::CustomActionInit >(GetArenaForAllocation());
  }
  return _impl_.result_.init_;
}
inline ::maarpc::CustomActionInit* CustomActionRequest::mutable_init() {
  ::maarpc::CustomActionInit* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRequest.init)
  return _msg;
}

inline bool CustomActionRequest::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void CustomActionRequest::clear_has_result() {
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}
inline CustomActionRequest::ResultCase CustomActionRequest::result_case() const {
  return CustomActionRequest::ResultCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomActionRunParam

// optional string context = 1;
inline bool CustomActionRunParam::_internal_has_context() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_context() const {
  return _internal_has_context();
}
inline void CustomActionRunParam::clear_context() {
  _impl_.context_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomActionRunParam::context() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_context(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.context_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.context)
}
inline std::string* CustomActionRunParam::mutable_context() {
  std::string* _s = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.context)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_context() const {
  return _impl_.context_.Get();
}
inline void CustomActionRunParam::_internal_set_context(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.context_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_context() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.context_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_context() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.context)
  if (!_internal_has_context()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.context_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.context_.SetAllocated(context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.context_.IsDefault()) {
    _impl_.context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.context)
}

// optional string task = 2;
inline bool CustomActionRunParam::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_task() const {
  return _internal_has_task();
}
inline void CustomActionRunParam::clear_task() {
  _impl_.task_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomActionRunParam::task() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.task)
  return _internal_task();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_task(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.task_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.task)
}
inline std::string* CustomActionRunParam::mutable_task() {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.task)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_task() const {
  return _impl_.task_.Get();
}
inline void CustomActionRunParam::_internal_set_task(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.task_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.task_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_task() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.task)
  if (!_internal_has_task()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.task_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_task(std::string* task) {
  if (task != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.task_.SetAllocated(task, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_.IsDefault()) {
    _impl_.task_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.task)
}

// optional string param = 3;
inline bool CustomActionRunParam::_internal_has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_param() const {
  return _internal_has_param();
}
inline void CustomActionRunParam::clear_param() {
  _impl_.param_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CustomActionRunParam::param() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.param)
  return _internal_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_param(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.param)
}
inline std::string* CustomActionRunParam::mutable_param() {
  std::string* _s = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.param)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_param() const {
  return _impl_.param_.Get();
}
inline void CustomActionRunParam::_internal_set_param(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.param_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.param_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_param() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.param)
  if (!_internal_has_param()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.param_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.param_.SetAllocated(param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.param_.IsDefault()) {
    _impl_.param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.param)
}

// optional .maarpc.Rect box = 4;
inline bool CustomActionRunParam::_internal_has_box() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.box_ != nullptr);
  return value;
}
inline bool CustomActionRunParam::has_box() const {
  return _internal_has_box();
}
inline const ::maarpc::Rect& CustomActionRunParam::_internal_box() const {
  const ::maarpc::Rect* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::maarpc::Rect&>(
      ::maarpc::_Rect_default_instance_);
}
inline const ::maarpc::Rect& CustomActionRunParam::box() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.box)
  return _internal_box();
}
inline void CustomActionRunParam::unsafe_arena_set_allocated_box(
    ::maarpc::Rect* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionRunParam.box)
}
inline ::maarpc::Rect* CustomActionRunParam::release_box() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::maarpc::Rect* CustomActionRunParam::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.box)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::maarpc::Rect* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::maarpc::Rect* CustomActionRunParam::_internal_mutable_box() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::maarpc::Rect>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::maarpc::Rect* CustomActionRunParam::mutable_box() {
  ::maarpc::Rect* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.box)
  return _msg;
}
inline void CustomActionRunParam::set_allocated_box(::maarpc::Rect* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(box));
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.box)
}

// optional string detail = 5;
inline bool CustomActionRunParam::_internal_has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomActionRunParam::has_detail() const {
  return _internal_has_detail();
}
inline void CustomActionRunParam::clear_detail() {
  _impl_.detail_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CustomActionRunParam::detail() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionRunParam.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomActionRunParam::set_detail(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.detail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:maarpc.CustomActionRunParam.detail)
}
inline std::string* CustomActionRunParam::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionRunParam.detail)
  return _s;
}
inline const std::string& CustomActionRunParam::_internal_detail() const {
  return _impl_.detail_.Get();
}
inline void CustomActionRunParam::_internal_set_detail(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.detail_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.detail_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomActionRunParam::release_detail() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionRunParam.detail)
  if (!_internal_has_detail()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.detail_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomActionRunParam::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.detail_.SetAllocated(detail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detail_.IsDefault()) {
    _impl_.detail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:maarpc.CustomActionRunParam.detail)
}

// -------------------------------------------------------------------

// CustomActionResponse

// .maarpc.CustomActionRunParam run = 101;
inline bool CustomActionResponse::_internal_has_run() const {
  return command_case() == kRun;
}
inline bool CustomActionResponse::has_run() const {
  return _internal_has_run();
}
inline void CustomActionResponse::set_has_run() {
  _impl_._oneof_case_[0] = kRun;
}
inline void CustomActionResponse::clear_run() {
  if (_internal_has_run()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.command_.run_;
    }
    clear_has_command();
  }
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::release_run() {
  // @@protoc_insertion_point(field_release:maarpc.CustomActionResponse.run)
  if (_internal_has_run()) {
    clear_has_command();
    ::maarpc::CustomActionRunParam* temp = _impl_.command_.run_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.command_.run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::maarpc::CustomActionRunParam& CustomActionResponse::_internal_run() const {
  return _internal_has_run()
      ? *_impl_.command_.run_
      : reinterpret_cast< ::maarpc::CustomActionRunParam&>(::maarpc::_CustomActionRunParam_default_instance_);
}
inline const ::maarpc::CustomActionRunParam& CustomActionResponse::run() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionResponse.run)
  return _internal_run();
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::unsafe_arena_release_run() {
  // @@protoc_insertion_point(field_unsafe_arena_release:maarpc.CustomActionResponse.run)
  if (_internal_has_run()) {
    clear_has_command();
    ::maarpc::CustomActionRunParam* temp = _impl_.command_.run_;
    _impl_.command_.run_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CustomActionResponse::unsafe_arena_set_allocated_run(::maarpc::CustomActionRunParam* run) {
  clear_command();
  if (run) {
    set_has_run();
    _impl_.command_.run_ = run;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:maarpc.CustomActionResponse.run)
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::_internal_mutable_run() {
  if (!_internal_has_run()) {
    clear_command();
    set_has_run();
    _impl_.command_.run_ = CreateMaybeMessage< ::maarpc::CustomActionRunParam >(GetArenaForAllocation());
  }
  return _impl_.command_.run_;
}
inline ::maarpc::CustomActionRunParam* CustomActionResponse::mutable_run() {
  ::maarpc::CustomActionRunParam* _msg = _internal_mutable_run();
  // @@protoc_insertion_point(field_mutable:maarpc.CustomActionResponse.run)
  return _msg;
}

// bool stop = 102;
inline bool CustomActionResponse::_internal_has_stop() const {
  return command_case() == kStop;
}
inline bool CustomActionResponse::has_stop() const {
  return _internal_has_stop();
}
inline void CustomActionResponse::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void CustomActionResponse::clear_stop() {
  if (_internal_has_stop()) {
    _impl_.command_.stop_ = false;
    clear_has_command();
  }
}
inline bool CustomActionResponse::_internal_stop() const {
  if (_internal_has_stop()) {
    return _impl_.command_.stop_;
  }
  return false;
}
inline void CustomActionResponse::_internal_set_stop(bool value) {
  if (!_internal_has_stop()) {
    clear_command();
    set_has_stop();
  }
  _impl_.command_.stop_ = value;
}
inline bool CustomActionResponse::stop() const {
  // @@protoc_insertion_point(field_get:maarpc.CustomActionResponse.stop)
  return _internal_stop();
}
inline void CustomActionResponse::set_stop(bool value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:maarpc.CustomActionResponse.stop)
}

inline bool CustomActionResponse::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CustomActionResponse::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline CustomActionResponse::CommandCase CustomActionResponse::command_case() const {
  return CustomActionResponse::CommandCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace maarpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_custom_2eaction_2eproto
