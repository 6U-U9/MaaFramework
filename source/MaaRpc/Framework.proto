syntax = "proto3";

package maa;

import "Types.proto";

message SetGlobalOptionRequest {
  oneof option {
    string logging = 1;
    bool debug_mode = 2;
  }
}

service MaaFramework {
  rpc version(EmptyRequest) returns (StringResponse);
  rpc set_global_option(SetGlobalOptionRequest) returns (EmptyResponse);

  rpc acquire_callback_id(EmptyRequest) returns (IdResponse);
  rpc register_callback(IdRequest) returns (stream Callback);
  rpc unregister_callback(IdRequest) returns (EmptyResponse);

  rpc acquire_custom_controller_id(EmptyRequest) returns (IdResponse);
}

/*
service MaaFrameworkString {
  rpc create(EmptyRequest) returns (HandleResponse);
  rpc destroy(HandleRequest) returns (EmptyResponse);
  rpc is_empty(HandleRequest) returns (BoolResponse);
  rpc clear(HandleRequest) returns (BoolResponse);
  rpc get(HandleRequest) returns (BufferResponse);
  rpc set(BufferRequest) returns (BoolResponse);
}
*/

message ImageInfoResponse {
  optional int32 type = 1;
  optional Size size = 2;
}

service MaaFrameworkImage {
  rpc create(EmptyRequest) returns (HandleResponse);
  rpc destroy(HandleRequest) returns (EmptyResponse);
  rpc is_empty(HandleRequest) returns (BoolResponse);
  rpc clear(HandleRequest) returns (EmptyResponse);
  rpc info(HandleRequest) returns (ImageInfoResponse);
  rpc encoded(HandleRequest) returns (BufferResponse);
  rpc set_encoded(HandleBufferRequest) returns (EmptyResponse);
}

service MaaFrameworkResource {
  rpc create(IdRequest) returns (HandleResponse);
  rpc destroy(HandleRequest) returns (EmptyResponse);

  rpc post_path(HandleStringRequest) returns (IdResponse);

  rpc status(HandleIdRequest) returns (StatusResponse);
  rpc wait(HandleIdRequest) returns (StatusResponse);
  rpc loaded(HandleRequest) returns (BoolResponse);
  rpc hash(HandleRequest) returns (StringResponse);
}

message AdbControllerRequest {
  optional Id callback = 1;
  optional string adb_path = 2;
  optional string adb_serial = 3;
  optional uint32 adb_type = 4;
  optional string adb_config = 5;
}

message CustomControllerRequest {
  optional Id callback = 1;
  optional Id ctrl = 2;
}

message CustomControllerSetOptionParam {
  optional int32 key = 1;
  optional string value = 2;
}

message CustomControllerResponse {
  optional Id ctrl = 1;
  optional Id id = 2;
  oneof command {
    bool connect = 101; // void
    ClickParam click = 102;
    SwipeParam swipe = 103;
    KeyParam key = 104;
    TouchParam touch_down = 105;
    TouchParam touch_move = 106;
    TouchParam touch_up = 107;
    string start = 108;
    string stop = 109;
    bool resolution = 110; // void
    Handle image = 111;
    bool uuid = 112; // void

    CustomControllerSetOptionParam set_option = 200;
  }
}

message SubmitCustomControllerRequest {
  optional Handle handle = 1;
  optional Id id = 2;
  optional bool ok = 3;
  oneof result {
    Size resolution = 101;
    string uuid = 102;
  }
}

message ControllerSetOptionRequest {
  oneof option {
    int32 long_side = 1;
    int32 short_side = 2;
    string def_package_entry = 3;
    string def_package = 4;
  }
}

message ControllerPostClickRequest {
  optional Handle handle = 1;
  optional ClickParam param = 2;
}

message ControllerPostSwipeRequest {
  optional Handle handle = 1;
  optional SwipeParam param = 2;
}

message ControllerPostKeyRequest {
  optional Handle handle = 1;
  optional KeyParam param = 2;
}

message ControllerPostTouchRequest {
  optional Handle handle = 1;
  optional TouchParam param = 2;
}

message ControllerGetImageRequest {
  optional Handle handle = 1;
  optional Handle image = 2;
}

service MaaFrameworkController {
  rpc create_adb(AdbControllerRequest) returns (HandleResponse);
  rpc destroy(HandleRequest) returns (EmptyResponse);

  rpc create_custom(CustomControllerRequest)
      returns (stream CustomControllerResponse);
  rpc submit_custom_controller(SubmitCustomControllerRequest)
      returns (EmptyResponse);

  rpc set_option(ControllerSetOptionRequest) returns (EmptyResponse);
  rpc post_connection(HandleRequest) returns (IdResponse);
  rpc post_click(ControllerPostClickRequest) returns (IdResponse);
  rpc post_swipe(ControllerPostSwipeRequest) returns (IdResponse);
  rpc post_press_key(ControllerPostKeyRequest) returns (IdResponse);
  rpc post_touch_down(ControllerPostTouchRequest) returns (IdResponse);
  rpc post_touch_move(ControllerPostTouchRequest) returns (IdResponse);
  rpc post_touch_up(ControllerPostTouchRequest) returns (IdResponse);
  rpc post_screencap(HandleRequest) returns (IdResponse);

  rpc status(HandleIdRequest) returns (StatusResponse);
  rpc wait(HandleIdRequest) returns (EmptyResponse);
  rpc connected(HandleRequest) returns (BoolResponse);

  rpc image(ControllerGetImageRequest) returns (EmptyResponse);
  rpc uuid(HandleRequest) returns (StringResponse);
}

message CustomRecognizerRequest {
  optional Handle handle = 1;
  optional string name = 2;
  optional Id reco = 3;
}

message CustomRecognizerAnalyzeParam {
  optional Handle context = 1;
  optional Handle image = 2;
  optional string task = 3;
  optional string param = 4;
}

message CustomRecognizerResponse {
  optional Id reco = 1;
  optional Id id = 2;
  oneof command { CustomRecognizerAnalyzeParam analyze = 101; }
}

message CustomRecognizerAnalyzeResult {
  optional bool match = 1;
  optional Rect box = 2;
  optional string detail = 3;
}

message SubmitCustomRecognizerRequest {
  optional Handle handle = 1;
  optional Id id = 2;
  optional bool ok = 3;
  oneof result { CustomRecognizerAnalyzeResult analyze = 101; }
}

message CustomActionRequest {
  optional Handle handle = 1;
  optional string name = 2;
  optional Id act = 3;
}

message CustomActionRunParam {
  optional Handle context = 1;
  optional string task = 2;
  optional string param = 3;
  optional Rect box = 4;
  optional string detail = 5;
}

message CustomActionResponse {
  optional Id act = 1;
  optional Id id = 2;
  oneof command {
    CustomActionRunParam run = 101;
    bool stop = 102; // void
  }
}

message SubmitCustomActionRequest {
  optional Handle handle = 1;
  optional Id id = 2;
  optional bool ok = 3;
}

message InstancePostTaskRequest {
  optional Handle handle = 1;
  optional string task = 2;
  optional string param = 3;
}

message InstanceSetTaskParamRequest {
  optional Handle handle = 1;
  optional Id id = 2;
  optional string param = 3;
}

service MaaFrameworkInstance {
  rpc create(IdRequest) returns (HandleResponse);
  rpc destroy(HandleRequest) returns (EmptyResponse);

  rpc register_custom_recognizer(CustomRecognizerRequest)
      returns (stream CustomRecognizerResponse);
  rpc submit_custom_recognizer(SubmitCustomRecognizerRequest)
      returns (EmptyResponse);
  rpc unregister_custom_recognizer(HandleStringRequest) returns (EmptyResponse);
  rpc clear_custom_recognizer(HandleRequest) returns (EmptyResponse);

  rpc register_custom_action(CustomRecognizerRequest)
      returns (stream CustomRecognizerResponse);
  rpc submit_custom_action(SubmitCustomRecognizerRequest)
      returns (EmptyResponse);
  rpc unregister_custom_action(HandleStringRequest) returns (EmptyResponse);
  rpc clear_custom_action(HandleRequest) returns (EmptyResponse);

  rpc bind_resource(HandleRequest) returns (EmptyResponse);
  rpc bind_controller(HandleRequest) returns (EmptyResponse);
  rpc inited(HandleRequest) returns (BoolResponse);

  rpc post_task(InstancePostTaskRequest) returns (IdResponse);
  rpc set_task_param(InstanceSetTaskParamRequest) returns (EmptyResponse);

  rpc status(HandleIdRequest) returns (StatusResponse);
  rpc wait(HandleIdRequest) returns (EmptyResponse);
  rpc all_finished(HandleRequest) returns (BoolResponse);

  rpc stop(HandleRequest) returns (EmptyResponse);

  rpc resource(HandleRequest) returns (HandleRequest);
  rpc controller(HandleRequest) returns (HandleRequest);
}

message SyncContextRunTaskRequest {
  optional Handle handle = 1;
  optional string task = 2;
  optional string param = 3;
}

message SyncContextRunRecognizerRequest {
  optional Handle handle = 1;
  optional string task = 2;
  optional string param = 3;
  optional Handle image = 4;
}

message SyncContextRunRecognizerResponse {
  optional bool match = 1;
  optional Rect box = 2;
  optional string detail = 3;
  optional RpcStatus status = 101;
}

message SyncContextRunActionRequest {
  optional Handle handle = 1;
  optional string task = 2;
  optional string param = 3;
  optional Rect box = 4;
  optional string detail = 5;
}

message SyncContextClickRequest {
  optional Handle handle = 1;
  optional ClickParam param = 2;
}

message SyncContextSwipeRequest {
  optional Handle handle = 1;
  optional SwipeParam param = 2;
}

message SyncContextKeyRequest {
  optional Handle handle = 1;
  optional KeyParam param = 2;
}

message SyncContextTouchRequest {
  optional Handle handle = 1;
  optional TouchParam param = 2;
}

message SyncContextScreencapRequest {
  optional Handle handle = 1;
  optional Handle image = 2;
}

service MaaFrameworkSyncContext {
  rpc run_task(SyncContextRunTaskRequest) returns (EmptyResponse);
  rpc run_recognizer(SyncContextRunRecognizerRequest)
      returns (SyncContextRunRecognizerResponse);
  rpc run_action(SyncContextRunActionRequest) returns (EmptyResponse);

  rpc click(SyncContextClickRequest) returns (EmptyRequest);
  rpc swipe(SyncContextSwipeRequest) returns (EmptyRequest);
  rpc key(SyncContextKeyRequest) returns (EmptyRequest);
  rpc touch_down(SyncContextTouchRequest) returns (EmptyRequest);
  rpc touch_move(SyncContextTouchRequest) returns (EmptyRequest);
  rpc touch_up(SyncContextTouchRequest) returns (EmptyRequest);

  rpc screencap(SyncContextScreencapRequest) returns (EmptyResponse);
  rpc task_result(HandleStringRequest) returns (StringResponse);
}